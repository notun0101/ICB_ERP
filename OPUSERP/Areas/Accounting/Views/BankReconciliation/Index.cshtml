@model BankReconciliationModel
@{
    ViewData["Title"] = "Bank Reconciliation List";
    Layout = "~/Areas/Accounting/Views/Shared/_VoucherLayout.cshtml";
    int masterId = Convert.ToInt32(ViewBag.masterId);
}

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header" style="padding:6px 0px 0px 3px;">
                <label style="padding:0px 0px 0px 0px;font-size:18px;font-weight:800;text-align:center" class="col-sm-10 pull-left">Reconcile an account</label>
                <label style="padding:0px 0px 0px 0px;font-size:15px;font-weight:600;text-align:center" class="col-sm-10 pull-left">Open your statement and we'll get started.</label>
            </div>
            @*<form id="fromRecon" asp-area="Accounting" asp-controller="BankReconciliation" asp-action="Index" method="post" enctype="multipart/form-data" data-parsley-validate="parsley">*@
            <form id="formRecon" autocomplete="off" enctype="multipart/form-data" data-parsley-validate="parsley">
                <div asp-validation-summary="All" class="text-danger"></div>
                <input type="text" class="form-control input-group-sm" value="@ViewBag.masterId" name="bankReconciliationId" id="bankReconciliationId" hidden />
                <div class="card-body">

                    <div class="row col-md-12">
                        <div class="col-md-6" hidden>
                            <div class="form-group row" id="SBUSelect">
                                <label for="sbuId" class="col-sm-4 col-form-label">SBU</label>
                                <div class="col-sm-8">
                                    <select type="text" class="form-control" id="sbuId" name="sbuId"></select>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group row">
                                <label for="ReconRef" class="col-sm-4 col-form-label text-left">Recon Ref:</label>
                                <div class="col-sm-8">
                                    <input type="text" class="form-control input-group-sm" value="@ViewBag.refno" name="ReconRef" id="ReconRef" readonly />
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                @{
                    var accountName = "";
                    if (@Model.bankReconcileMaster?.ledger != null) {
                        accountName = @Model.bankReconcileMaster?.ledger?.accountName + " (" + @Model.bankReconcileMaster?.ledger?.accountCode + ")";

                    }

                    <div class="card-body">

                        <div class="row col-md-12">
                            <label style="padding:0px 0px 0px 0px;font-size:18px;font-weight:800;text-align:left" class="col-sm-10 pull-left">Which account do you want to reconcile?</label>


                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label for="reconFromDatee" class="col-sm-4 col-form-label text-left"> From Date</label>
                                    <div class="col-sm-8">
                                        <input type="text" name="reconFromDate" id="reconFromDate" style="text-align:center" class="datepicker_ fas fa-calendar-alt form-control input-group-sm input-group-text" readonly />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label for="reconToDate" class="col-sm-4 col-form-label text-left"> To Date </label>
                                    <div class="col-sm-8">
                                        <input type="text" name="reconToDate" id="reconToDate" style="text-align:center" class="datepicker_ fas fa-calendar-alt form-control input-group-sm input-group-text" readonly />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label for="txtPaymentAccount" class="col-sm-4 col-form-label text-left">Select Account<span style="color:red;">*</span></label>
                                    <div class="col-sm-8">
                                        <input type="text" class="form-control input-group-sm" name="txtPaymentAccount" id="txtPaymentAccount" value="@accountName" data-parsley-validate="parsley" />
                                        <input type="hidden" id="txtPaymentAccountId" name="txtPaymentAccountId" value="@Model.bankReconcileMaster?.ledger?.Id" />
                                        <input type="hidden" id="hdnPaymentAccId" name="hdnPaymentAccId" value="@Model.bankReconcileMaster?.ledgerRelationId"/>
                                        <input type="hidden" id="txtPaymentAccountCode" name="txtPaymentAccountCode" />
                                        <input type="hidden" id="txtPaymentnatureId" name="txtPaymentnatureId" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label for="currentBalance" class="col-sm-4 col-form-label text-left">Current Balance</label>
                                    <div class="col-sm-8">
                                        <input name="currentBalancetext" id="currentBalancetext" class="form-control input-group-sm read text-right" value="@Model.bankReconcileMaster?.closingBalance" readonly />
                                        <input type="number"  name="currentBalance" id="currentBalance" class="form-control input-group-sm read text-right" value="@Model.bankReconcileMaster?.closingBalance" hidden />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="row col-md-12">
                            <label style="padding:0px 0px 0px 0px;font-size:18px;font-weight:800;text-align:left" class="col-sm-10 pull-left">Add the following information</label>

                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label for="bankStatementClosingBalancee" class="col-sm-4 col-form-label text-left">Bank Statement Closing Balance<span style="color:red;">*</span></label>
                                    <div class="col-sm-8">
                                        <input data-parsley-type="number" data-parsley-trigger="keyup" class="form-control input-group-sm" name="bankStatementClosingBalance" id="bankStatementClosingBalance" value="@Model.bankReconcileMaster?.bankStatementClosingBalance" />

                                    </div>
                                </div>
                                @*<div class="form-group row">
                                    <label for="reconFromDatee" class="col-sm-4 col-form-label text-left"> From Date</label>
                                    <div class="col-sm-8">
                                        <input type="text" name="reconFromDate" id="reconFromDate" style="text-align:center" class="fas fa-calendar-alt form-control input-group-sm input-group-text" readonly />
                                    </div>
                                </div>*@

                                <div class="form-group row">
                                    <label for="closingDatee" class="col-sm-4 col-form-label text-left"> Closing Date </label>
                                    <div class="col-sm-8">
                                        <input type="text" name="closingDate" id="closingDate" style="text-align:center" class="fas fa-calendar-alt form-control input-group-sm input-group-text" readonly />
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-6">


                                <div class="form-group row">
                                    <label for="bankStatementClosingBalanceDifference" class="col-sm-4 col-form-label text-left"> Difference</label>
                                    <div class="col-sm-8">
                                        <input type="number" name="bankStatementClosingBalanceDifference" id="bankStatementClosingBalanceDifference" class="form-control input-group-sm read text-right" readonly />

                                    </div>
                                </div>
                                @*<div class="form-group row" style="margin-top: 24px;">
                                    <label for="reconToDate" class="col-sm-4 col-form-label text-left"> To Date </label>
                                    <div class="col-sm-8">
                                        <input type="text" name="reconToDate" id="reconToDate" style="text-align:center" class="fas fa-calendar-alt form-control input-group-sm input-group-text" readonly />
                                    </div>
                                </div>*@
                                <div class="form-group row" style="margin-top: 10px">
                                    <label for="" class="col-sm-4 col-form-label text-left"> </label>
                                    <div class="col-sm-8" style="margin-top: 11px;">
                                        <input type="submit" id="btnSave" value="Start Reconsiling" class="btn btn-info " />
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                }
            </form>
        </div>
    </div>
</div>
<br />



@section ScriptsV{
<script type="text/javascript">
        @*<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>*@
    //<script>

        function getDateFormat(_date) {
            var formattedDate = new Date(_date);
            var d = formattedDate.getDate();
            var m = formattedDate.getMonth();
            //m += 1;  // JavaScript months are 0-11
            var y = formattedDate.getFullYear();

            var monthNames = [
                "Jan", "Feb", "Mar",
                "Apr", "May", "Jun", "Jul",
                "Aug", "Sep", "Oct",
                "Nov", "Dec"
            ];

            var fullDate = d + "-" + monthNames[m] + "-" + y;
            return fullDate;
        }


        $(document).ready(function () {
            $('#bankStatementClosingBalance').keyup(function () {
               balanceCalculation();
            })
             $("#closingDate").datepicker({ dateFormat: "dd-M-yy", showAnim: "scale", changeMonth: true, changeYear: true, yearRange: "1900:2100" }).datepicker("setDate", new Date());
            $("#reconFromDate").datepicker({ dateFormat: "dd-M-yy", showAnim: "scale", changeMonth: true, changeYear: true, yearRange: "1900:2100" }).datepicker("setDate", new Date());
            $("#reconToDate").datepicker({ dateFormat: "dd-M-yy", showAnim: "scale", changeMonth: true, changeYear: true, yearRange: "1900:2100" }).datepicker("setDate", new Date());
            Common.Ajax('GET', '/global/api/GetSBU/', [], 'json', GetSBU);

            $("#btnSave").click(function (e) {

                if ($("#txtPaymentAccount").val() == "") {
                    alert("Please Select Payment Account.!!!");
                    return false;
                }
                if ($("#txtPaymentAccountId").val() == "") {
                    $("#txtPaymentAccount").val('');
                    alert("Please Enter valid Account.!!!");
                    return false;
                }

                if ($("#bankStatementClosingBalance").val() == "") {
                    alert("Please Insert Bank Statement Closing Balance !!!");
                    return false;
                }


                e.preventDefault();

                var form = $("#formRecon");
                $.ajax({
                    url: '/Accounting/BankReconciliation/Index',
                    data: form.serialize(),
                    type: 'POST',
                    success: function (records) {
                        if (records.Success) {
                            swal({
                                title: '', text: 'Save Successfully!', type: 'success', showCancelButton: false, confirmButtonColor: '#3085d6', confirmButtonText: 'Ok!',
                            }).then(function () {
                                window.location.href = "/Accounting/BankReconciliation/ReconciliationDetails?id=" + records.id;
                            });
                        } else {

                            alert("Invalid Attempt!!!");
                        }

                    }
                });
            });


            if (@masterId> 0) {
                $("#sbuId").val(@Model.bankReconcileMaster?.sbuId);
                $("#closingDate").val(getDateFormat('@Model.bankReconcileMaster?.closingDate'));
                $("#reconToDate").val(getDateFormat('@Model.bankReconcileMaster?.reconToDate'));
                $("#reconFromDate").val(getDateFormat('@Model.bankReconcileMaster?.reconFromDate'));
                $("#txtPaymentAccountId").val(@Model.bankReconcileMaster?.ledgerId);
                $("#hdnPaymentAccId").val(@Model.bankReconcileMaster?.ledgerRelationId);
                //$("#txtPaymentAccount").change();
                
                balanceCalculation();
            }


        });

        function GetSBU(response) {
            $('#sbuId').empty();
            var options = '';
            $.each(response, function (i, item) {
            options += '<option selected value="' + item.Id + '">' + item.branchUnitName + '</option>';
              //var id = item.Id;
              //Common.Ajax('GET', '/api/global/getLedersForPayment/' + id, [], 'json', GetLedgerList);
            });
            $('#sbuId').append(options);

            var id = response[0].Id
            $('#sbuId').val(id);
            Common.Ajax('GET', '/api/global/getLedersForPayment/' + id, [], 'json', GetLedgerList);
            //Common.Ajax('GET', '/global/api/GetProject/' + id, [], 'json', GetProject, false);
            // Common.Ajax('GET', '/global/api/GetLedgerbysbuId/' + id, [], 'json', GetLedgerForSubLedger);
    }

    $(".datepicker_").on('change', function (event) {
        var key = $("#hdnPaymentAccId").val();
        var reconFromDate = $("#reconFromDate").val();
        var reconToDate = $("#reconToDate").val();
        if (key != "") {
            var url = "/api/global/getOpenBalanceDateWise/" + key + "/" + reconFromDate + "/" + reconToDate
            Common.Ajax('GET', url, [], 'json', GetPaymentLedgerBalance);
        }
    });

        function GetLedgerList(response) {
            $('#txtPaymentAccount').empty();
            $("#txtPaymentAccountId").val('');
            $("#hdnPaymentAccId").val('');
            $("#txtPaymentAccountCode").val('');
            $("#txtPaymentnatureId").val('');

            if (@masterId> 0) {
                $("#txtPaymentAccountId").val(@Model.bankReconcileMaster?.ledgerId);
                $("#hdnPaymentAccId").val(@Model.bankReconcileMaster?.ledgerRelationId);
            }

            var lstLedger = [];
            $.each(response, function (i, option) {
                var obj = new Object();
                obj.key = option.Id;
                obj.ledgerId = option.ledgerId;
                obj.accountCode = option.accountCode;
                obj.natureId = option.natureId;
                obj.value = option.accountName + ' (' + option.accountCode + ')';
                lstLedger[lstLedger.length] = obj;
            });
            $('#txtPaymentAccount').autocomplete({
            source: lstLedger,
                select: function (event, ui) {
            $('#txtPaymentAccount').val(ui.item.value);
                    $("#txtPaymentAccountId").val(ui.item.ledgerId);
                    $("#txtPaymentAccountCode").val(ui.item.accountCode);
                    $("#txtPaymentnatureId").val(ui.item.natureId);
                    $("#hdnPaymentAccId").val(ui.item.key);
                    var reconFromDate = $("#reconFromDate").val();
                    var reconToDate = $("#reconToDate").val();
                    
                    var url = "/api/global/getOpenBalanceDateWise/" + ui.item.key + "/" + reconFromDate + "/" + reconToDate
                    Common.Ajax('GET', url, [], 'json', GetPaymentLedgerBalance);
                }
            });
        }

        function GetPaymentLedgerBalance(response) {
            $('#currentBalance').val('');

          //  $('#currentBalancetext').val(addCommas(response));
            $('#currentBalance').val(response);
            if (response >= 0) {
                $('#currentBalancetext').val(addCommas(response));
            }
            else {
                $('#currentBalancetext').val(addCommas('(' + response * -1 + ')'));
            }
            balanceCalculation();
        }

        function addCommas(x) {
            var parts = x.toString().split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return parts.join(".");
        }

        function balanceCalculation() {
            var currentBalance = parseFloat($('#currentBalance').val());
            var bankStatementClosingBalance = parseInt($('#bankStatementClosingBalance').val());
            if (currentBalance != null && bankStatementClosingBalance != null) {
                var difference = (currentBalance - bankStatementClosingBalance);
                $('#bankStatementClosingBalanceDifference').val(difference.toFixed(2));
            }
        }
</script>
}
