using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace OPUSERP.Migrations
{
    public partial class init : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "ACCOUNT");

            migrationBuilder.EnsureSchema(
                name: "Budget");

            migrationBuilder.EnsureSchema(
                name: "Club");

            migrationBuilder.EnsureSchema(
                name: "CRM");

            migrationBuilder.EnsureSchema(
                name: "CRO");

            migrationBuilder.EnsureSchema(
                name: "Doc");

            migrationBuilder.EnsureSchema(
                name: "HR");

            migrationBuilder.EnsureSchema(
                name: "Purchase");

            migrationBuilder.EnsureSchema(
                name: "SCM");

            migrationBuilder.EnsureSchema(
                name: "Distribution");

            migrationBuilder.EnsureSchema(
                name: "FAMS");

            migrationBuilder.EnsureSchema(
                name: "ACR");

            migrationBuilder.EnsureSchema(
                name: "IELTS");

            migrationBuilder.EnsureSchema(
                name: "MMS");

            migrationBuilder.EnsureSchema(
                name: "MBox");

            migrationBuilder.EnsureSchema(
                name: "OSales");

            migrationBuilder.EnsureSchema(
                name: "POS");

            migrationBuilder.EnsureSchema(
                name: "HOSPTL");

            migrationBuilder.EnsureSchema(
                name: "Payroll");

            migrationBuilder.EnsureSchema(
                name: "Fixation");

            migrationBuilder.EnsureSchema(
                name: "PROD");

            migrationBuilder.EnsureSchema(
                name: "PM");

            migrationBuilder.EnsureSchema(
                name: "PF");

            migrationBuilder.EnsureSchema(
                name: "REMS");

            migrationBuilder.EnsureSchema(
                name: "RCRT");

            migrationBuilder.EnsureSchema(
                name: "Rental");

            migrationBuilder.EnsureSchema(
                name: "SEBA");

            migrationBuilder.EnsureSchema(
                name: "Sales");

            migrationBuilder.EnsureSchema(
                name: "Shagotom");

            migrationBuilder.EnsureSchema(
                name: "TMS");

            migrationBuilder.EnsureSchema(
                name: "VEMS");

            migrationBuilder.EnsureSchema(
                name: "VMS");

            migrationBuilder.EnsureSchema(
                name: "WMS");

            migrationBuilder.CreateTable(
                name: "addressCategories",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_addressCategories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AddressTypes",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    typeName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AddressTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    Name = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "autonumberingInfos",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fieldName = table.Column<string>(nullable: true),
                    NumType = table.Column<int>(nullable: true),
                    defaultValue = table.Column<int>(nullable: true),
                    prefix = table.Column<string>(nullable: true),
                    startValue = table.Column<int>(nullable: true),
                    NumValue = table.Column<int>(nullable: true),
                    separator = table.Column<string>(nullable: true),
                    yseparator = table.Column<string>(nullable: true),
                    mseparator = table.Column<string>(nullable: true),
                    dseparator = table.Column<string>(nullable: true),
                    isyear = table.Column<int>(nullable: true),
                    ismonth = table.Column<int>(nullable: true),
                    isdate = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_autonumberingInfos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "commentORSuggestions",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    commentORSuggestionName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_commentORSuggestions", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Countries",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    countryCode = table.Column<string>(nullable: false),
                    countryName = table.Column<string>(nullable: false),
                    countryNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Countries", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DbChangeHistories",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    entityName = table.Column<string>(maxLength: 300, nullable: true),
                    entityState = table.Column<string>(maxLength: 100, nullable: true),
                    fieldName = table.Column<string>(maxLength: 200, nullable: true),
                    fieldValue = table.Column<string>(nullable: true),
                    sessionId = table.Column<long>(nullable: false),
                    remarks = table.Column<string>(maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DbChangeHistories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ERPModules",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    moduleName = table.Column<string>(nullable: true),
                    moduleNameBN = table.Column<string>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true),
                    isTeam = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ERPModules", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "eventDutyMasters",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_eventDutyMasters", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "fDRCalFormulas",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    TypeName = table.Column<string>(nullable: true),
                    TypeText = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_fDRCalFormulas", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "feelAboutTheFollowings",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    feelAboutTheFollowingName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_feelAboutTheFollowings", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "forgotPasswordHistories",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ipAddress = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    username = table.Column<string>(nullable: true),
                    recoverCode = table.Column<string>(nullable: true),
                    oldPass = table.Column<string>(nullable: true),
                    newPass = table.Column<string>(nullable: true),
                    codeExpire = table.Column<DateTime>(nullable: true),
                    changeReqCount = table.Column<int>(nullable: true),
                    changeCount = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_forgotPasswordHistories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "hallInfos",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    hallName = table.Column<string>(nullable: true),
                    hallNameBn = table.Column<string>(nullable: true),
                    floor = table.Column<string>(nullable: true),
                    seatCapacity = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_hallInfos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "hallRentalShifts",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    shiftName = table.Column<string>(nullable: true),
                    shiftNameBn = table.Column<string>(nullable: true),
                    startTime = table.Column<string>(nullable: true),
                    endTime = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_hallRentalShifts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "interviewComments",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    commentText = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_interviewComments", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "jDTaskLists",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    TaskName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_jDTaskLists", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MasterMenus",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    aliasName = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    areaName = table.Column<string>(nullable: true),
                    controllerName = table.Column<string>(nullable: true),
                    methodName = table.Column<string>(nullable: true),
                    company = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MasterMenus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "medicalDiseases",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    level = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_medicalDiseases", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MenuBands",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bandName = table.Column<string>(nullable: true),
                    parentId = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MenuBands", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "payAndBenefits",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    payAndBenefitsName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_payAndBenefits", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "reasonForLeavings",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    reasonName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_reasonForLeavings", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "staffLoanUploadFaileds",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    empName = table.Column<string>(nullable: true),
                    postingPlace = table.Column<string>(nullable: true),
                    loanType = table.Column<string>(nullable: true),
                    LoanNo = table.Column<string>(nullable: true),
                    NewLoanNo = table.Column<string>(nullable: true),
                    interestRate = table.Column<decimal>(nullable: true),
                    principalAmount = table.Column<decimal>(nullable: true),
                    interestAmount = table.Column<decimal>(nullable: true),
                    chargeAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    totalDisbursement = table.Column<decimal>(nullable: true),
                    loanDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_staffLoanUploadFaileds", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "userBackups",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    EmpCode = table.Column<string>(nullable: true),
                    userTypeId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    userName = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    AspnetId = table.Column<string>(nullable: true),
                    MaxAmount = table.Column<decimal>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    org = table.Column<string>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true),
                    deleteBy = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_userBackups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserLogHistories",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    userId = table.Column<string>(maxLength: 250, nullable: true),
                    logTime = table.Column<DateTime>(maxLength: 250, nullable: false),
                    status = table.Column<int>(nullable: true),
                    ipAddress = table.Column<string>(maxLength: 250, nullable: true),
                    browserName = table.Column<string>(nullable: true),
                    pcName = table.Column<string>(maxLength: 250, nullable: true),
                    mac = table.Column<string>(nullable: true),
                    ipAddress2 = table.Column<string>(nullable: true),
                    deviceName = table.Column<string>(nullable: true),
                    Latitude = table.Column<string>(nullable: true),
                    Longitude = table.Column<string>(nullable: true),
                    Address = table.Column<string>(nullable: true),
                    deviceId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserLogHistories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserTypeGroups",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    groupTypeNameBN = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    groupTypeName = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserTypeGroups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Visitors",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    contactPerson = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    contactNo = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    floorNo = table.Column<string>(nullable: true),
                    visitorName = table.Column<string>(nullable: true),
                    visitorContact = table.Column<string>(nullable: true),
                    visitorCompany = table.Column<string>(nullable: true),
                    visitorEmail = table.Column<string>(nullable: true),
                    imagePath = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Visitors", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AccountMode",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    modeName = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountMode", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AutoVoucherName",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    autoVoucherName = table.Column<string>(maxLength: 200, nullable: true),
                    shortName = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AutoVoucherName", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CostCentre",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    centreName = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    aliesName = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    centreCode = table.Column<string>(maxLength: 100, nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CostCentre", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DeleteCostCentreAllocation",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    costCentreId = table.Column<int>(nullable: true),
                    voucherDetailId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeleteCostCentreAllocation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DeleteVoucherDetail",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherDetailId = table.Column<int>(nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    transectionModeId = table.Column<int>(nullable: true),
                    isPrincAcc = table.Column<int>(nullable: true),
                    accountName = table.Column<string>(type: "nvarchar(500)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeleteVoucherDetail", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FundSource",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    sourceName = table.Column<string>(type: "nvarchar(250)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FundSource", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "GroupNature",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    natureName = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    natureNameBN = table.Column<string>(type: "nvarchar(350)", nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    printOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GroupNature", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RateType",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    RateTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RateType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SignatureType",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    signatureTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SignatureType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TransectionMode",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    modeName = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransectionMode", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VoucherApproveLog",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    statusId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherApproveLog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VoucherType",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherTypeName = table.Column<string>(maxLength: 100, nullable: true),
                    voucherTypeNameBN = table.Column<string>(maxLength: 100, nullable: true),
                    aliasName = table.Column<string>(maxLength: 100, nullable: true),
                    abbreviation = table.Column<string>(maxLength: 100, nullable: true),
                    isActive = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DocumentAttachments",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assesmentId = table.Column<int>(nullable: true),
                    empCode = table.Column<string>(maxLength: 10, nullable: true),
                    attachmentpath = table.Column<string>(maxLength: 300, nullable: true),
                    attachFor = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentAttachments", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmployeesJobDuration",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCode = table.Column<string>(maxLength: 10, nullable: true),
                    yearName = table.Column<string>(maxLength: 4, nullable: true),
                    JobDuration = table.Column<string>(maxLength: 150, nullable: true),
                    JobDurationAsBranchManger = table.Column<string>(maxLength: 150, nullable: true),
                    JobDurationAsZonalHead = table.Column<string>(maxLength: 150, nullable: true),
                    JobDurationAsOthers = table.Column<string>(maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeesJobDuration", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JobResponsibility",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ResponsibilityName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobResponsibility", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FiscalYear",
                schema: "Budget",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    yearName = table.Column<string>(maxLength: 100, nullable: true),
                    yearCaption = table.Column<string>(maxLength: 100, nullable: true),
                    aliasName = table.Column<string>(maxLength: 100, nullable: true),
                    yearStartFrom = table.Column<DateTime>(nullable: true),
                    bookStartFrom = table.Column<DateTime>(nullable: true),
                    yearEndOn = table.Column<DateTime>(nullable: true),
                    lockMonth = table.Column<DateTime>(nullable: true),
                    yearStatus = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FiscalYear", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BulkHistory",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    number = table.Column<string>(nullable: true),
                    text = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    groupId = table.Column<int>(nullable: true),
                    type = table.Column<int>(nullable: false),
                    date = table.Column<DateTime>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BulkHistory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EventCategory",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EventCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "GalleryTitle",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    title = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    type = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GalleryTitle", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MemberGroup",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberGroup", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MemberType",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    memberType = table.Column<string>(nullable: false),
                    memberTypeBn = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NewsInfo",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    title = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    description = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NewsInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NoticeAuthor",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    signature = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NoticeAuthor", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NoticeInfo",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    subject = table.Column<string>(nullable: true),
                    notice = table.Column<string>(type: "text", nullable: true),
                    url = table.Column<string>(nullable: true),
                    noticeType = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    slNo = table.Column<string>(nullable: true),
                    validiTyTill = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NoticeInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NoticeType",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NoticeType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ParticipantHead",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ParticipantHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ParticipantType",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ParticipantType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PaymentHead",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SpecialSkill",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    skilName = table.Column<string>(nullable: false),
                    skilNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialSkill", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SponsorShip",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    link = table.Column<string>(nullable: true),
                    sponsorInfo = table.Column<string>(nullable: true),
                    details = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SponsorShip", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActivityCategory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityCategoryName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActivityNature",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityNatureName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityNature", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActivitySession",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activitySessionName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivitySession", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActivityStatus",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    status = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActivityType",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityTypeName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AgreementCategory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementCategoryName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AgreementStatus",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementStatusName = table.Column<string>(maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AgreementType",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementTypeName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BankBranch",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    branchName = table.Column<string>(maxLength: 250, nullable: true),
                    routingNumber = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankBranch", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CommunicationType",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    comTypeId = table.Column<int>(nullable: false),
                    communicationTypeName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CommunicationType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CRMDepartment",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    deptCode = table.Column<string>(nullable: true),
                    deptName = table.Column<string>(nullable: false),
                    deptNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRMDepartment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CRMDesignation",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    designationCode = table.Column<string>(nullable: false),
                    designationName = table.Column<string>(nullable: false),
                    designationNameBN = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRMDesignation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CRMTeamMaster ",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    teamCode = table.Column<string>(maxLength: 50, nullable: true),
                    teamName = table.Column<string>(maxLength: 250, nullable: true),
                    leaderId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRMTeamMaster ", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FIType",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fiTypeName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FIType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Industry",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    industryName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Industry", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LeadProgressStatus",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeadProgressStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OwnerShipType",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ownerShipTypeName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OwnerShipType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Product",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productName = table.Column<string>(maxLength: 250, nullable: true),
                    productDescription = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Product", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProposalParticulars",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    proposalParticularsName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalParticulars", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProposalStatus",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    proposalStatusName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProposalType",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    proposalTypeName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RatingCategory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ratingCategoryName = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RatingCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RatingYear",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ratingYearName = table.Column<string>(maxLength: 100, nullable: true),
                    ratingType = table.Column<string>(maxLength: 100, nullable: true),
                    ratingTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RatingYear", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Sector",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sectorName = table.Column<string>(nullable: true),
                    sectorId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Sector", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Sector_Sector_sectorId",
                        column: x => x.sectorId,
                        principalSchema: "CRM",
                        principalTable: "Sector",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Source",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sourceName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Source", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TaxCategory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taxCategoryName = table.Column<string>(maxLength: 100, nullable: true),
                    taxRate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaxCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VatCategory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vatCategoryName = table.Column<string>(maxLength: 100, nullable: true),
                    vatRate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VatCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ArchiveFloor",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    archiveFloorName = table.Column<string>(maxLength: 350, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ArchiveFloor", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AttachmentType",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    attachmentTypeName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttachmentType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DocumentChart",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    documentName = table.Column<string>(maxLength: 250, nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentChart", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JobStatus",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobStatusName = table.Column<string>(maxLength: 350, nullable: true),
                    isMyJob = table.Column<string>(maxLength: 3, nullable: true),
                    isReviewReport = table.Column<string>(maxLength: 3, nullable: true),
                    isConversion = table.Column<string>(maxLength: 3, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RatingType",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ratingTypeName = table.Column<string>(maxLength: 350, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RatingType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DistributorType",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DistributorType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalesLevel",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    code = table.Column<string>(nullable: true),
                    salesLevelId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesLevel", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesLevel_SalesLevel_salesLevelId",
                        column: x => x.salesLevelId,
                        principalSchema: "Distribution",
                        principalTable: "SalesLevel",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentCategory",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    categoryName = table.Column<string>(maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FieldType",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fieldTypeName = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FieldType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AssetRetirementTypes",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRetirementTypeName = table.Column<string>(maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetRetirementTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AssetYear",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    AssetYearName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetYear", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DepriciationRate",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    depreciationName = table.Column<string>(maxLength: 400, nullable: true),
                    rate = table.Column<decimal>(nullable: true),
                    usefulLife = table.Column<int>(nullable: true),
                    formulaType = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DepriciationRate", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProcurementSource",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sourceName = table.Column<string>(maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcurementSource", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RegistrationType",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    RegistrationTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RegistrationType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FixaType",
                schema: "Fixation",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    FixationTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FixaType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DiseaseInfo",
                schema: "HOSPTL",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    diseaseName = table.Column<string>(maxLength: 250, nullable: true),
                    diseaseDescription = table.Column<string>(maxLength: 550, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiseaseInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PatientInfo",
                schema: "HOSPTL",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    patientName = table.Column<string>(maxLength: 250, nullable: true),
                    ageInYears = table.Column<int>(nullable: true),
                    ageInMonths = table.Column<int>(nullable: true),
                    ageInDays = table.Column<int>(nullable: true),
                    gender = table.Column<string>(maxLength: 6, nullable: true),
                    patientMobile = table.Column<string>(maxLength: 15, nullable: true),
                    patientPhone = table.Column<string>(maxLength: 15, nullable: true),
                    patientEmail = table.Column<string>(maxLength: 100, nullable: true),
                    admissionDate = table.Column<DateTime>(nullable: true),
                    patientCode = table.Column<string>(maxLength: 10, nullable: true),
                    fatherName = table.Column<string>(maxLength: 200, nullable: true),
                    motherName = table.Column<string>(maxLength: 200, nullable: true),
                    maritalStatus = table.Column<string>(maxLength: 15, nullable: true),
                    bloodGroup = table.Column<string>(maxLength: 10, nullable: true),
                    nationalId = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProfessionType",
                schema: "HOSPTL",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    professionName = table.Column<string>(maxLength: 150, nullable: true),
                    professionDescription = table.Column<string>(maxLength: 550, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProfessionType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ACRActionType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrType = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRActionType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ACRAuthority",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empDesignationName = table.Column<string>(nullable: true),
                    CADesignationName = table.Column<string>(nullable: true),
                    CSADesignationName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRAuthority", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AcrEvaluationMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    evaluationMasterName = table.Column<string>(nullable: false),
                    evaluationMasterNameBn = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrEvaluationMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AcrFor",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrForName = table.Column<string>(maxLength: 150, nullable: true),
                    acrForNameBn = table.Column<string>(maxLength: 150, nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrFor", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AcrType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrTypeName = table.Column<string>(maxLength: 150, nullable: true),
                    acrTypeNameBn = table.Column<string>(maxLength: 150, nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActivityStatus",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    statusName = table.Column<string>(nullable: false),
                    statusNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApplicantVerification",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    MyProperty = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicantVerification", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApplicationExam",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    type = table.Column<string>(nullable: true),
                    totalMark = table.Column<string>(nullable: true),
                    passMark = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicationExam", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    approvalTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AttendenceApi",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    EmpName = table.Column<string>(nullable: true),
                    entryDate = table.Column<DateTime>(nullable: true),
                    LoginTime = table.Column<DateTime>(nullable: true),
                    LogoutTime = table.Column<DateTime>(nullable: true),
                    Latitudein = table.Column<string>(nullable: true),
                    Longitudein = table.Column<string>(nullable: true),
                    Latitudeout = table.Column<string>(nullable: true),
                    Longitudeout = table.Column<string>(nullable: true),
                    Reason = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttendenceApi", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AttendenceUpload",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCode = table.Column<string>(maxLength: 50, nullable: true),
                    entryDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttendenceUpload", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AtttachmentGroup",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    groupName = table.Column<string>(maxLength: 250, nullable: true),
                    groupNameBn = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AtttachmentGroup", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Award",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    awardName = table.Column<string>(nullable: false),
                    awardNameBn = table.Column<string>(nullable: true),
                    awardShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Award", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BookCategory",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bookCategoey = table.Column<string>(nullable: false),
                    bookCategoeyBn = table.Column<string>(nullable: true),
                    bookCategoryShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BookCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cadre",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    cadreName = table.Column<string>(nullable: false),
                    cadreNameBn = table.Column<string>(nullable: true),
                    cadreShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cadre", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ClientServeLost",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    year = table.Column<string>(nullable: true),
                    clientServe = table.Column<int>(nullable: true),
                    clientLost = table.Column<int>(nullable: true),
                    businessTarget = table.Column<string>(nullable: true),
                    businessGrowth = table.Column<string>(nullable: true),
                    profit = table.Column<string>(nullable: true),
                    dividend = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClientServeLost", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CourseTitle",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEN = table.Column<string>(nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CourseTitle", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CourseType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    typeNameEN = table.Column<string>(nullable: true),
                    typeNameBN = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CourseType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CustomRole",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    roleName = table.Column<string>(nullable: true),
                    roleNameBn = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomRole", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CvBlackList",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sscRoll = table.Column<string>(nullable: true),
                    sscReg = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    attatchment = table.Column<string>(nullable: true),
                    reason = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CvBlackList", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DisabilityType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DisabilityType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmpAttendance",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    punchCardNo = table.Column<string>(maxLength: 50, nullable: true),
                    workDate = table.Column<string>(maxLength: 20, nullable: true),
                    startTime = table.Column<string>(maxLength: 20, nullable: true),
                    endTime = table.Column<string>(maxLength: 20, nullable: true),
                    summaryId = table.Column<int>(nullable: true),
                    workingTime = table.Column<decimal>(type: "decimal(18, 2)", nullable: true),
                    latetime = table.Column<decimal>(type: "decimal(18, 2)", nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    attenUpdateBy = table.Column<string>(maxLength: 200, nullable: true),
                    attenUpdateAppBy = table.Column<string>(maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpAttendance", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmpAttendenceTemp",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    cardNo = table.Column<string>(nullable: true),
                    currentDateTime = table.Column<string>(nullable: true),
                    time = table.Column<string>(nullable: true),
                    date = table.Column<string>(nullable: true),
                    timeOut = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpAttendenceTemp", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmpExpertise",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEn = table.Column<string>(nullable: true),
                    nameBn = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpExpertise", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empType = table.Column<string>(nullable: false),
                    empTypeBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmploymentType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEN = table.Column<string>(nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmploymentType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmpManualAttendance",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    punchCardNo = table.Column<string>(maxLength: 50, nullable: true),
                    workDate = table.Column<string>(maxLength: 20, nullable: true),
                    startTime = table.Column<string>(maxLength: 20, nullable: true),
                    endTime = table.Column<string>(maxLength: 20, nullable: true),
                    summaryId = table.Column<int>(nullable: true),
                    workingTime = table.Column<decimal>(type: "decimal(18, 2)", nullable: true),
                    latetime = table.Column<decimal>(type: "decimal(18, 2)", nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    attenUpdateBy = table.Column<string>(maxLength: 200, nullable: true),
                    attenUpdateAppBy = table.Column<string>(maxLength: 200, nullable: true),
                    notes = table.Column<string>(nullable: true),
                    approveStatus = table.Column<int>(nullable: true),
                    location = table.Column<string>(nullable: true),
                    lat = table.Column<double>(nullable: false),
                    lon = table.Column<double>(nullable: false),
                    reasonforrejecting = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpManualAttendance", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EvaluationCommentsHead",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    commentsName = table.Column<string>(maxLength: 400, nullable: true),
                    commentsMark = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EvaluationCommentsHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EvaluationFectors",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    details = table.Column<string>(nullable: true),
                    maxValue = table.Column<string>(nullable: true),
                    minValue = table.Column<string>(nullable: true),
                    unit = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EvaluationFectors", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExtraCurricularType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExtraCurricularType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Holiday",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    weeklyHoliday = table.Column<DateTime>(nullable: true),
                    holidayName = table.Column<string>(nullable: true),
                    holiday = table.Column<DateTime>(nullable: true),
                    holidayNameBn = table.Column<string>(nullable: true),
                    year = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Holiday", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HRActivity",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    code = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRActivity", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HrBranchType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrBranchType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HrComputerSubject",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrComputerSubject", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HRDoner",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    contactNumber = table.Column<string>(nullable: true),
                    Address = table.Column<string>(nullable: true),
                    code = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRDoner", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HRFacility",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    facilityName = table.Column<string>(maxLength: 500, nullable: true),
                    facilityCode = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRFacility", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HrFormatMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    body = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrFormatMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HrItem",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    price = table.Column<decimal>(nullable: false),
                    supplier = table.Column<string>(nullable: true),
                    expireDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrItem", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HRManualAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRManualAttachment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HRPMSActivityType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRPMSActivityType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HRPMSOrganizationType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRPMSOrganizationType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HrProgram",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programName = table.Column<string>(maxLength: 250, nullable: true),
                    programNameBn = table.Column<string>(maxLength: 250, nullable: true),
                    shortName = table.Column<string>(maxLength: 150, nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrProgram", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HRProject",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    code = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRProject", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JobCircular",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    reference = table.Column<string>(nullable: true),
                    recruitmentType = table.Column<string>(nullable: true),
                    positionName = table.Column<string>(nullable: true),
                    project = table.Column<string>(nullable: true),
                    noOfPosition = table.Column<int>(nullable: false),
                    jobType = table.Column<string>(nullable: true),
                    location = table.Column<string>(maxLength: 40, nullable: true),
                    comments = table.Column<string>(nullable: true),
                    applicationDeadLine = table.Column<DateTime>(nullable: true),
                    lastDateOfWrittenExam = table.Column<DateTime>(nullable: true),
                    applicationFee = table.Column<string>(nullable: true),
                    educationalQualification = table.Column<string>(nullable: true),
                    mainSubject = table.Column<string>(nullable: true),
                    otherQualification = table.Column<string>(nullable: true),
                    leastExperience = table.Column<int>(nullable: false),
                    maxAge = table.Column<int>(nullable: false),
                    maxAgeQuota = table.Column<int>(nullable: false),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobCircular", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Language",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    languageName = table.Column<string>(nullable: false),
                    languageNameBn = table.Column<string>(nullable: true),
                    languageShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Language", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LeaveDay",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leaveDayName = table.Column<string>(maxLength: 200, nullable: true),
                    leaveDayNameBn = table.Column<string>(maxLength: 200, nullable: true),
                    description = table.Column<string>(maxLength: 500, nullable: true),
                    dayStartTime = table.Column<string>(maxLength: 5, nullable: true),
                    dayEndTime = table.Column<string>(maxLength: 5, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveDay", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LeaveType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEn = table.Column<string>(nullable: false),
                    nameBn = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LevelofEducation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true),
                    levelofeducationName = table.Column<string>(nullable: false),
                    levelofeducationNameBn = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LevelofEducation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LisenceType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    typeName = table.Column<string>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LisenceType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Membership",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    membershipName = table.Column<string>(nullable: false),
                    membershipNameBn = table.Column<string>(nullable: true),
                    membershipShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Membership", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MembershipOrganization",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organizationName = table.Column<string>(nullable: false),
                    organizationNameBn = table.Column<string>(nullable: true),
                    organizationType = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MembershipOrganization", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ModuleTrainingCategory",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    nameEN = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ModuleTrainingCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MovementTracking",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCode = table.Column<string>(maxLength: 50, nullable: true),
                    EmpName = table.Column<string>(maxLength: 250, nullable: true),
                    entryDate = table.Column<DateTime>(nullable: true),
                    LoginTime = table.Column<DateTime>(nullable: true),
                    LogoutTime = table.Column<DateTime>(nullable: true),
                    Latitude = table.Column<string>(maxLength: 100, nullable: true),
                    Longitude = table.Column<string>(maxLength: 100, nullable: true),
                    CompanyName = table.Column<string>(maxLength: 300, nullable: true),
                    Contact = table.Column<string>(maxLength: 300, nullable: true),
                    DesignationName = table.Column<string>(maxLength: 300, nullable: true),
                    Reason = table.Column<string>(nullable: true),
                    Status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovementTracking", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MunicipilityLocation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    locationName = table.Column<string>(nullable: false),
                    locationNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MunicipilityLocation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NaturalDigester",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NaturalDigester", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NaturalPunishment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NaturalPunishment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NomineeFund",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NomineeFund", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Occupation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    occupationName = table.Column<string>(nullable: false),
                    occupationNameBn = table.Column<string>(nullable: true),
                    occupationShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Occupation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Offense",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Offense", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Organization",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organizationName = table.Column<string>(nullable: false),
                    organizationNameBn = table.Column<string>(nullable: true),
                    organizationType = table.Column<string>(nullable: false),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Organization", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEN = table.Column<string>(nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OtherQualificationHead",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OtherQualificationHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OTSlotType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    slotName = table.Column<string>(nullable: true),
                    slotHour = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OTSlotType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OutsourcesCompany",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    termsandcondition = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OutsourcesCompany", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PhysicalProperty",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    physicalType = table.Column<string>(nullable: true),
                    physicalValue = table.Column<string>(nullable: true),
                    physicalUnit = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PhysicalProperty", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PIMSVisitor",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    subject = table.Column<string>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    nationality = table.Column<string>(nullable: true),
                    gander = table.Column<string>(nullable: true),
                    phone = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    organizationPhone = table.Column<string>(nullable: true),
                    organizationEmail = table.Column<string>(nullable: true),
                    organizationAddress = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    letterSendingDate = table.Column<DateTime>(nullable: true),
                    arrivalDate = table.Column<DateTime>(nullable: true),
                    deparchurDate = table.Column<DateTime>(nullable: true),
                    passportNumber = table.Column<string>(nullable: true),
                    imageUrl = table.Column<string>(nullable: true),
                    passportUrl = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PIMSVisitor", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Plan",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Plan", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PNS",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    code = table.Column<string>(nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PNS", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PostingType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEN = table.Column<string>(nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PostingType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QualificationHead",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualificationHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QuantitativeEvaluationHead",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    HeadName = table.Column<string>(maxLength: 400, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuantitativeEvaluationHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Relation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relationName = table.Column<string>(nullable: false),
                    relationNameBn = table.Column<string>(nullable: true),
                    relationShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Relation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Religion",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: false),
                    nameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Religion", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Result",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    resultName = table.Column<string>(nullable: false),
                    resultNameBn = table.Column<string>(nullable: true),
                    resultShortName = table.Column<string>(nullable: true),
                    resultMaxValue = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Result", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ServiceStatus",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    statusName = table.Column<string>(nullable: false),
                    statusNameBn = table.Column<string>(nullable: true),
                    statusShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ServiceStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ShiftGroupMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    shiftName = table.Column<string>(nullable: false),
                    shiftNameBn = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShiftGroupMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SourceOfFund",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEN = table.Column<string>(nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SourceOfFund", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Subject",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    subjectName = table.Column<string>(nullable: false),
                    subjectNameBn = table.Column<string>(nullable: true),
                    subjectShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Subject", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TempDay",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    daysInBetween = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TempDay", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TrainingCategory",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingCategoryName = table.Column<string>(nullable: false),
                    trainingCategoryNameBn = table.Column<string>(nullable: true),
                    trainingCategoryShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TrainingInstitute",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInstituteName = table.Column<string>(nullable: false),
                    trainingInstituteNameBn = table.Column<string>(nullable: true),
                    trainingInstituteShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingInstitute", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TrainingSubject",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingSubject", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TrainingTitlelog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingTitle = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingTitlelog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TravelPurpose",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    purposeName = table.Column<string>(nullable: false),
                    purposeNameBn = table.Column<string>(nullable: true),
                    purposeShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TravelPurpose", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TravelVehicleType",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TravelVehicleType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Vehicle",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleType = table.Column<string>(nullable: false),
                    vehicleTypeBn = table.Column<string>(nullable: true),
                    vehicleShortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vehicle", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VisualData",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCodeName = table.Column<string>(maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VisualData", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WagesEmpAttendance",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    punchCardNo = table.Column<string>(nullable: true),
                    workDate = table.Column<string>(maxLength: 20, nullable: true),
                    startTime = table.Column<string>(maxLength: 20, nullable: true),
                    endTime = table.Column<string>(maxLength: 20, nullable: true),
                    summaryId = table.Column<int>(nullable: true),
                    workingTime = table.Column<decimal>(type: "decimal(18, 2)", nullable: true),
                    latetime = table.Column<decimal>(type: "decimal(18, 2)", nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    attenUpdateBy = table.Column<string>(nullable: true),
                    attenUpdateAppBy = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesEmpAttendance", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Year",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    year = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Year", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MeetingActionInfo",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingActionInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MealType",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    mealTypeName = table.Column<string>(maxLength: 300, nullable: true),
                    activeStatus = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MealType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RoleType",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RoleType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalesMenuCategory",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    categoryName = table.Column<string>(maxLength: 300, nullable: true),
                    activeStatus = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesMenuCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AllSalarySheets",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    SBAccount = table.Column<string>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    employeeCode = table.Column<string>(nullable: true),
                    nameEnglish = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    empType = table.Column<string>(nullable: true),
                    periodName = table.Column<string>(nullable: true),
                    lockLabel = table.Column<string>(nullable: true),
                    branchUnitName = table.Column<string>(nullable: true),
                    projectName = table.Column<string>(nullable: true),
                    structureBasic = table.Column<decimal>(nullable: true),
                    joiningDatePresentWorkstation = table.Column<DateTime>(nullable: true),
                    walletNo = table.Column<string>(nullable: true),
                    walletPayable = table.Column<decimal>(nullable: true),
                    bankName = table.Column<string>(nullable: true),
                    bankAccountNo = table.Column<string>(nullable: true),
                    bankPayable = table.Column<decimal>(nullable: true),
                    cashPayable = table.Column<decimal>(nullable: true),
                    Basic = table.Column<decimal>(nullable: true),
                    HouseRent = table.Column<decimal>(nullable: true),
                    PensionFundBank = table.Column<decimal>(nullable: true),
                    Sumptuary = table.Column<decimal>(nullable: true),
                    Medical = table.Column<decimal>(nullable: true),
                    Conveyance = table.Column<decimal>(nullable: true),
                    Dearness = table.Column<decimal>(nullable: true),
                    OtherAllowance = table.Column<decimal>(nullable: true),
                    HouseHold = table.Column<decimal>(nullable: true),
                    MobileAllowance = table.Column<decimal>(nullable: true),
                    Cook = table.Column<decimal>(nullable: true),
                    Education = table.Column<decimal>(nullable: true),
                    Entertainment = table.Column<decimal>(nullable: true),
                    ArrearAddition = table.Column<decimal>(nullable: true),
                    Charge = table.Column<decimal>(nullable: true),
                    Misc = table.Column<decimal>(nullable: true),
                    PFSubscription = table.Column<decimal>(nullable: true),
                    PfBankCont = table.Column<decimal>(nullable: true),
                    PFAdvance = table.Column<decimal>(nullable: true),
                    HouseBuilding = table.Column<decimal>(nullable: true),
                    ComputerLoan = table.Column<decimal>(nullable: true),
                    GratuityFundBank = table.Column<decimal>(nullable: true),
                    GratuityFundDed = table.Column<decimal>(nullable: true),
                    WelfareFund = table.Column<decimal>(nullable: true),
                    PersonalPay = table.Column<decimal>(nullable: true),
                    MotorCycle = table.Column<decimal>(nullable: true),
                    GroupInsurance = table.Column<decimal>(nullable: true),
                    IncomeTax = table.Column<decimal>(nullable: true),
                    ArrearDeduction = table.Column<decimal>(nullable: true),
                    UnionSubscription = table.Column<decimal>(nullable: true),
                    Benevolent = table.Column<decimal>(nullable: true),
                    BusFare = table.Column<decimal>(nullable: true),
                    OtherDed = table.Column<decimal>(nullable: true),
                    NewsPaper = table.Column<decimal>(nullable: true),
                    RevenueStamp = table.Column<decimal>(nullable: true),
                    SalaryAdjustment = table.Column<decimal>(nullable: true),
                    Advance = table.Column<decimal>(nullable: true),
                    FestivalBonus = table.Column<decimal>(nullable: true),
                    PerformanceBonus = table.Column<decimal>(nullable: true),
                    OtherAddition = table.Column<decimal>(nullable: true),
                    PFEmployer = table.Column<decimal>(nullable: true),
                    DailyAllowance = table.Column<decimal>(nullable: true),
                    MobileBillAllowance = table.Column<decimal>(nullable: true),
                    InternetAllowance = table.Column<decimal>(nullable: true),
                    LeaveEncashment = table.Column<decimal>(nullable: true),
                    OverTime = table.Column<decimal>(nullable: true),
                    UpKeepAllowance = table.Column<decimal>(nullable: true),
                    UtilityAllowance = table.Column<decimal>(nullable: true),
                    Annuity = table.Column<decimal>(nullable: true),
                    Wages = table.Column<decimal>(nullable: true),
                    hardshipAllowance = table.Column<decimal>(nullable: true),
                    PFOwn = table.Column<decimal>(nullable: true),
                    ExceedCellBill = table.Column<decimal>(nullable: true),
                    InstallmentDeduction = table.Column<decimal>(nullable: true),
                    AdvanceDeduction = table.Column<decimal>(nullable: true),
                    ExcessFuelBill = table.Column<decimal>(nullable: true),
                    FamilyPackage = table.Column<decimal>(nullable: true),
                    AbsentDeduction = table.Column<decimal>(nullable: true),
                    MealCharge = table.Column<decimal>(nullable: true),
                    OtherDeduction = table.Column<decimal>(nullable: true),
                    HouseLoan = table.Column<decimal>(nullable: true),
                    VehicleTax = table.Column<decimal>(nullable: true),
                    LastYearTaxAdjustment = table.Column<decimal>(nullable: true),
                    ThisYearAdjustment = table.Column<decimal>(nullable: true),
                    TransportDeduction = table.Column<decimal>(nullable: true),
                    DPSDeduction = table.Column<decimal>(nullable: true),
                    Remarks = table.Column<string>(nullable: true),
                    proposedAmount = table.Column<decimal>(nullable: true),
                    PFOC = table.Column<decimal>(nullable: true),
                    GROSSFour = table.Column<decimal>(nullable: true),
                    GROSS = table.Column<decimal>(nullable: true),
                    TOTALPAIDBYBANK = table.Column<decimal>(nullable: true),
                    GROSSWPF = table.Column<decimal>(nullable: true),
                    TOTALALLOWANCE = table.Column<decimal>(nullable: true),
                    TOTALDEDUCT = table.Column<decimal>(nullable: true),
                    NET = table.Column<decimal>(nullable: true),
                    deptName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AllSalarySheets", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BonousCategory",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bonousCategoryName = table.Column<string>(maxLength: 50, nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BonousCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BonusType",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bonusTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BonusType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FdrInvestment",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    Ftno = table.Column<string>(nullable: true),
                    FromBank = table.Column<string>(nullable: true),
                    FromBranch = table.Column<string>(nullable: true),
                    AccountNumber = table.Column<string>(nullable: true),
                    ToBank = table.Column<string>(nullable: true),
                    ToBranch = table.Column<string>(nullable: true),
                    ChequeNo = table.Column<string>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    Rate = table.Column<decimal>(nullable: true),
                    OpenDate = table.Column<DateTime>(nullable: true),
                    MaturityDate = table.Column<DateTime>(nullable: true),
                    Tenure = table.Column<int>(nullable: true),
                    Interest = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FdrInvestment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RebateSlabType",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    slabTypeName = table.Column<string>(nullable: true),
                    minValue = table.Column<decimal>(nullable: true),
                    maxValue = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RebateSlabType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ReportFormat",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    reportTypeName = table.Column<string>(nullable: true),
                    reportFormat = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportFormat", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalaryCalulationType",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryCalulationTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryCalulationType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalaryGrade",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    gradeName = table.Column<string>(maxLength: 100, nullable: true),
                    basicAmount = table.Column<decimal>(nullable: true),
                    payScale = table.Column<string>(maxLength: 100, nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    type = table.Column<string>(maxLength: 100, nullable: true),
                    currentBasic = table.Column<decimal>(nullable: true),
                    payscaleYear = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryGrade", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalaryHead",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryHeadName = table.Column<string>(maxLength: 100, nullable: true),
                    salaryHeadCode = table.Column<string>(maxLength: 100, nullable: true),
                    salaryHeadType = table.Column<string>(maxLength: 100, nullable: true),
                    sortOrder = table.Column<int>(nullable: true),
                    isIncomeTax = table.Column<string>(maxLength: 100, nullable: true),
                    isInvestments = table.Column<string>(maxLength: 100, nullable: true),
                    isAdvance = table.Column<string>(maxLength: 3, nullable: true),
                    isArrear = table.Column<string>(maxLength: 3, nullable: true),
                    isBonus = table.Column<string>(maxLength: 3, nullable: true),
                    isMonthlyAllowance = table.Column<string>(maxLength: 3, nullable: true),
                    headShortName = table.Column<string>(maxLength: 50, nullable: true),
                    isLoan = table.Column<string>(maxLength: 3, nullable: true),
                    accountNo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalaryType",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SalaryYear",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    yearName = table.Column<string>(maxLength: 100, nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    yearStatus = table.Column<string>(nullable: true),
                    lockDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryYear", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SlabType",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    slabTypeName = table.Column<string>(maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SlabType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TaxYear",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taxYearName = table.Column<string>(maxLength: 100, nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    taxLimit = table.Column<decimal>(nullable: true),
                    lockLabel = table.Column<int>(nullable: true),
                    allowablePerquisite = table.Column<decimal>(nullable: true),
                    assessmentYear = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaxYear", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UploadExcelLog",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fileName = table.Column<string>(nullable: true),
                    filePath = table.Column<string>(nullable: true),
                    uploadDate = table.Column<DateTime>(nullable: true),
                    totalData = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UploadExcelLog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WalletType",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    walletTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WalletType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PfInterest",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    year = table.Column<string>(nullable: true),
                    investmentAmount = table.Column<decimal>(nullable: true),
                    interestRate = table.Column<decimal>(nullable: true),
                    total = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PfInterest", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PFInvestment",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    investmentName = table.Column<string>(maxLength: 150, nullable: true),
                    investmentAccount = table.Column<int>(nullable: true),
                    interestRate = table.Column<int>(nullable: true),
                    investmentAmount = table.Column<decimal>(nullable: true),
                    interestPeriod = table.Column<int>(nullable: true),
                    modeOfPayment = table.Column<int>(nullable: true),
                    transactionDate = table.Column<DateTime>(nullable: true),
                    investmentDate = table.Column<DateTime>(nullable: true),
                    maturityDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFInvestment", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PFVoucherType",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEn = table.Column<string>(nullable: true),
                    type = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFVoucherType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BenificiaryActiveType",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenificiaryActiveType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BenificiaryType",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    typeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BenificiaryType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DateRange",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DateRange", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Gender",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Gender", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "IdType",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    typeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IdType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PeopleType",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PeopleType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProgramImpact",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramImpact", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProgramMainCategory",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramMainCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProgramStatus",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProgramVideo",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    title = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramVideo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProgramYear",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramYear", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CardType",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    CardTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CardType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DiscountRate",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DiscountRate", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MobileBankingType",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    MobileBankingTypeName = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileBankingType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OfferMaster",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    offerName = table.Column<string>(maxLength: 250, nullable: true),
                    barCode = table.Column<string>(maxLength: 100, nullable: true),
                    barCodeImage = table.Column<byte[]>(nullable: true),
                    price = table.Column<decimal>(nullable: true),
                    discountPersent = table.Column<decimal>(nullable: true),
                    VAT = table.Column<decimal>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OfferMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PosCustomer",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(maxLength: 200, nullable: true),
                    phone = table.Column<string>(maxLength: 50, nullable: true),
                    address = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosCustomer", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "StoreType",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    storeTypeName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OverheadCosts",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    accountCode = table.Column<string>(maxLength: 100, nullable: true),
                    accountName = table.Column<string>(maxLength: 300, nullable: true),
                    haveLedgerRelation = table.Column<int>(nullable: true),
                    statusId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OverheadCosts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProductionDocumentAttachments",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    actionType = table.Column<string>(maxLength: 250, nullable: true),
                    actionTypeId = table.Column<int>(nullable: true),
                    documentType = table.Column<string>(maxLength: 250, nullable: true),
                    fileName = table.Column<string>(maxLength: 350, nullable: true),
                    filePath = table.Column<string>(maxLength: 350, nullable: true),
                    fileType = table.Column<string>(maxLength: 250, nullable: true),
                    subject = table.Column<string>(maxLength: 350, nullable: true),
                    description = table.Column<string>(maxLength: 450, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionDocumentAttachments", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProductionTypes",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productionTypeName = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExamType",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    examTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JobSource",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobSourceName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobSource", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AssignType",
                schema: "REMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assignTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssignType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ClaimStatusInfo",
                schema: "REMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    statusName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClaimStatusInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TermsAndConditions",
                schema: "Rental",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    termName = table.Column<string>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TermsAndConditions", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApproverType",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    approverTypeName = table.Column<string>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApproverType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AutoGeneratedNumber",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    Name = table.Column<string>(nullable: true),
                    isEmpCode = table.Column<int>(nullable: false),
                    isDate = table.Column<int>(nullable: false),
                    digit = table.Column<int>(nullable: false),
                    alphaNumeric = table.Column<string>(nullable: true),
                    numericStartPoint = table.Column<string>(nullable: true),
                    speratedSign = table.Column<string>(nullable: true),
                    format = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AutoGeneratedNumber", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Building",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEn = table.Column<string>(nullable: true),
                    nameBn = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Building", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ChangeOfDoa",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    userId = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    isback = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChangeOfDoa", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CSItemCategory",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemCatName = table.Column<string>(maxLength: 50, nullable: true),
                    itemCatNameBN = table.Column<string>(maxLength: 50, nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CSItemCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Currency",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    currencyName = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    currencyShortName = table.Column<string>(type: "nvarchar(20)", nullable: true),
                    currencySign = table.Column<string>(type: "nvarchar(50)", nullable: true),
                    currencyRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Currency", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryLocation",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    locationName = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    address = table.Column<string>(type: "nvarchar(300)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryLocation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryMode",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    deliveryModeName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryMode", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DisbarseMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    disbarseNo = table.Column<string>(nullable: true),
                    disbarseDate = table.Column<DateTime>(nullable: true),
                    statusId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    userId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DisbarseMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ItemCategory",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    parentId = table.Column<int>(nullable: true),
                    isParent = table.Column<int>(nullable: true),
                    categoryName = table.Column<string>(maxLength: 250, nullable: true),
                    categoryDescription = table.Column<string>(nullable: true),
                    categoryPrefix = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemCategory_ItemCategory_parentId",
                        column: x => x.parentId,
                        principalSchema: "SCM",
                        principalTable: "ItemCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ItemReqMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    reqNo = table.Column<string>(nullable: true),
                    reqDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemReqMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ItemType",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemTypeName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JobAssignType",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobAssignName = table.Column<string>(maxLength: 150, nullable: true),
                    jobAssignNameBN = table.Column<string>(maxLength: 250, nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobAssignType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "JustificationType",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    justificationTypeName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    defaultValue = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JustificationType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MailLog",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sender = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    recipient = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    mailType = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    subject = table.Column<string>(type: "nvarchar(300)", nullable: true),
                    sendTime = table.Column<DateTime>(nullable: true),
                    refNo = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    notSendReason = table.Column<string>(type: "nvarchar(300)", nullable: true),
                    isSuccess = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MailLog", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ManpowerTypes",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    manpowerTypeName = table.Column<string>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ManpowerTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MatrixType",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    matrixTypeName = table.Column<string>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MatrixType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationTypes",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organizationTypeName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PaymentMode",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    paymentModeName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentMode", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PaymentTerms",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    paymentTermsCode = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    paymentTermsName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentTerms", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProcurementType",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    procurementTypeName = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcurementType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProcurementValue",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    procurementValueName = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcurementValue", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RFQMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rfqNo = table.Column<string>(nullable: true),
                    rfqDate = table.Column<DateTime>(nullable: true),
                    rfqSubject = table.Column<string>(nullable: true),
                    termscondition = table.Column<string>(nullable: true),
                    isclose = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RFQMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "StatusInfo",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    StatusName = table.Column<string>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StatusInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "StoreDepartmentTypes",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    deptName = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    deptNameBn = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreDepartmentTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SupplierTypes",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    supplierTypeName = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SupplierTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TeamMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    teamCode = table.Column<string>(maxLength: 50, nullable: true),
                    teamName = table.Column<string>(maxLength: 250, nullable: true),
                    leaderId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeamMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Unit",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    unitName = table.Column<string>(maxLength: 250, nullable: true),
                    description = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Unit", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WorkProgressActivityTypes",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityName = table.Column<string>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkProgressActivityTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProblemMaster",
                schema: "SEBA",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    tokenNo = table.Column<string>(maxLength: 20, nullable: true),
                    priority = table.Column<string>(maxLength: 10, nullable: true),
                    targetDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProblemMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TaskProject",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    shortDescription = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    satrtDate = table.Column<DateTime>(nullable: true),
                    approxEndDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskProject", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CodeOfContact",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CodeOfContact", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NDAFile",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fileNmae = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    filePath = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    fileType = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NDAFile", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RequiredDocuments",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequiredDocuments", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AgreementCostHead",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementHeadName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementCostHead", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Aspiration",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    aspirationName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Aspiration", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BlockType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    blockTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BlockType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BrakeSystem",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    brakeSystemName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BrakeSystem", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "CamType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    camTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CamType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DriveType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    driveTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriveType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FuelInduction",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelInductionName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelInduction", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FuelStation",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelStationName = table.Column<string>(maxLength: 350, nullable: true),
                    phoneNumber = table.Column<string>(maxLength: 20, nullable: true),
                    webSite = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelStation", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FuelStationInfo",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelStationName = table.Column<string>(maxLength: 150, nullable: true),
                    ownerName = table.Column<string>(maxLength: 150, nullable: true),
                    managerName = table.Column<string>(maxLength: 150, nullable: true),
                    tradelicenseNo = table.Column<string>(maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelStationInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FuelType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true),
                    unit = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "InspectionCheckLIstCategory",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    checkListCategoryName = table.Column<string>(nullable: true),
                    order = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InspectionCheckLIstCategory", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LabelType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    labelTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LabelType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LimitAmountType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    limitAmountTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LimitAmountType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LimitPeriodType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    limitPeriodTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LimitPeriodType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "MeterType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    meterTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeterType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RenewalType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    renewalTypeName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RenewalType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ReportField",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fieldValue = table.Column<string>(nullable: true),
                    originName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportField", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ServiceTask",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    serviceTaskName = table.Column<string>(maxLength: 350, nullable: true),
                    description = table.Column<string>(nullable: true),
                    subTaskName = table.Column<string>(maxLength: 350, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ServiceTask", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SORMaster",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sorNumber = table.Column<string>(nullable: true),
                    sorTitle = table.Column<string>(nullable: true),
                    duration = table.Column<string>(nullable: true),
                    numberOfItems = table.Column<int>(nullable: true),
                    fromDate = table.Column<DateTime>(nullable: false),
                    toDate = table.Column<DateTime>(nullable: false),
                    grandTotal = table.Column<decimal>(nullable: true),
                    statusId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SORMaster", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SourceType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sourceNameBN = table.Column<string>(nullable: true),
                    sourceName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SourceType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SpareParts",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    brandName = table.Column<string>(nullable: true),
                    modelName = table.Column<string>(nullable: true),
                    partsName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpareParts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TransmissionType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    transmissionTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransmissionType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleBodySubType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleBodySubTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleBodySubType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleBodyType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleBodyTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleBodyType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleGroup",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleGroupName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleGroup", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleManufacture",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleManufactureName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleManufacture", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleModel",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleModelName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleModel", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleOwnership",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleOwnershipName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleOwnership", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleStatus",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleStatusName = table.Column<string>(maxLength: 250, nullable: true),
                    colorCode = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VehicleType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VMSResourceType",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empType = table.Column<string>(nullable: true),
                    empTypeBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VMSResourceType", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "VMSSupplier",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    supplierName = table.Column<string>(maxLength: 250, nullable: true),
                    supplierCode = table.Column<string>(maxLength: 20, nullable: true),
                    phoneNo = table.Column<string>(maxLength: 20, nullable: true),
                    website = table.Column<string>(maxLength: 100, nullable: true),
                    tinNo = table.Column<string>(maxLength: 20, nullable: true),
                    vatRegNo = table.Column<string>(maxLength: 20, nullable: true),
                    isFuel = table.Column<string>(maxLength: 20, nullable: true),
                    isService = table.Column<string>(maxLength: 20, nullable: true),
                    isParts = table.Column<string>(maxLength: 20, nullable: true),
                    isVehicle = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VMSSupplier", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ActionInfo",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActionInfo", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Urlgeneration",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Urlgeneration", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    RoleId = table.Column<string>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Divisions",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    divisionCode = table.Column<string>(nullable: false),
                    divisionName = table.Column<string>(nullable: false),
                    divisionNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true),
                    countryId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Divisions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Divisions_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Comments",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    actionType = table.Column<string>(maxLength: 250, nullable: true),
                    actionTypeId = table.Column<int>(nullable: true),
                    title = table.Column<string>(maxLength: 250, nullable: true),
                    comment = table.Column<string>(nullable: true),
                    moduleId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comments_ERPModules_moduleId",
                        column: x => x.moduleId,
                        principalTable: "ERPModules",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentPhotoAttachments",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    actionType = table.Column<string>(maxLength: 250, nullable: true),
                    actionTypeId = table.Column<int>(nullable: true),
                    documentType = table.Column<string>(maxLength: 250, nullable: true),
                    fileName = table.Column<string>(maxLength: 350, nullable: true),
                    filePath = table.Column<string>(maxLength: 350, nullable: true),
                    fileType = table.Column<string>(maxLength: 250, nullable: true),
                    subject = table.Column<string>(maxLength: 350, nullable: true),
                    description = table.Column<string>(maxLength: 450, nullable: true),
                    moduleId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentPhotoAttachments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentPhotoAttachments_ERPModules_moduleId",
                        column: x => x.moduleId,
                        principalTable: "ERPModules",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ModuleAccessPages",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    eRPModuleId = table.Column<int>(nullable: true),
                    applicationRoleId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ModuleAccessPages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ModuleAccessPages_AspNetRoles_applicationRoleId",
                        column: x => x.applicationRoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ModuleAccessPages_ERPModules_eRPModuleId",
                        column: x => x.eRPModuleId,
                        principalTable: "ERPModules",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Navbars",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameOptionBangla = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    nameOption = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    controller = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    action = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    area = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    imageClass = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    activeLi = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    status = table.Column<bool>(nullable: false),
                    parentID = table.Column<int>(nullable: false),
                    isParent = table.Column<int>(nullable: true),
                    displayOrder = table.Column<int>(nullable: true),
                    moduleId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Navbars", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Navbars_ERPModules_moduleId",
                        column: x => x.moduleId,
                        principalTable: "ERPModules",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "hallRentalApplicationInfos",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    hallInfoId = table.Column<int>(nullable: true),
                    hallRentalShiftId = table.Column<int>(nullable: true),
                    hallRent = table.Column<decimal>(nullable: true),
                    rentalDate = table.Column<DateTime>(nullable: true),
                    rentalTime = table.Column<string>(nullable: true),
                    applicantName = table.Column<string>(nullable: true),
                    applicantOrganization = table.Column<string>(nullable: true),
                    applicantAddress = table.Column<string>(nullable: true),
                    mobileNo = table.Column<string>(nullable: true),
                    applicantSignUrl = table.Column<string>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isPaid = table.Column<int>(nullable: true),
                    chiefGuest = table.Column<string>(nullable: true),
                    specialGuest = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_hallRentalApplicationInfos", x => x.Id);
                    table.ForeignKey(
                        name: "FK_hallRentalApplicationInfos_hallInfos_hallInfoId",
                        column: x => x.hallInfoId,
                        principalTable: "hallInfos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_hallRentalApplicationInfos_hallRentalShifts_hallRentalShiftId",
                        column: x => x.hallRentalShiftId,
                        principalTable: "hallRentalShifts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserTypes",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    userTypeNameBn = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    userTypeName = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    groupId = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserTypes_UserTypeGroups_groupId",
                        column: x => x.groupId,
                        principalTable: "UserTypeGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AccountGroup",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    natureId = table.Column<int>(nullable: true),
                    groupCode = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    groupName = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    groupNameBN = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    VGrpTypeCode = table.Column<int>(nullable: true),
                    isCashBank = table.Column<string>(maxLength: 3, nullable: true),
                    parentGroupId = table.Column<int>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    branchUnitId = table.Column<int>(nullable: true),
                    SortOrder = table.Column<int>(nullable: true),
                    AccType = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AccountGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AccountGroup_GroupNature_natureId",
                        column: x => x.natureId,
                        principalSchema: "ACCOUNT",
                        principalTable: "GroupNature",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AccountGroup_AccountGroup_parentGroupId",
                        column: x => x.parentGroupId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AccountGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DeleteVoucherMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    voucherNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    refNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    voucherDate = table.Column<DateTime>(type: "Date", nullable: true),
                    voucherTypeId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    voucherAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    isPosted = table.Column<int>(nullable: true),
                    fiscalYearId = table.Column<int>(nullable: true),
                    taxYearId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    fundSourceId = table.Column<int>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true),
                    deletedBy = table.Column<string>(maxLength: 100, nullable: true),
                    deletedAt = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeleteVoucherMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeleteVoucherMaster_VoucherType_voucherTypeId",
                        column: x => x.voucherTypeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GalleryContent",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    galleryTitleId = table.Column<int>(nullable: false),
                    caption = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GalleryContent", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GalleryContent_GalleryTitle_galleryTitleId",
                        column: x => x.galleryTitleId,
                        principalSchema: "Club",
                        principalTable: "GalleryTitle",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RlnNoticeAuthor",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    noticeInfoId = table.Column<int>(nullable: true),
                    noticeAuthorId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RlnNoticeAuthor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RlnNoticeAuthor_NoticeAuthor_noticeAuthorId",
                        column: x => x.noticeAuthorId,
                        principalSchema: "Club",
                        principalTable: "NoticeAuthor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RlnNoticeAuthor_NoticeInfo_noticeInfoId",
                        column: x => x.noticeInfoId,
                        principalSchema: "Club",
                        principalTable: "NoticeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EventInformation",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    paymentHeadId = table.Column<int>(nullable: true),
                    eventCategoryId = table.Column<int>(nullable: true),
                    title = table.Column<string>(nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    venue = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    deadline = table.Column<DateTime>(nullable: true),
                    participantLimit = table.Column<int>(nullable: true),
                    participantCategory = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true),
                    startTime = table.Column<string>(nullable: true),
                    endTime = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EventInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EventInformation_EventCategory_eventCategoryId",
                        column: x => x.eventCategoryId,
                        principalSchema: "Club",
                        principalTable: "EventCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EventInformation_PaymentHead_paymentHeadId",
                        column: x => x.paymentHeadId,
                        principalSchema: "Club",
                        principalTable: "PaymentHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ColdActivityMasters",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    coldActivityMastersId = table.Column<int>(nullable: true),
                    activityStatusId = table.Column<int>(nullable: true),
                    activityCategoryId = table.Column<int>(nullable: false),
                    activitySessionId = table.Column<int>(nullable: true),
                    activityTypeId = table.Column<int>(nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    activitiesDate = table.Column<DateTime>(nullable: true),
                    ownerType = table.Column<string>(nullable: true),
                    taskOwner = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    priority = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    reminderDate = table.Column<DateTime>(nullable: true),
                    reminderTime = table.Column<DateTime>(nullable: true),
                    isreminder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ColdActivityMasters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ColdActivityMasters_ActivityCategory_activityCategoryId",
                        column: x => x.activityCategoryId,
                        principalSchema: "CRM",
                        principalTable: "ActivityCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ColdActivityMasters_ActivitySession_activitySessionId",
                        column: x => x.activitySessionId,
                        principalSchema: "CRM",
                        principalTable: "ActivitySession",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ColdActivityMasters_ActivityStatus_activityStatusId",
                        column: x => x.activityStatusId,
                        principalSchema: "CRM",
                        principalTable: "ActivityStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ColdActivityMasters_ActivityType_activityTypeId",
                        column: x => x.activityTypeId,
                        principalSchema: "CRM",
                        principalTable: "ActivityType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ColdActivityMasters_ColdActivityMasters_coldActivityMastersId",
                        column: x => x.coldActivityMastersId,
                        principalSchema: "CRM",
                        principalTable: "ColdActivityMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CRMTeamMember",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    cRMTeamMasterId = table.Column<int>(nullable: true),
                    memberId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRMTeamMember", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CRMTeamMember_CRMTeamMaster _cRMTeamMasterId",
                        column: x => x.cRMTeamMasterId,
                        principalSchema: "CRM",
                        principalTable: "CRMTeamMaster ",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Bank",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bankName = table.Column<string>(maxLength: 250, nullable: true),
                    fiTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Bank", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Bank_FIType_fiTypeId",
                        column: x => x.fiTypeId,
                        principalSchema: "CRM",
                        principalTable: "FIType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ArchiveShelf",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    archiveShelfName = table.Column<string>(maxLength: 350, nullable: true),
                    initialCharactarOfFileName = table.Column<string>(maxLength: 10, nullable: true),
                    archiveFloorId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ArchiveShelf", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ArchiveShelf_ArchiveFloor_archiveFloorId",
                        column: x => x.archiveFloorId,
                        principalSchema: "CRO",
                        principalTable: "ArchiveFloor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RatingValue",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ratingTypeId = table.Column<int>(nullable: true),
                    ratingCategoryId = table.Column<int>(nullable: true),
                    ratingValues = table.Column<string>(maxLength: 350, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RatingValue", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RatingValue_RatingCategory_ratingCategoryId",
                        column: x => x.ratingCategoryId,
                        principalSchema: "CRM",
                        principalTable: "RatingCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RatingValue_RatingType_ratingTypeId",
                        column: x => x.ratingTypeId,
                        principalSchema: "CRO",
                        principalTable: "RatingType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PackageMaster",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    packageDate = table.Column<DateTime>(nullable: true),
                    packageNo = table.Column<string>(nullable: true),
                    packageName = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    distributorTypeId = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PackageMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PackageMaster_DistributorType_distributorTypeId",
                        column: x => x.distributorTypeId,
                        principalSchema: "Distribution",
                        principalTable: "DistributorType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Area",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    areaCode = table.Column<string>(nullable: false),
                    areaName = table.Column<string>(nullable: false),
                    areaLocation = table.Column<string>(nullable: true),
                    areaId = table.Column<int>(nullable: true),
                    salesLevelId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Area", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Area_Area_areaId",
                        column: x => x.areaId,
                        principalSchema: "CRM",
                        principalTable: "Area",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Area_SalesLevel_salesLevelId",
                        column: x => x.salesLevelId,
                        principalSchema: "Distribution",
                        principalTable: "SalesLevel",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FieldSettings",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fieldTypeId = table.Column<int>(nullable: true),
                    documentCategoryId = table.Column<int>(nullable: true),
                    fieldName = table.Column<string>(maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FieldSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FieldSettings_DocumentCategory_documentCategoryId",
                        column: x => x.documentCategoryId,
                        principalSchema: "Doc",
                        principalTable: "DocumentCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FieldSettings_FieldType_fieldTypeId",
                        column: x => x.fieldTypeId,
                        principalSchema: "Doc",
                        principalTable: "FieldType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DepriciationPeriod",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    PeriodName = table.Column<string>(nullable: true),
                    MonthName = table.Column<string>(nullable: true),
                    YearID = table.Column<int>(nullable: true),
                    DaysWorking = table.Column<int>(nullable: true),
                    SDate = table.Column<DateTime>(nullable: false),
                    EDate = table.Column<DateTime>(nullable: false),
                    islock = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DepriciationPeriod", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DepriciationPeriod_AssetYear_YearID",
                        column: x => x.YearID,
                        principalSchema: "FAMS",
                        principalTable: "AssetYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrEvaluationDetail",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrEvaluationMasterId = table.Column<int>(nullable: false),
                    evaluationDetailName = table.Column<string>(nullable: false),
                    evaluationDetailNameBn = table.Column<string>(nullable: false),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrEvaluationDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrEvaluationDetail_AcrEvaluationMaster_acrEvaluationMasterId",
                        column: x => x.acrEvaluationMasterId,
                        principalSchema: "HR",
                        principalTable: "AcrEvaluationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AcrEvaluationName",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrForId = table.Column<int>(nullable: true),
                    acrTypeId = table.Column<int>(nullable: true),
                    evaluationName = table.Column<string>(maxLength: 150, nullable: true),
                    evaluationNameBn = table.Column<string>(maxLength: 150, nullable: true),
                    description = table.Column<string>(maxLength: 950, nullable: true),
                    serialNo = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrEvaluationName", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrEvaluationName_AcrFor_acrForId",
                        column: x => x.acrForId,
                        principalSchema: "HR",
                        principalTable: "AcrFor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AcrEvaluationName_AcrType_acrTypeId",
                        column: x => x.acrTypeId,
                        principalSchema: "HR",
                        principalTable: "AcrType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AtttachmentCategory",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    atttachmentGroupId = table.Column<int>(nullable: true),
                    categoryName = table.Column<string>(nullable: false),
                    categoryNameBn = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AtttachmentCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AtttachmentCategory_AtttachmentGroup_atttachmentGroupId",
                        column: x => x.atttachmentGroupId,
                        principalSchema: "HR",
                        principalTable: "AtttachmentGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BookEntry",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bookCategoryId = table.Column<int>(nullable: true),
                    bookId = table.Column<string>(nullable: false),
                    workStation = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    bookName = table.Column<string>(maxLength: 250, nullable: true),
                    description = table.Column<string>(nullable: true),
                    writterName = table.Column<string>(maxLength: 250, nullable: true),
                    sbnNumber = table.Column<string>(maxLength: 100, nullable: true),
                    publisher = table.Column<string>(maxLength: 250, nullable: true),
                    price = table.Column<string>(maxLength: 100, nullable: true),
                    publishDate = table.Column<string>(nullable: true),
                    almiraNo = table.Column<string>(nullable: true),
                    selfNo = table.Column<string>(nullable: true),
                    quantity = table.Column<string>(nullable: true),
                    editionNo = table.Column<string>(nullable: true),
                    satus = table.Column<string>(nullable: true),
                    remark = table.Column<string>(nullable: true),
                    orgType = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BookEntry", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BookEntry_BookCategory_bookCategoryId",
                        column: x => x.bookCategoryId,
                        principalSchema: "HR",
                        principalTable: "BookCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Designation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    designationCode = table.Column<string>(nullable: false),
                    designationName = table.Column<string>(nullable: false),
                    designationNameBN = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true),
                    designationType = table.Column<string>(nullable: true),
                    customRoleId = table.Column<int>(nullable: true),
                    summaryRole = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Designation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Designation_CustomRole_customRoleId",
                        column: x => x.customRoleId,
                        principalSchema: "HR",
                        principalTable: "CustomRole",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ActivityName",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityTypeId = table.Column<int>(nullable: false),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityName", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivityName_HRPMSActivityType_activityTypeId",
                        column: x => x.activityTypeId,
                        principalSchema: "HR",
                        principalTable: "HRPMSActivityType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Degree",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    degreeName = table.Column<string>(nullable: false),
                    degreeNameBn = table.Column<string>(nullable: true),
                    degreeShortName = table.Column<string>(nullable: true),
                    levelofeducationId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Degree", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Degree_LevelofEducation_levelofeducationId",
                        column: x => x.levelofeducationId,
                        principalSchema: "HR",
                        principalTable: "LevelofEducation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Lisence",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    lisenceTypeId = table.Column<int>(nullable: true),
                    lisenceNo = table.Column<string>(nullable: true),
                    issueDate = table.Column<DateTime>(nullable: true),
                    expDate = table.Column<DateTime>(nullable: true),
                    attatchment = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Lisence", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Lisence_LisenceType_lisenceTypeId",
                        column: x => x.lisenceTypeId,
                        principalSchema: "HR",
                        principalTable: "LisenceType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrganoOrganization",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organoOrganizationId = table.Column<int>(nullable: true),
                    organizationTypeId = table.Column<int>(nullable: true),
                    nameEN = table.Column<string>(nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganoOrganization", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrganoOrganization_OrganizationType_organizationTypeId",
                        column: x => x.organizationTypeId,
                        principalSchema: "HR",
                        principalTable: "OrganizationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganoOrganization_OrganoOrganization_organoOrganizationId",
                        column: x => x.organoOrganizationId,
                        principalSchema: "HR",
                        principalTable: "OrganoOrganization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ACRIndicator",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    headId = table.Column<int>(nullable: true),
                    indicatorName = table.Column<string>(maxLength: 200, nullable: true),
                    indicatorNameBn = table.Column<string>(maxLength: 200, nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRIndicator", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACRIndicator_QuantitativeEvaluationHead_headId",
                        column: x => x.headId,
                        principalSchema: "HR",
                        principalTable: "QuantitativeEvaluationHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberInfo",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeCode = table.Column<string>(maxLength: 50, nullable: false),
                    nationalID = table.Column<string>(maxLength: 100, nullable: true),
                    birthIdentificationNo = table.Column<string>(maxLength: 100, nullable: true),
                    govtID = table.Column<string>(maxLength: 250, nullable: true),
                    gpfNomineeName = table.Column<string>(nullable: true),
                    gpfAcNo = table.Column<string>(nullable: true),
                    nameEnglish = table.Column<string>(nullable: true),
                    nameBangla = table.Column<string>(nullable: true),
                    motherNameEnglish = table.Column<string>(nullable: true),
                    motherNameBangla = table.Column<string>(nullable: true),
                    fatherNameEnglish = table.Column<string>(nullable: true),
                    fatherNameBangla = table.Column<string>(nullable: true),
                    nationality = table.Column<string>(nullable: true),
                    disability = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    joiningDatePresentWorkstation = table.Column<DateTime>(nullable: true),
                    joiningDateGovtService = table.Column<DateTime>(nullable: true),
                    dateofregularity = table.Column<DateTime>(nullable: true),
                    dateOfPermanent = table.Column<DateTime>(nullable: true),
                    dateOfConfirmation = table.Column<DateTime>(nullable: true),
                    LPRDate = table.Column<string>(nullable: true),
                    PRLStartDate = table.Column<string>(nullable: true),
                    PRLEndDate = table.Column<string>(nullable: true),
                    gender = table.Column<string>(nullable: true),
                    birthPlace = table.Column<string>(nullable: true),
                    maritalStatus = table.Column<string>(nullable: true),
                    religionId = table.Column<int>(nullable: true),
                    memberTypeId = table.Column<int>(nullable: true),
                    tin = table.Column<string>(nullable: true),
                    batch = table.Column<string>(nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    freedomFighter = table.Column<bool>(nullable: false),
                    freedomFighterNo = table.Column<string>(nullable: true),
                    telephoneOffice = table.Column<string>(nullable: true),
                    telephoneResidence = table.Column<string>(nullable: true),
                    pabx = table.Column<string>(nullable: true),
                    emailAddress = table.Column<string>(nullable: true),
                    emailAddressPersonal = table.Column<string>(nullable: true),
                    mobileNumberOffice = table.Column<string>(maxLength: 50, nullable: true),
                    mobileNumberPersonal = table.Column<string>(maxLength: 50, nullable: true),
                    specialSkill = table.Column<string>(nullable: true),
                    seniorityNumber = table.Column<string>(maxLength: 50, nullable: true),
                    designation = table.Column<string>(nullable: true),
                    post = table.Column<int>(nullable: true),
                    designationCheck = table.Column<int>(nullable: false),
                    joiningDesignation = table.Column<string>(nullable: true),
                    natureOfRequitment = table.Column<string>(maxLength: 100, nullable: true),
                    homeDistrict = table.Column<string>(nullable: true),
                    activityStatus = table.Column<int>(nullable: true),
                    spacialSkillIds = table.Column<string>(nullable: true),
                    spacialSkills = table.Column<string>(nullable: true),
                    orgType = table.Column<string>(maxLength: 100, nullable: true),
                    socialNetwork = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberInfo_MemberType_memberTypeId",
                        column: x => x.memberTypeId,
                        principalSchema: "Club",
                        principalTable: "MemberType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberInfo_Religion_religionId",
                        column: x => x.religionId,
                        principalSchema: "HR",
                        principalTable: "Religion",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TeacherBasics",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    teacherCode = table.Column<string>(nullable: true),
                    nameEnglish = table.Column<string>(nullable: true),
                    nameBangla = table.Column<string>(nullable: true),
                    maritalStatus = table.Column<string>(nullable: true),
                    addressPresent = table.Column<string>(nullable: true),
                    addressPermanant = table.Column<string>(nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    mobilePersonal = table.Column<string>(nullable: true),
                    mobileOffice = table.Column<string>(nullable: true),
                    emailPersonal = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    eTin = table.Column<string>(nullable: true),
                    nid = table.Column<string>(nullable: true),
                    heightCm = table.Column<int>(nullable: false),
                    weightKg = table.Column<int>(nullable: false),
                    gender = table.Column<string>(nullable: true),
                    religionId = table.Column<int>(nullable: true),
                    photoUrl = table.Column<string>(nullable: true),
                    about = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeacherBasics", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TeacherBasics_Religion_religionId",
                        column: x => x.religionId,
                        principalSchema: "HR",
                        principalTable: "Religion",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeePunchCardInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeCode = table.Column<string>(nullable: true),
                    punchCardNo = table.Column<string>(nullable: false),
                    shiftGroupMasterId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeePunchCardInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeePunchCardInfo_ShiftGroupMaster_shiftGroupMasterId",
                        column: x => x.shiftGroupMasterId,
                        principalSchema: "HR",
                        principalTable: "ShiftGroupMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OTSetupMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    shiftGroupMasterId = table.Column<int>(nullable: true),
                    bufferingmin = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OTSetupMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OTSetupMaster_ShiftGroupMaster_shiftGroupMasterId",
                        column: x => x.shiftGroupMasterId,
                        principalSchema: "HR",
                        principalTable: "ShiftGroupMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ShiftGroupDetail",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    weekDay = table.Column<string>(nullable: false),
                    startTime = table.Column<string>(nullable: true),
                    endTime = table.Column<string>(nullable: true),
                    holiday = table.Column<bool>(nullable: false),
                    shiftGroupMasterId = table.Column<int>(nullable: false),
                    holidayType = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShiftGroupDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ShiftGroupDetail_ShiftGroupMaster_shiftGroupMasterId",
                        column: x => x.shiftGroupMasterId,
                        principalSchema: "HR",
                        principalTable: "ShiftGroupMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TrainingOffer",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    content = table.Column<string>(nullable: true),
                    syllabus = table.Column<string>(nullable: true),
                    benifits = table.Column<string>(nullable: true),
                    duration = table.Column<string>(nullable: true),
                    units = table.Column<string>(nullable: true),
                    moduleTrainingCategoryId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingOffer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingOffer_TrainingCategory_moduleTrainingCategoryId",
                        column: x => x.moduleTrainingCategoryId,
                        principalSchema: "HR",
                        principalTable: "TrainingCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleEntry",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleId = table.Column<int>(nullable: true),
                    workStation = table.Column<string>(nullable: true),
                    registrationNo = table.Column<string>(maxLength: 250, nullable: true),
                    engineNo = table.Column<string>(maxLength: 100, nullable: true),
                    bodyType = table.Column<string>(nullable: true),
                    manufacturingYear = table.Column<string>(nullable: true),
                    horsePower = table.Column<string>(nullable: true),
                    batteryType = table.Column<string>(nullable: true),
                    vID = table.Column<string>(nullable: false),
                    department = table.Column<string>(nullable: true),
                    chassisNo = table.Column<string>(nullable: true),
                    noofSeat = table.Column<string>(nullable: true),
                    noofCylinder = table.Column<string>(nullable: true),
                    distributorType = table.Column<string>(nullable: true),
                    oilType = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    source = table.Column<string>(nullable: true),
                    purchesAmount = table.Column<string>(nullable: true),
                    insurance = table.Column<string>(nullable: true),
                    dateOfPurches = table.Column<DateTime>(nullable: true),
                    dateOfHandoverToMOPA = table.Column<DateTime>(nullable: true),
                    registrationDate = table.Column<DateTime>(nullable: true),
                    renewalDate = table.Column<DateTime>(nullable: true),
                    renewalOffice = table.Column<string>(nullable: true),
                    officerId = table.Column<int>(nullable: true),
                    officerName = table.Column<string>(nullable: true),
                    driverId = table.Column<int>(nullable: true),
                    driverName = table.Column<string>(nullable: true),
                    orgType = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleEntry", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleEntry_Vehicle_vehicleId",
                        column: x => x.vehicleId,
                        principalSchema: "HR",
                        principalTable: "Vehicle",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BonousSubCategory",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bonousCategoryId = table.Column<int>(nullable: true),
                    bonousSubCategoryName = table.Column<string>(maxLength: 50, nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BonousSubCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BonousSubCategory_BonousCategory_bonousCategoryId",
                        column: x => x.bonousCategoryId,
                        principalSchema: "Payroll",
                        principalTable: "BonousCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalarySlab",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryGradeId = table.Column<int>(nullable: false),
                    slabName = table.Column<string>(maxLength: 100, nullable: true),
                    slabAmount = table.Column<decimal>(nullable: false),
                    effectDate = table.Column<DateTime>(nullable: true),
                    orderNo = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalarySlab", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalarySlab_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LoanPolicy",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryGradeId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: true),
                    loanPolicyName = table.Column<string>(maxLength: 300, nullable: true),
                    maximumLoanAmount = table.Column<decimal>(nullable: true),
                    loanInterestRate = table.Column<decimal>(nullable: true),
                    loanNoOfInstallment = table.Column<int>(nullable: true),
                    isActive = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LoanPolicy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LoanPolicy_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LoanPolicy_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalaryGradePercent",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryGradeId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    salaryCalulationTypeId = table.Column<int>(nullable: false),
                    percentAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryGradePercent", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryGradePercent_SalaryCalulationType_salaryCalulationTypeId",
                        column: x => x.salaryCalulationTypeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryCalulationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalaryGradePercent_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalaryGradePercent_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "VatTaxRate",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rateTypeId = table.Column<int>(nullable: true),
                    taxYearId = table.Column<int>(nullable: true),
                    rate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VatTaxRate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VatTaxRate_RateType_rateTypeId",
                        column: x => x.rateTypeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "RateType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VatTaxRate_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IncomeTaxSetup",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryHeadId = table.Column<int>(nullable: false),
                    taxYearId = table.Column<int>(nullable: false),
                    exemption = table.Column<string>(nullable: true),
                    exemptionAmount = table.Column<decimal>(nullable: false),
                    exemptionPercent = table.Column<decimal>(nullable: false),
                    exemptionMaxAmount = table.Column<decimal>(nullable: false),
                    exemptionRule = table.Column<string>(maxLength: 400, nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncomeTaxSetup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IncomeTaxSetup_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_IncomeTaxSetup_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InvestmentRebateSettings",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taxYearId = table.Column<int>(nullable: false),
                    allowableInvestment = table.Column<decimal>(nullable: false),
                    investmentRebate = table.Column<decimal>(nullable: false),
                    orInvestmentRebate = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InvestmentRebateSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InvestmentRebateSettings_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SalaryPeriod",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryYearId = table.Column<int>(nullable: false),
                    taxYearId = table.Column<int>(nullable: false),
                    salaryTypeId = table.Column<int>(nullable: false),
                    bonusTypeId = table.Column<int>(nullable: true),
                    organizationsBranchId = table.Column<int>(nullable: true),
                    periodName = table.Column<string>(maxLength: 100, nullable: true),
                    monthName = table.Column<string>(maxLength: 10, nullable: true),
                    lockLabel = table.Column<int>(nullable: true),
                    lockBy = table.Column<string>(maxLength: 100, nullable: true),
                    lockDate = table.Column<DateTime>(nullable: true),
                    daysWorking = table.Column<decimal>(nullable: true),
                    mailText = table.Column<string>(nullable: true),
                    mailSub = table.Column<string>(maxLength: 250, nullable: true),
                    madeBy = table.Column<int>(nullable: true),
                    madeDate = table.Column<DateTime>(nullable: true),
                    checkedBy = table.Column<int>(nullable: true),
                    checkedDate = table.Column<DateTime>(nullable: true),
                    approvedBy = table.Column<int>(nullable: true),
                    approvedDate = table.Column<DateTime>(nullable: true),
                    disbursedBy = table.Column<int>(nullable: true),
                    disbursedDate = table.Column<DateTime>(nullable: true),
                    isPfProcessed = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryPeriod", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryPeriod_BonusType_bonusTypeId",
                        column: x => x.bonusTypeId,
                        principalSchema: "Payroll",
                        principalTable: "BonusType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryPeriod_SalaryType_salaryTypeId",
                        column: x => x.salaryTypeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalaryPeriod_SalaryYear_salaryYearId",
                        column: x => x.salaryYearId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SalaryPeriod_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SlabIncomeTax",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    slabTypeId = table.Column<int>(nullable: false),
                    taxYearId = table.Column<int>(nullable: false),
                    slabAmount = table.Column<decimal>(nullable: false),
                    taxRate = table.Column<decimal>(nullable: false),
                    sortOrder = table.Column<int>(nullable: true),
                    slabText = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SlabIncomeTax", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SlabIncomeTax_SlabType_slabTypeId",
                        column: x => x.slabTypeId,
                        principalSchema: "Payroll",
                        principalTable: "SlabType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SlabIncomeTax_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SlabRebate",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    slabTypeId = table.Column<int>(nullable: false),
                    taxYearId = table.Column<int>(nullable: false),
                    slabRebateAmount = table.Column<decimal>(nullable: false),
                    taxRate = table.Column<decimal>(nullable: false),
                    sortOrder = table.Column<int>(nullable: true),
                    slabRebateText = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SlabRebate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SlabRebate_RebateSlabType_slabTypeId",
                        column: x => x.slabTypeId,
                        principalSchema: "Payroll",
                        principalTable: "RebateSlabType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SlabRebate_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProgramCategory",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMainCategoryId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramCategory_ProgramMainCategory_programMainCategoryId",
                        column: x => x.programMainCategoryId,
                        principalSchema: "PM",
                        principalTable: "ProgramMainCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Store",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    storeName = table.Column<string>(maxLength: 350, nullable: true),
                    storeTypeId = table.Column<int>(nullable: true),
                    licenseNumber = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    alternativeEmail = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    phone = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Store", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Store_StoreType_storeTypeId",
                        column: x => x.storeTypeId,
                        principalSchema: "POS",
                        principalTable: "StoreType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Floor",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    buildingId = table.Column<int>(nullable: true),
                    nameEn = table.Column<string>(nullable: true),
                    nameBn = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Floor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Floor_Building_buildingId",
                        column: x => x.buildingId,
                        principalSchema: "SCM",
                        principalTable: "Building",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SpecificationCategory",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    specificationCategoryName = table.Column<string>(maxLength: 250, nullable: true),
                    itemCategoryId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecificationCategory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecificationCategory_ItemCategory_itemCategoryId",
                        column: x => x.itemCategoryId,
                        principalSchema: "SCM",
                        principalTable: "ItemCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalLog",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    masterId = table.Column<int>(nullable: false),
                    matrixTypeId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: false),
                    nextApproverId = table.Column<int>(nullable: true),
                    sequenceNo = table.Column<int>(nullable: false),
                    isActive = table.Column<int>(nullable: false),
                    notes = table.Column<string>(type: "nvarchar(500)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApprovalLog_MatrixType_matrixTypeId",
                        column: x => x.matrixTypeId,
                        principalSchema: "SCM",
                        principalTable: "MatrixType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentAttachments",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    masterId = table.Column<int>(nullable: false),
                    fileName = table.Column<string>(nullable: true),
                    fileType = table.Column<string>(nullable: true),
                    filePath = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    matrixTypeId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentAttachments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentAttachments_MatrixType_matrixTypeId",
                        column: x => x.matrixTypeId,
                        principalSchema: "SCM",
                        principalTable: "MatrixType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Assessment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCode = table.Column<string>(maxLength: 50, nullable: true),
                    assessmentNo = table.Column<string>(maxLength: 100, nullable: true),
                    assessmentYear = table.Column<string>(nullable: true),
                    assessmentDate = table.Column<DateTime>(nullable: true),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true),
                    signatory = table.Column<string>(maxLength: 100, nullable: true),
                    signatoryDate = table.Column<DateTime>(nullable: true),
                    recommendator = table.Column<string>(maxLength: 100, nullable: true),
                    recommendationDate = table.Column<DateTime>(nullable: true),
                    durationInRecommendetor = table.Column<string>(nullable: true),
                    duration1 = table.Column<DateTime>(nullable: true),
                    duration2 = table.Column<DateTime>(nullable: true),
                    goalAchievement = table.Column<string>(nullable: true),
                    statusInfoId = table.Column<int>(nullable: true),
                    assignToRecomDate = table.Column<DateTime>(nullable: true),
                    empType = table.Column<string>(maxLength: 50, nullable: true),
                    assessmentValue = table.Column<decimal>(nullable: true),
                    acrType = table.Column<string>(nullable: true),
                    routeOrder = table.Column<int>(nullable: true),
                    recomAssignedBy = table.Column<string>(nullable: true),
                    signatoryAssignedBy = table.Column<string>(nullable: true),
                    receivingDate = table.Column<DateTime>(nullable: true),
                    hrDate = table.Column<DateTime>(nullable: true),
                    reasonOfLate = table.Column<string>(nullable: true),
                    actionOnApplication = table.Column<string>(nullable: true),
                    responsibleUser = table.Column<string>(nullable: true),
                    newSignatory = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Assessment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Assessment_StatusInfo_statusInfoId",
                        column: x => x.statusInfoId,
                        principalSchema: "SCM",
                        principalTable: "StatusInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Suppliers",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    supplierTypeId = table.Column<int>(nullable: true),
                    organizationTypeId = table.Column<int>(nullable: true),
                    supplierName = table.Column<string>(maxLength: 250, nullable: true),
                    supplierCode = table.Column<string>(maxLength: 20, nullable: true),
                    tinNo = table.Column<string>(maxLength: 20, nullable: true),
                    vatRegNo = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Suppliers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Suppliers_OrganizationTypes_organizationTypeId",
                        column: x => x.organizationTypeId,
                        principalSchema: "SCM",
                        principalTable: "OrganizationTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Suppliers_SupplierTypes_supplierTypeId",
                        column: x => x.supplierTypeId,
                        principalSchema: "SCM",
                        principalTable: "SupplierTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TeamMember",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    teamMasterId = table.Column<int>(nullable: true),
                    memberId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeamMember", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TeamMember_TeamMaster_teamMasterId",
                        column: x => x.teamMasterId,
                        principalSchema: "SCM",
                        principalTable: "TeamMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Item",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    parentId = table.Column<int>(nullable: true),
                    itemTypeId = table.Column<int>(nullable: true),
                    unitId = table.Column<int>(nullable: true),
                    isParent = table.Column<int>(nullable: true),
                    itemName = table.Column<string>(maxLength: 250, nullable: true),
                    itemCode = table.Column<string>(maxLength: 20, nullable: true),
                    itemDescription = table.Column<string>(nullable: true),
                    accountLedgerId = table.Column<int>(nullable: true),
                    reOrderLevel = table.Column<int>(nullable: true),
                    itemShortName = table.Column<string>(maxLength: 20, nullable: true),
                    fileName = table.Column<string>(nullable: true),
                    isMostUsed = table.Column<int>(nullable: true),
                    isBuild = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Item", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Item_ItemType_itemTypeId",
                        column: x => x.itemTypeId,
                        principalSchema: "SCM",
                        principalTable: "ItemType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Item_ItemCategory_parentId",
                        column: x => x.parentId,
                        principalSchema: "SCM",
                        principalTable: "ItemCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Item_Unit_unitId",
                        column: x => x.unitId,
                        principalSchema: "SCM",
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskSection",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    taskProjectId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskSection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskSection_TaskProject_taskProjectId",
                        column: x => x.taskProjectId,
                        principalSchema: "TMS",
                        principalTable: "TaskProject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FuelStationComment",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelStationInfoId = table.Column<int>(nullable: true),
                    titles = table.Column<string>(maxLength: 250, nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelStationComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FuelStationComment_FuelStationInfo_fuelStationInfoId",
                        column: x => x.fuelStationInfoId,
                        principalSchema: "VMS",
                        principalTable: "FuelStationInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StationFuelInfo",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelStationInfoId = table.Column<int>(nullable: true),
                    fuelTypeId = table.Column<int>(nullable: true),
                    noOfNozlzle = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StationFuelInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StationFuelInfo_FuelStationInfo_fuelStationInfoId",
                        column: x => x.fuelStationInfoId,
                        principalSchema: "VMS",
                        principalTable: "FuelStationInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StationFuelInfo_FuelType_fuelTypeId",
                        column: x => x.fuelTypeId,
                        principalSchema: "VMS",
                        principalTable: "FuelType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchasePartsMaster",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sparePartsId = table.Column<int>(nullable: true),
                    purchaseDate = table.Column<DateTime>(nullable: true),
                    purchaseBy = table.Column<string>(maxLength: 250, nullable: true),
                    challanNo = table.Column<string>(maxLength: 100, nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    price = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchasePartsMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchasePartsMaster_SpareParts_sparePartsId",
                        column: x => x.sparePartsId,
                        principalSchema: "VMS",
                        principalTable: "SpareParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Ambulance",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleTypeId = table.Column<int>(nullable: true),
                    vehicleManufactureId = table.Column<int>(nullable: true),
                    vehicleModelId = table.Column<int>(nullable: true),
                    vehicleStatusId = table.Column<int>(nullable: true),
                    vehicleGroupId = table.Column<int>(nullable: true),
                    vehicleBodyTypeId = table.Column<int>(nullable: true),
                    vehicleBodySubTypeId = table.Column<int>(nullable: true),
                    vehicleOwnershipId = table.Column<int>(nullable: true),
                    vehicleLinkedLId = table.Column<int>(nullable: true),
                    operatorId = table.Column<string>(nullable: true),
                    vehicleName = table.Column<string>(maxLength: 250, nullable: true),
                    vinNo = table.Column<string>(maxLength: 50, nullable: true),
                    licensePlate = table.Column<string>(maxLength: 50, nullable: true),
                    vehicleYear = table.Column<string>(maxLength: 4, nullable: true),
                    trim = table.Column<string>(maxLength: 150, nullable: true),
                    registrationStateArea = table.Column<string>(maxLength: 350, nullable: true),
                    color = table.Column<string>(maxLength: 150, nullable: true),
                    msrPrice = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ambulance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleBodySubType_vehicleBodySubTypeId",
                        column: x => x.vehicleBodySubTypeId,
                        principalSchema: "VMS",
                        principalTable: "VehicleBodySubType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleBodyType_vehicleBodyTypeId",
                        column: x => x.vehicleBodyTypeId,
                        principalSchema: "VMS",
                        principalTable: "VehicleBodyType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleGroup_vehicleGroupId",
                        column: x => x.vehicleGroupId,
                        principalSchema: "VMS",
                        principalTable: "VehicleGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleManufacture_vehicleManufactureId",
                        column: x => x.vehicleManufactureId,
                        principalSchema: "VMS",
                        principalTable: "VehicleManufacture",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleModel_vehicleModelId",
                        column: x => x.vehicleModelId,
                        principalSchema: "VMS",
                        principalTable: "VehicleModel",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleOwnership_vehicleOwnershipId",
                        column: x => x.vehicleOwnershipId,
                        principalSchema: "VMS",
                        principalTable: "VehicleOwnership",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleStatus_vehicleStatusId",
                        column: x => x.vehicleStatusId,
                        principalSchema: "VMS",
                        principalTable: "VehicleStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ambulance_VehicleType_vehicleTypeId",
                        column: x => x.vehicleTypeId,
                        principalSchema: "VMS",
                        principalTable: "VehicleType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleInformation",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleTypeId = table.Column<int>(nullable: true),
                    vehicleManufactureId = table.Column<int>(nullable: true),
                    vehicleModelId = table.Column<int>(nullable: true),
                    vehicleStatusId = table.Column<int>(nullable: true),
                    vehicleGroupId = table.Column<int>(nullable: true),
                    vehicleBodyTypeId = table.Column<int>(nullable: true),
                    vehicleBodySubTypeId = table.Column<int>(nullable: true),
                    vehicleOwnershipId = table.Column<int>(nullable: true),
                    vehicleLinkedLId = table.Column<int>(nullable: true),
                    operatorId = table.Column<string>(nullable: true),
                    vehicleName = table.Column<string>(maxLength: 250, nullable: true),
                    vinNo = table.Column<string>(maxLength: 50, nullable: true),
                    licensePlate = table.Column<string>(maxLength: 50, nullable: true),
                    vehicleYear = table.Column<string>(maxLength: 4, nullable: true),
                    trim = table.Column<string>(maxLength: 150, nullable: true),
                    registrationStateArea = table.Column<string>(maxLength: 350, nullable: true),
                    color = table.Column<string>(maxLength: 150, nullable: true),
                    msrPrice = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleBodySubType_vehicleBodySubTypeId",
                        column: x => x.vehicleBodySubTypeId,
                        principalSchema: "VMS",
                        principalTable: "VehicleBodySubType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleBodyType_vehicleBodyTypeId",
                        column: x => x.vehicleBodyTypeId,
                        principalSchema: "VMS",
                        principalTable: "VehicleBodyType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleGroup_vehicleGroupId",
                        column: x => x.vehicleGroupId,
                        principalSchema: "VMS",
                        principalTable: "VehicleGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleManufacture_vehicleManufactureId",
                        column: x => x.vehicleManufactureId,
                        principalSchema: "VMS",
                        principalTable: "VehicleManufacture",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleModel_vehicleModelId",
                        column: x => x.vehicleModelId,
                        principalSchema: "VMS",
                        principalTable: "VehicleModel",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleOwnership_vehicleOwnershipId",
                        column: x => x.vehicleOwnershipId,
                        principalSchema: "VMS",
                        principalTable: "VehicleOwnership",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleStatus_vehicleStatusId",
                        column: x => x.vehicleStatusId,
                        principalSchema: "VMS",
                        principalTable: "VehicleStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleInformation_VehicleType_vehicleTypeId",
                        column: x => x.vehicleTypeId,
                        principalSchema: "VMS",
                        principalTable: "VehicleType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Districts",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    districtCode = table.Column<string>(nullable: false),
                    districtName = table.Column<string>(nullable: false),
                    districtNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true),
                    divisionId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Districts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Districts_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserAccessPages",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    navbarId = table.Column<int>(nullable: true),
                    isAccess = table.Column<int>(nullable: true),
                    applicationRoleId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserAccessPages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserAccessPages_AspNetRoles_applicationRoleId",
                        column: x => x.applicationRoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserAccessPages_Navbars_navbarId",
                        column: x => x.navbarId,
                        principalTable: "Navbars",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "hallRentalPayments",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    hallRentalApplicationInfoId = table.Column<int>(nullable: true),
                    paymentMode = table.Column<int>(nullable: false),
                    bankName = table.Column<string>(nullable: true),
                    branchName = table.Column<string>(nullable: true),
                    chequeNo = table.Column<string>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    amount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_hallRentalPayments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_hallRentalPayments_hallRentalApplicationInfos_hallRentalApplicationInfoId",
                        column: x => x.hallRentalApplicationInfoId,
                        principalTable: "hallRentalApplicationInfos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BalanceSheetMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    accountGroupId = table.Column<int>(nullable: true),
                    fsLineName = table.Column<string>(maxLength: 350, nullable: true),
                    noteNo = table.Column<string>(maxLength: 30, nullable: true),
                    serialNo = table.Column<int>(nullable: true),
                    fsLineFor = table.Column<string>(maxLength: 3, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BalanceSheetMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BalanceSheetMaster_AccountGroup_accountGroupId",
                        column: x => x.accountGroupId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AccountGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProfitAndLossAccountMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    accountGroupId = table.Column<int>(nullable: true),
                    noteName = table.Column<string>(maxLength: 350, nullable: true),
                    noteNo = table.Column<string>(maxLength: 30, nullable: true),
                    serialNo = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProfitAndLossAccountMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProfitAndLossAccountMaster_AccountGroup_accountGroupId",
                        column: x => x.accountGroupId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AccountGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EventParticipantType",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    eventInformationId = table.Column<int>(nullable: true),
                    participantTypeId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EventParticipantType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EventParticipantType_EventInformation_eventInformationId",
                        column: x => x.eventInformationId,
                        principalSchema: "Club",
                        principalTable: "EventInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EventParticipantType_ParticipantType_participantTypeId",
                        column: x => x.participantTypeId,
                        principalSchema: "Club",
                        principalTable: "ParticipantType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EventPerticipantHead",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    eventInformationId = table.Column<int>(nullable: true),
                    participantHeadId = table.Column<int>(nullable: true),
                    price = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EventPerticipantHead", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EventPerticipantHead_EventInformation_eventInformationId",
                        column: x => x.eventInformationId,
                        principalSchema: "Club",
                        principalTable: "EventInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EventPerticipantHead_ParticipantHead_participantHeadId",
                        column: x => x.participantHeadId,
                        principalSchema: "Club",
                        principalTable: "ParticipantHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ColdActivityDetails",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    coldActivityMastersId = table.Column<int>(nullable: false),
                    contactName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ColdActivityDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ColdActivityDetails_ColdActivityMasters_coldActivityMastersId",
                        column: x => x.coldActivityMastersId,
                        principalSchema: "CRM",
                        principalTable: "ColdActivityMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ColdActivityDiscussion",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    coldActivityMastersId = table.Column<int>(nullable: false),
                    discussion = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ColdActivityDiscussion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ColdActivityDiscussion_ColdActivityMasters_coldActivityMastersId",
                        column: x => x.coldActivityMastersId,
                        principalSchema: "CRM",
                        principalTable: "ColdActivityMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FDRInvesment",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bankId = table.Column<int>(nullable: true),
                    bankAccountNo = table.Column<string>(nullable: true),
                    bankBranchName = table.Column<string>(nullable: true),
                    FTInstructionNo = table.Column<string>(nullable: true),
                    FTSendTo = table.Column<string>(nullable: true),
                    FTDate = table.Column<DateTime>(nullable: true),
                    NOI = table.Column<string>(nullable: true),
                    SOF = table.Column<string>(nullable: true),
                    IsJournal = table.Column<int>(nullable: true),
                    FDRStatus = table.Column<int>(nullable: false),
                    Status = table.Column<int>(nullable: true),
                    IsRenew = table.Column<int>(nullable: true),
                    ParentID = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FDRInvesment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FDRInvesment_Bank_bankId",
                        column: x => x.bankId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Vacancy",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    type = table.Column<int>(nullable: true),
                    sanction = table.Column<int>(nullable: true),
                    existing = table.Column<int>(nullable: true),
                    vacancy = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Vacancy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Vacancy_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RelDegreeSubject",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    degreeId = table.Column<int>(nullable: false),
                    subjectId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelDegreeSubject", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelDegreeSubject_Degree_degreeId",
                        column: x => x.degreeId,
                        principalSchema: "HR",
                        principalTable: "Degree",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RelDegreeSubject_Subject_subjectId",
                        column: x => x.subjectId,
                        principalSchema: "HR",
                        principalTable: "Subject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Post",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organoOrganizationId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    altDesignationId = table.Column<int>(nullable: true),
                    IsHead = table.Column<int>(nullable: false),
                    numberOfPost = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Post", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Post_Designation_altDesignationId",
                        column: x => x.altDesignationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Post_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Post_OrganoOrganization_organoOrganizationId",
                        column: x => x.organoOrganizationId,
                        principalSchema: "HR",
                        principalTable: "OrganoOrganization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Balance",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    paymentHeadId = table.Column<int>(nullable: true),
                    paid = table.Column<double>(nullable: false),
                    due = table.Column<double>(nullable: false),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Balance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Balance_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Balance_PaymentHead_paymentHeadId",
                        column: x => x.paymentHeadId,
                        principalSchema: "Club",
                        principalTable: "PaymentHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Invoice",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    paymentHeadId = table.Column<int>(nullable: true),
                    period = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: false),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    paymentDeadline = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Invoice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Invoice_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Invoice_PaymentHead_paymentHeadId",
                        column: x => x.paymentHeadId,
                        principalSchema: "Club",
                        principalTable: "PaymentHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberAward",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    awardName = table.Column<string>(nullable: true),
                    purpose = table.Column<string>(nullable: true),
                    awardDate = table.Column<DateTime>(nullable: true),
                    issuedBy = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberAward", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberAward_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberChildren",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    childName = table.Column<string>(nullable: true),
                    childNameBN = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    education = table.Column<string>(nullable: true),
                    gender = table.Column<string>(nullable: true),
                    bin = table.Column<string>(nullable: true),
                    occupation = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    nid = table.Column<string>(maxLength: 100, nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    disability = table.Column<int>(nullable: false),
                    spacialSkillIds = table.Column<string>(nullable: true),
                    spacialSkills = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberChildren", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberChildren_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberDrivingLicense",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    licenseNumber = table.Column<string>(nullable: true),
                    category = table.Column<string>(nullable: true),
                    placeOfIssue = table.Column<string>(nullable: true),
                    dateOfIssue = table.Column<DateTime>(nullable: true),
                    dateOfExpair = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberDrivingLicense", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberDrivingLicense_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberLanguage",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    reading = table.Column<string>(maxLength: 50, nullable: true),
                    writing = table.Column<string>(maxLength: 50, nullable: true),
                    speaking = table.Column<string>(maxLength: 50, nullable: true),
                    languageId = table.Column<int>(nullable: true),
                    proficiency = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberLanguage", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberLanguage_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MemberLanguage_Language_languageId",
                        column: x => x.languageId,
                        principalSchema: "HR",
                        principalTable: "Language",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberOtherInfo",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    otherInfo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberOtherInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberOtherInfo_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberPassportDetails",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    passportNumber = table.Column<string>(nullable: true),
                    placeOfIssue = table.Column<string>(nullable: true),
                    dateOfIssue = table.Column<DateTime>(nullable: true),
                    dateOfExpair = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberPassportDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberPassportDetails_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberPhotograph",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    url = table.Column<string>(nullable: false),
                    remarks = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberPhotograph", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberPhotograph_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberPublication",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    publicationName = table.Column<string>(nullable: true),
                    publicationNubmer = table.Column<string>(nullable: true),
                    publicationType = table.Column<string>(nullable: true),
                    publicationPlace = table.Column<string>(nullable: true),
                    publicationDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberPublication", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberPublication_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberSpouse",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    spouseName = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    spouseNameBN = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    dateOfMarriage = table.Column<DateTime>(nullable: true),
                    occupation = table.Column<string>(nullable: true),
                    gender = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    bin = table.Column<string>(nullable: true),
                    nid = table.Column<string>(nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    contact = table.Column<string>(nullable: true),
                    highestEducation = table.Column<string>(nullable: true),
                    homeDistrict = table.Column<string>(nullable: true),
                    spacialSkillIds = table.Column<string>(nullable: true),
                    spacialSkills = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberSpouse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberSpouse_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MemberTraningLog",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    trainingCategoryId = table.Column<int>(nullable: true),
                    trainingInstituteId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    trainingTitle = table.Column<string>(nullable: true),
                    sponsoringAgency = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberTraningLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberTraningLog_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberTraningLog_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MemberTraningLog_TrainingCategory_trainingCategoryId",
                        column: x => x.trainingCategoryId,
                        principalSchema: "HR",
                        principalTable: "TrainingCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberTraningLog_TrainingInstitute_trainingInstituteId",
                        column: x => x.trainingInstituteId,
                        principalSchema: "HR",
                        principalTable: "TrainingInstitute",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberTransferLog",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    workStation = table.Column<string>(nullable: true),
                    from = table.Column<DateTime>(nullable: true),
                    to = table.Column<DateTime>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    salaryGradeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberTransferLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberTransferLog_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MemberTransferLog_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OtherMembership",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    nameOrganization = table.Column<string>(nullable: true),
                    membershipType = table.Column<string>(nullable: true),
                    membershipId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OtherMembership", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OtherMembership_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OtherMembership_Membership_membershipId",
                        column: x => x.membershipId,
                        principalSchema: "HR",
                        principalTable: "Membership",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PaymentLog",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    amount = table.Column<double>(nullable: false),
                    url = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    adminFeedBack = table.Column<string>(nullable: true),
                    paymentType = table.Column<string>(nullable: true),
                    trNumber = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PaymentLog_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RlnMemberGroup",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    memberGroupId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RlnMemberGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RlnMemberGroup_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RlnMemberGroup_MemberGroup_memberGroupId",
                        column: x => x.memberGroupId,
                        principalSchema: "Club",
                        principalTable: "MemberGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Topic",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    topic = table.Column<string>(nullable: true),
                    details = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    memberId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Topic", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Topic_MemberInfo_memberId",
                        column: x => x.memberId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrMaster",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    adminFeedBack = table.Column<string>(nullable: true),
                    paymentType = table.Column<string>(nullable: true),
                    trNumber = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: false),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrMaster_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TeacherCareer",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    startYear = table.Column<int>(nullable: false),
                    endYear = table.Column<int>(nullable: false),
                    role = table.Column<string>(nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    teacherId = table.Column<int>(nullable: false),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeacherCareer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TeacherCareer_TeacherBasics_teacherId",
                        column: x => x.teacherId,
                        principalSchema: "HR",
                        principalTable: "TeacherBasics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TeacherEducation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    universityName = table.Column<string>(nullable: true),
                    degree = table.Column<string>(nullable: true),
                    session = table.Column<string>(nullable: true),
                    teacherId = table.Column<int>(nullable: false),
                    description = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeacherEducation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TeacherEducation_TeacherBasics_teacherId",
                        column: x => x.teacherId,
                        principalSchema: "HR",
                        principalTable: "TeacherBasics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TeacherExpertise",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    title = table.Column<string>(nullable: true),
                    subtitle = table.Column<string>(nullable: true),
                    teacherId = table.Column<int>(nullable: false),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeacherExpertise", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TeacherExpertise_TeacherBasics_teacherId",
                        column: x => x.teacherId,
                        principalSchema: "HR",
                        principalTable: "TeacherBasics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TeacherSocialMeadia",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    username = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    teacherId = table.Column<int>(nullable: false),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeacherSocialMeadia", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TeacherSocialMeadia_TeacherBasics_teacherId",
                        column: x => x.teacherId,
                        principalSchema: "HR",
                        principalTable: "TeacherBasics",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OTSetupDetail",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    oTSetupMasterId = table.Column<int>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    basicPercent = table.Column<decimal>(nullable: true),
                    oTSlotTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OTSetupDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OTSetupDetail_OTSetupMaster_oTSetupMasterId",
                        column: x => x.oTSetupMasterId,
                        principalSchema: "HR",
                        principalTable: "OTSetupMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OTSetupDetail_OTSlotType_oTSlotTypeId",
                        column: x => x.oTSlotTypeId,
                        principalSchema: "HR",
                        principalTable: "OTSlotType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PlanDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    planId = table.Column<int>(nullable: true),
                    trainingOfferId = table.Column<int>(nullable: true),
                    numberOfTraining = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PlanDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PlanDetails_Plan_planId",
                        column: x => x.planId,
                        principalSchema: "HR",
                        principalTable: "Plan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PlanDetails_TrainingOffer_trainingOfferId",
                        column: x => x.trainingOfferId,
                        principalSchema: "HR",
                        principalTable: "TrainingOffer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DriverAssignment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleEntryId = table.Column<int>(nullable: true),
                    driverName = table.Column<string>(nullable: true),
                    from = table.Column<DateTime>(nullable: true),
                    to = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DriverAssignment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DriverAssignment_VehicleEntry_vehicleEntryId",
                        column: x => x.vehicleEntryId,
                        principalSchema: "HR",
                        principalTable: "VehicleEntry",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MajorOverholding",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleEntryId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    cost = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MajorOverholding", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MajorOverholding_VehicleEntry_vehicleEntryId",
                        column: x => x.vehicleEntryId,
                        principalSchema: "HR",
                        principalTable: "VehicleEntry",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BonousStructure",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    BonousSubCategoryId = table.Column<int>(nullable: true),
                    salaryCalulationTypeId = table.Column<int>(nullable: true),
                    monthYearType = table.Column<string>(maxLength: 5, nullable: true),
                    bonousBasedOn = table.Column<string>(maxLength: 5, nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    hasEmployee = table.Column<int>(nullable: true),
                    minMonthValue = table.Column<int>(nullable: true),
                    maxMonthValue = table.Column<int>(nullable: true),
                    percentAmount = table.Column<decimal>(nullable: true),
                    periodId = table.Column<int>(nullable: true),
                    calculationPeriodId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BonousStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BonousStructure_BonousSubCategory_BonousSubCategoryId",
                        column: x => x.BonousSubCategoryId,
                        principalSchema: "Payroll",
                        principalTable: "BonousSubCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BonousStructure_SalaryPeriod_calculationPeriodId",
                        column: x => x.calculationPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BonousStructure_SalaryPeriod_periodId",
                        column: x => x.periodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BonousStructure_SalaryCalulationType_salaryCalulationTypeId",
                        column: x => x.salaryCalulationTypeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryCalulationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalaryProcessLog",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    processType = table.Column<string>(maxLength: 30, nullable: true),
                    ipAddress = table.Column<string>(maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryProcessLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryProcessLog_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalaryStatusLog",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    statusType = table.Column<string>(maxLength: 200, nullable: true),
                    ipAddress = table.Column<string>(maxLength: 40, nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryStatusLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryStatusLog_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaxChallan",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    taxChallanNo = table.Column<string>(maxLength: 50, nullable: true),
                    challanDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaxChallan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaxChallan_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PosInvoiceMaster",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    posCustomerId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(maxLength: 100, nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DiscountOnTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NetTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    givenAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    change = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosInvoiceMaster_PosCustomer_posCustomerId",
                        column: x => x.posCustomerId,
                        principalSchema: "POS",
                        principalTable: "PosCustomer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosInvoiceMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosRepInvoiceMaster",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    posCustomerId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    DiscountOnTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    NetTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosRepInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosRepInvoiceMaster_PosCustomer_posCustomerId",
                        column: x => x.posCustomerId,
                        principalSchema: "POS",
                        principalTable: "PosCustomer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosRepInvoiceMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StoreContact",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    personName = table.Column<string>(nullable: true),
                    phoneNumber = table.Column<string>(nullable: true),
                    mobileNumber = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreContact", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreContact_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Cabin",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    floorId = table.Column<int>(nullable: true),
                    cabinNo = table.Column<string>(nullable: true),
                    nameEn = table.Column<string>(nullable: true),
                    nameBn = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    bed = table.Column<int>(nullable: false),
                    booked = table.Column<int>(nullable: false),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cabin", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cabin_Floor_floorId",
                        column: x => x.floorId,
                        principalSchema: "SCM",
                        principalTable: "Floor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Ward",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    floorId = table.Column<int>(nullable: true),
                    nameEn = table.Column<string>(nullable: true),
                    nameBn = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ward", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Ward_Floor_floorId",
                        column: x => x.floorId,
                        principalSchema: "SCM",
                        principalTable: "Floor",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalReview",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    approvalLogID = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalReview", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApprovalReview_ApprovalLog_approvalLogID",
                        column: x => x.approvalLogID,
                        principalSchema: "SCM",
                        principalTable: "ApprovalLog",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ACRComments",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(maxLength: 500, nullable: true),
                    specificJob = table.Column<string>(maxLength: 300, nullable: true),
                    livingStandard = table.Column<int>(nullable: true),
                    languageUsage = table.Column<string>(nullable: true),
                    recommendation = table.Column<int>(nullable: true),
                    signatoryRemarks = table.Column<string>(nullable: true),
                    signlanguageUsage = table.Column<string>(nullable: true),
                    signRecommendation = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRComments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACRComments_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrEmployeeInfo",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    EmpCode = table.Column<string>(maxLength: 10, nullable: true),
                    EmpName = table.Column<string>(maxLength: 150, nullable: true),
                    OfficEmailID = table.Column<string>(maxLength: 150, nullable: true),
                    Status = table.Column<string>(maxLength: 10, nullable: true),
                    MaritalStatus = table.Column<string>(maxLength: 15, nullable: true),
                    FatherName = table.Column<string>(maxLength: 200, nullable: true),
                    MotherName = table.Column<string>(maxLength: 200, nullable: true),
                    SpouseName = table.Column<string>(maxLength: 200, nullable: true),
                    PerDistrict = table.Column<string>(maxLength: 100, nullable: true),
                    PreDistrict = table.Column<string>(maxLength: 100, nullable: true),
                    OfficMobile = table.Column<string>(maxLength: 20, nullable: true),
                    Mobile = table.Column<string>(maxLength: 20, nullable: true),
                    BirthDate = table.Column<string>(maxLength: 8, nullable: true),
                    JoiningDate = table.Column<string>(maxLength: 8, nullable: true),
                    PrlDate = table.Column<string>(maxLength: 8, nullable: true),
                    SSNo = table.Column<string>(maxLength: 20, nullable: true),
                    FileNo = table.Column<string>(maxLength: 15, nullable: true),
                    PFAC = table.Column<string>(maxLength: 20, nullable: true),
                    NationalID = table.Column<string>(maxLength: 20, nullable: true),
                    DesignationName = table.Column<string>(maxLength: 150, nullable: true),
                    JoiningDesignationName = table.Column<string>(maxLength: 150, nullable: true),
                    BranchCode = table.Column<string>(maxLength: 10, nullable: true),
                    BranchName = table.Column<string>(maxLength: 200, nullable: true),
                    DivisionName = table.Column<string>(maxLength: 200, nullable: true),
                    SalaryScale = table.Column<string>(maxLength: 40, nullable: true),
                    BasicAmount = table.Column<decimal>(nullable: true),
                    NoOfChild = table.Column<int>(nullable: true),
                    JoinDatePresentPosition = table.Column<string>(maxLength: 20, nullable: true),
                    JobUnderSupervisor = table.Column<string>(maxLength: 40, nullable: true),
                    EducationalQual = table.Column<string>(maxLength: 200, nullable: true),
                    LastEducation = table.Column<string>(maxLength: 50, nullable: true),
                    DiplomaName = table.Column<string>(maxLength: 150, nullable: true),
                    DiplomaYearOne = table.Column<string>(maxLength: 4, nullable: true),
                    DiplomaYearTwo = table.Column<string>(maxLength: 4, nullable: true),
                    ProfQName = table.Column<string>(maxLength: 150, nullable: true),
                    PresentAddress = table.Column<string>(nullable: true),
                    PermanentAddress = table.Column<string>(nullable: true),
                    RewardsList = table.Column<string>(nullable: true),
                    PunishmentList = table.Column<string>(nullable: true),
                    PunishmentLetterNo = table.Column<string>(nullable: true),
                    PunishmentDate = table.Column<string>(nullable: true),
                    LastPromotionDate = table.Column<string>(nullable: true),
                    DesiCode = table.Column<string>(maxLength: 4, nullable: true),
                    JoiningDesignation = table.Column<string>(maxLength: 4, nullable: true),
                    DivisionCode = table.Column<string>(maxLength: 4, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrEmployeeInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrEmployeeInfo_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ACROtherTables",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    isPhysicallyCapable = table.Column<string>(maxLength: 3, nullable: true),
                    bankingExperience = table.Column<string>(nullable: true),
                    nobankingExperience = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACROtherTables", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACROtherTables_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrProfessionalQualification",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    EmpCode = table.Column<string>(maxLength: 10, nullable: true),
                    Title = table.Column<string>(maxLength: 250, nullable: true),
                    InstituName = table.Column<string>(maxLength: 250, nullable: true),
                    QualificationName = table.Column<string>(maxLength: 150, nullable: true),
                    MajorGroup = table.Column<string>(maxLength: 150, nullable: true),
                    PassingYear = table.Column<string>(maxLength: 4, nullable: true),
                    ResultClass = table.Column<string>(maxLength: 150, nullable: true),
                    SerialNo = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrProfessionalQualification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrProfessionalQualification_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrPromotion",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    EmpCode = table.Column<string>(maxLength: 10, nullable: true),
                    PromotionDate = table.Column<string>(maxLength: 8, nullable: true),
                    DesignationCode = table.Column<string>(maxLength: 4, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrPromotion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrPromotion_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ACRRecommendations",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    specialComment = table.Column<string>(maxLength: 500, nullable: true),
                    moralComment = table.Column<string>(maxLength: 500, nullable: true),
                    intellectualComment = table.Column<string>(maxLength: 500, nullable: true),
                    subjectiveComment = table.Column<string>(maxLength: 500, nullable: true),
                    trainingComment = table.Column<string>(maxLength: 500, nullable: true),
                    promotionalQualification = table.Column<int>(nullable: true),
                    otherQualification = table.Column<string>(maxLength: 1000, nullable: true),
                    promotionalQualificationSignatory = table.Column<int>(nullable: true),
                    moralCommentSignatory = table.Column<string>(maxLength: 10, nullable: true),
                    intellectualCommentSignatory = table.Column<string>(maxLength: 10, nullable: true),
                    subjectiveCommentSignatory = table.Column<string>(maxLength: 10, nullable: true),
                    PromotionValue = table.Column<int>(nullable: true),
                    IncrementValue = table.Column<int>(nullable: true),
                    PermanentValue = table.Column<int>(nullable: true),
                    logical = table.Column<string>(nullable: true),
                    type = table.Column<int>(nullable: true),
                    evaluationValueFirstRecom = table.Column<int>(nullable: true),
                    evaluationValueSecondRecom = table.Column<int>(nullable: true),
                    evaluationDateFirstRecom = table.Column<DateTime>(nullable: true),
                    evaluationDateSecondRecom = table.Column<DateTime>(nullable: true),
                    evaluationTotalFirstRecom = table.Column<decimal>(nullable: true),
                    evaluationTotalSecondRecom = table.Column<decimal>(nullable: true),
                    evaluationTextFirstRecom = table.Column<string>(nullable: true),
                    evaluationSecondFirstRecom = table.Column<string>(nullable: true),
                    Recom5Name = table.Column<string>(nullable: true),
                    Recom5Desig = table.Column<string>(nullable: true),
                    Recom5Code = table.Column<string>(nullable: true),
                    Recom6Name = table.Column<string>(nullable: true),
                    Recom6Desig = table.Column<string>(nullable: true),
                    Recom6Code = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRRecommendations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACRRecommendations_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ACRSignatories",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    evaluationType = table.Column<int>(nullable: true),
                    disAgreementComment = table.Column<string>(nullable: true),
                    additionalComment = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRSignatories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACRSignatories_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrTrainingInfo",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    EmpCode = table.Column<string>(maxLength: 10, nullable: true),
                    FromDate = table.Column<string>(maxLength: 100, nullable: true),
                    ToDate = table.Column<string>(maxLength: 100, nullable: true),
                    TraingInstitute = table.Column<string>(maxLength: 200, nullable: true),
                    TrainingTitle = table.Column<string>(maxLength: 500, nullable: true),
                    TrainingYear = table.Column<string>(maxLength: 4, nullable: true),
                    TrainingCountry = table.Column<string>(maxLength: 200, nullable: true),
                    Remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrTrainingInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrTrainingInfo_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeEducation",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    EmpCode = table.Column<string>(maxLength: 10, nullable: true),
                    LOECat = table.Column<string>(maxLength: 250, nullable: true),
                    UniversityName = table.Column<string>(maxLength: 250, nullable: true),
                    LavelOfEducation = table.Column<string>(maxLength: 150, nullable: true),
                    MajorGroup = table.Column<string>(maxLength: 150, nullable: true),
                    PassingYear = table.Column<string>(maxLength: 4, nullable: true),
                    ResultClass = table.Column<string>(maxLength: 150, nullable: true),
                    SerialNo = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeEducation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeEducation_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeaveDetail",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    leaveTypeId = table.Column<int>(nullable: true),
                    totalLeave = table.Column<int>(nullable: true),
                    consumptionLeave = table.Column<int>(nullable: true),
                    leaveBalance = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveDetail_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveDetail_LeaveType_leaveTypeId",
                        column: x => x.leaveTypeId,
                        principalSchema: "HR",
                        principalTable: "LeaveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QuantitativeEvaluationComments",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    evaluationCommentsHeadId = table.Column<int>(nullable: true),
                    evaluationComments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuantitativeEvaluationComments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QuantitativeEvaluationComments_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QuantitativeEvaluationComments_EvaluationCommentsHead_evaluationCommentsHeadId",
                        column: x => x.evaluationCommentsHeadId,
                        principalSchema: "HR",
                        principalTable: "EvaluationCommentsHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeesAcr",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    acrEvaluationNameId = table.Column<int>(nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    firstValue = table.Column<long>(nullable: true),
                    sencondValue = table.Column<long>(nullable: true),
                    thirdValue = table.Column<long>(nullable: true),
                    forthValue = table.Column<long>(nullable: true),
                    fifthValue = table.Column<long>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeesAcr", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeesAcr_AcrEvaluationName_acrEvaluationNameId",
                        column: x => x.acrEvaluationNameId,
                        principalSchema: "HR",
                        principalTable: "AcrEvaluationName",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeesAcr_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QuantitativeEvaluation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    aCRIndicatorId = table.Column<int>(nullable: true),
                    target = table.Column<decimal>(nullable: true),
                    achievement = table.Column<decimal>(nullable: true),
                    achievementPercent = table.Column<decimal>(nullable: true),
                    achievementSign = table.Column<decimal>(nullable: true),
                    achievementPercentSign = table.Column<decimal>(nullable: true),
                    acrCounter = table.Column<decimal>(nullable: true),
                    posting = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QuantitativeEvaluation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QuantitativeEvaluation_ACRIndicator_aCRIndicatorId",
                        column: x => x.aCRIndicatorId,
                        principalSchema: "HR",
                        principalTable: "ACRIndicator",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QuantitativeEvaluation_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ContactRenewalReminder",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    renewalTypeId = table.Column<int>(nullable: true),
                    issueDate = table.Column<DateTime>(nullable: true),
                    expireDate = table.Column<DateTime>(nullable: true),
                    reminderType = table.Column<string>(maxLength: 150, nullable: true),
                    reminderValue = table.Column<string>(maxLength: 100, nullable: true),
                    emailNotifications = table.Column<string>(maxLength: 100, nullable: true),
                    emailId = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactRenewalReminder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ContactRenewalReminder_RenewalType_renewalTypeId",
                        column: x => x.renewalTypeId,
                        principalSchema: "VMS",
                        principalTable: "RenewalType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ContactRenewalReminder_Suppliers_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Suppliers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SORDetails",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sORMasterId = table.Column<int>(nullable: false),
                    sparePartsId = table.Column<int>(nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    rate = table.Column<decimal>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SORDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SORDetails_SORMaster_sORMasterId",
                        column: x => x.sORMasterId,
                        principalSchema: "VMS",
                        principalTable: "SORMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SORDetails_SpareParts_sparePartsId",
                        column: x => x.sparePartsId,
                        principalSchema: "VMS",
                        principalTable: "SpareParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SORDetails_Suppliers_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Suppliers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "belongingItems",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemId = table.Column<int>(nullable: true),
                    ItemName = table.Column<string>(nullable: true),
                    ItemCode = table.Column<string>(nullable: true),
                    brandName = table.Column<string>(nullable: true),
                    modelName = table.Column<string>(nullable: true),
                    serialNumber = table.Column<string>(nullable: true),
                    dateOfProcurement = table.Column<DateTime>(nullable: true),
                    dateOfSubmission = table.Column<DateTime>(nullable: true),
                    dateOfLastPhysicalVerification = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_belongingItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_belongingItems_Item_itemId",
                        column: x => x.itemId,
                        principalSchema: "SCM",
                        principalTable: "Item",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchasePartsDetail",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    purchasePartsMasterId = table.Column<int>(nullable: true),
                    barCode = table.Column<string>(maxLength: 250, nullable: true),
                    isUse = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    price = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchasePartsDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchasePartsDetail_PurchasePartsMaster_purchasePartsMasterId",
                        column: x => x.purchasePartsMasterId,
                        principalSchema: "VMS",
                        principalTable: "PurchasePartsMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AgreementInformation",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleId = table.Column<int>(nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    agreementDate = table.Column<string>(nullable: true),
                    agreementBy = table.Column<string>(nullable: true),
                    expireDate = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AgreementInformation_VMSSupplier_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "VMS",
                        principalTable: "VMSSupplier",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AgreementInformation_VehicleInformation_vehicleId",
                        column: x => x.vehicleId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FuelInformation",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    fuelStationInfoId = table.Column<int>(nullable: true),
                    odometer = table.Column<string>(nullable: true),
                    fuelTakenDate = table.Column<DateTime>(nullable: true),
                    referenceNo = table.Column<string>(maxLength: 350, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FuelInformation_FuelStationInfo_fuelStationInfoId",
                        column: x => x.fuelStationInfoId,
                        principalSchema: "VMS",
                        principalTable: "FuelStationInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FuelInformation_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "InspectionMaster",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    odometer = table.Column<decimal>(nullable: true),
                    signature = table.Column<string>(nullable: true),
                    inspectionDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InspectionMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InspectionMaster_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LinkedVehicle",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LinkedVehicle", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LinkedVehicle_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Odometer",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    odometerValue = table.Column<string>(maxLength: 250, nullable: true),
                    sortOrder = table.Column<int>(nullable: true),
                    sourceType = table.Column<string>(maxLength: 250, nullable: true),
                    sourceTypeId = table.Column<int>(nullable: true),
                    readingDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Odometer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Odometer_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PartsIssueMaster",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleId = table.Column<int>(nullable: true),
                    issueNo = table.Column<string>(maxLength: 100, nullable: true),
                    issueDate = table.Column<DateTime>(nullable: true),
                    purchasePartsId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PartsIssueMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PartsIssueMaster_PurchasePartsMaster_purchasePartsId",
                        column: x => x.purchasePartsId,
                        principalSchema: "VMS",
                        principalTable: "PurchasePartsMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PartsIssueMaster_VehicleInformation_vehicleId",
                        column: x => x.vehicleId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleComment",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    titles = table.Column<string>(maxLength: 250, nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleComment_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleEngineTransmission",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    aspirationId = table.Column<int>(nullable: true),
                    blockTypeId = table.Column<int>(nullable: true),
                    camTypeId = table.Column<int>(nullable: true),
                    fuelInductionId = table.Column<int>(nullable: true),
                    transmissionTypeId = table.Column<int>(nullable: true),
                    engineSummary = table.Column<string>(nullable: true),
                    engineBrand = table.Column<string>(maxLength: 250, nullable: true),
                    bore = table.Column<decimal>(nullable: true),
                    compression = table.Column<decimal>(nullable: true),
                    cylinders = table.Column<decimal>(nullable: true),
                    displacement = table.Column<decimal>(nullable: true),
                    fuelQuality = table.Column<string>(maxLength: 250, nullable: true),
                    maxHp = table.Column<decimal>(nullable: true),
                    maxTorque = table.Column<decimal>(nullable: true),
                    redLineRpm = table.Column<string>(maxLength: 250, nullable: true),
                    stroke = table.Column<decimal>(nullable: true),
                    valves = table.Column<decimal>(nullable: true),
                    transmissionSummary = table.Column<string>(nullable: true),
                    transmissionBrand = table.Column<string>(maxLength: 250, nullable: true),
                    transmissionGears = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleEngineTransmission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleEngineTransmission_Aspiration_aspirationId",
                        column: x => x.aspirationId,
                        principalSchema: "VMS",
                        principalTable: "Aspiration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleEngineTransmission_BlockType_blockTypeId",
                        column: x => x.blockTypeId,
                        principalSchema: "VMS",
                        principalTable: "BlockType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleEngineTransmission_CamType_camTypeId",
                        column: x => x.camTypeId,
                        principalSchema: "VMS",
                        principalTable: "CamType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleEngineTransmission_FuelInduction_fuelInductionId",
                        column: x => x.fuelInductionId,
                        principalSchema: "VMS",
                        principalTable: "FuelInduction",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleEngineTransmission_TransmissionType_transmissionTypeId",
                        column: x => x.transmissionTypeId,
                        principalSchema: "VMS",
                        principalTable: "TransmissionType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleEngineTransmission_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleFluid",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    fuelTypeId = table.Column<int>(nullable: true),
                    fuelQuality = table.Column<string>(maxLength: 250, nullable: true),
                    fuelTankNo = table.Column<string>(nullable: true),
                    capacity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleFluid", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleFluid_FuelType_fuelTypeId",
                        column: x => x.fuelTypeId,
                        principalSchema: "VMS",
                        principalTable: "FuelType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleFluid_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleMaintenanceLimit",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleMaintenanceLimit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleMaintenanceLimit_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleRenewalReminder",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    renewalTypeId = table.Column<int>(nullable: true),
                    issueDate = table.Column<DateTime>(nullable: true),
                    expireDate = table.Column<DateTime>(nullable: true),
                    reminderType = table.Column<string>(maxLength: 150, nullable: true),
                    reminderValue = table.Column<string>(maxLength: 100, nullable: true),
                    emailNotifications = table.Column<string>(maxLength: 100, nullable: true),
                    emailId = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleRenewalReminder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleRenewalReminder_RenewalType_renewalTypeId",
                        column: x => x.renewalTypeId,
                        principalSchema: "VMS",
                        principalTable: "RenewalType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleRenewalReminder_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleServiceHistory",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: false),
                    supplierId = table.Column<int>(nullable: true),
                    completionDate = table.Column<DateTime>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    referenceNo = table.Column<string>(maxLength: 250, nullable: true),
                    generalNotes = table.Column<string>(nullable: true),
                    subTotal = table.Column<decimal>(nullable: true),
                    laborTotal = table.Column<decimal>(nullable: true),
                    partsTotal = table.Column<decimal>(nullable: true),
                    discountType = table.Column<string>(nullable: true),
                    discount = table.Column<decimal>(nullable: true),
                    taxType = table.Column<string>(nullable: true),
                    tax = table.Column<decimal>(nullable: true),
                    total = table.Column<decimal>(nullable: true),
                    workorderNo = table.Column<string>(maxLength: 250, nullable: true),
                    billCommitteeNo = table.Column<string>(maxLength: 250, nullable: true),
                    workorderDate = table.Column<DateTime>(nullable: true),
                    issueDate = table.Column<DateTime>(nullable: true),
                    billCommitteeDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleServiceHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleServiceHistory_VMSSupplier_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "VMS",
                        principalTable: "VMSSupplier",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleServiceHistory_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "VehicleServiceIssue",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    reportedDate = table.Column<DateTime>(nullable: true),
                    summary = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    odometerValue = table.Column<decimal>(nullable: true),
                    reportedBy = table.Column<string>(nullable: true),
                    assignedTo = table.Column<string>(nullable: true),
                    dueDate = table.Column<DateTime>(nullable: true),
                    overdueOdometerValue = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleServiceIssue", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleServiceIssue_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleServiceReminder",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    sparePartsId = table.Column<int>(nullable: true),
                    meterInterval = table.Column<decimal>(nullable: true),
                    timeInterval = table.Column<int>(nullable: true),
                    timeIntervalType = table.Column<string>(maxLength: 10, nullable: true),
                    setManualReminder = table.Column<string>(maxLength: 3, nullable: true),
                    manualOdometer = table.Column<decimal>(nullable: true),
                    manualMonth = table.Column<string>(maxLength: 10, nullable: true),
                    manualDay = table.Column<int>(nullable: true),
                    manualYear = table.Column<int>(nullable: true),
                    dueMeterThreshold = table.Column<decimal>(nullable: true),
                    dueTimeThreshold = table.Column<int>(nullable: true),
                    dueTimeThresholdType = table.Column<string>(maxLength: 10, nullable: true),
                    sendEmailNotification = table.Column<string>(maxLength: 3, nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleServiceReminder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleServiceReminder_SpareParts_sparePartsId",
                        column: x => x.sparePartsId,
                        principalSchema: "VMS",
                        principalTable: "SpareParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleServiceReminder_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleSetting",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    meterTypeId = table.Column<int>(nullable: true),
                    unitId = table.Column<int>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleSetting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleSetting_MeterType_meterTypeId",
                        column: x => x.meterTypeId,
                        principalSchema: "VMS",
                        principalTable: "MeterType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleSetting_Unit_unitId",
                        column: x => x.unitId,
                        principalSchema: "SCM",
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleSetting_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleSpecification",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    width = table.Column<decimal>(nullable: true),
                    height = table.Column<decimal>(nullable: true),
                    length = table.Column<decimal>(nullable: true),
                    interiorVolume = table.Column<decimal>(nullable: true),
                    passengerVolume = table.Column<decimal>(nullable: true),
                    cargoVolume = table.Column<decimal>(nullable: true),
                    groundClearance = table.Column<decimal>(nullable: true),
                    bedLength = table.Column<decimal>(nullable: true),
                    curbWeight = table.Column<decimal>(nullable: true),
                    grossVehicleWeightRating = table.Column<decimal>(nullable: true),
                    towingCapacity = table.Column<decimal>(nullable: true),
                    maxPayload = table.Column<decimal>(nullable: true),
                    epaCity = table.Column<decimal>(nullable: true),
                    epaHighway = table.Column<decimal>(nullable: true),
                    epaCombined = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleSpecification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleSpecification_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleWheelTire",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    driveTypeId = table.Column<int>(nullable: true),
                    brakeSystemId = table.Column<int>(nullable: true),
                    frontTrackWidth = table.Column<decimal>(nullable: true),
                    rearTrackWidth = table.Column<decimal>(nullable: true),
                    wheelBase = table.Column<decimal>(nullable: true),
                    frontWheelDiameter = table.Column<string>(maxLength: 250, nullable: true),
                    rearWheelDiameter = table.Column<string>(maxLength: 250, nullable: true),
                    rearAxle = table.Column<string>(maxLength: 250, nullable: true),
                    frontTireType = table.Column<string>(maxLength: 250, nullable: true),
                    frontTirePsi = table.Column<decimal>(nullable: true),
                    rearTireType = table.Column<string>(maxLength: 250, nullable: true),
                    rearTirePsi = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleWheelTire", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleWheelTire_BrakeSystem_brakeSystemId",
                        column: x => x.brakeSystemId,
                        principalSchema: "VMS",
                        principalTable: "BrakeSystem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleWheelTire_DriveType_driveTypeId",
                        column: x => x.driveTypeId,
                        principalSchema: "VMS",
                        principalTable: "DriveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleWheelTire_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PostOffices",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    districtId = table.Column<int>(nullable: false),
                    postalCode = table.Column<string>(maxLength: 10, nullable: true),
                    postalName = table.Column<string>(maxLength: 100, nullable: true),
                    postalShortName = table.Column<string>(maxLength: 20, nullable: true),
                    postalNameBn = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PostOffices", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PostOffices_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Thanas",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    thanaCode = table.Column<string>(nullable: true),
                    thanaName = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true),
                    thanaNameBn = table.Column<string>(nullable: true),
                    districtId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Thanas", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Thanas_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProgramPlan",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    number = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    programCategoryId = table.Column<int>(nullable: true),
                    programYearId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramPlan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramPlan_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramPlan_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramPlan_ProgramCategory_programCategoryId",
                        column: x => x.programCategoryId,
                        principalSchema: "PM",
                        principalTable: "ProgramCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramPlan_ProgramYear_programYearId",
                        column: x => x.programYearId,
                        principalSchema: "PM",
                        principalTable: "ProgramYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VMSRequisitionMaster",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    reqNo = table.Column<string>(nullable: true),
                    reqBy = table.Column<string>(nullable: true),
                    reqDate = table.Column<string>(nullable: true),
                    reqTime = table.Column<string>(nullable: true),
                    vehicleTypeId = table.Column<int>(nullable: true),
                    vehicleCondition = table.Column<string>(nullable: true),
                    vehicleSeat = table.Column<string>(nullable: true),
                    districtId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VMSRequisitionMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VMSRequisitionMaster_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VMSRequisitionMaster_VehicleType_vehicleTypeId",
                        column: x => x.vehicleTypeId,
                        principalSchema: "VMS",
                        principalTable: "VehicleType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EventRegister",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    eventInformationId = table.Column<int>(nullable: true),
                    eventPerticipantHeadId = table.Column<int>(nullable: true),
                    count = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    transectionId = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EventRegister", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EventRegister_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EventRegister_EventInformation_eventInformationId",
                        column: x => x.eventInformationId,
                        principalSchema: "Club",
                        principalTable: "EventInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EventRegister_EventPerticipantHead_eventPerticipantHeadId",
                        column: x => x.eventPerticipantHeadId,
                        principalSchema: "Club",
                        principalTable: "EventPerticipantHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberEducationalQualification",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    institution = table.Column<string>(nullable: true),
                    resultId = table.Column<int>(nullable: true),
                    majorGroup = table.Column<string>(nullable: true),
                    grade = table.Column<string>(nullable: true),
                    passingYear = table.Column<int>(nullable: true),
                    degreeId = table.Column<int>(nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    reldegreesubjectId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberEducationalQualification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberEducationalQualification_Degree_degreeId",
                        column: x => x.degreeId,
                        principalSchema: "HR",
                        principalTable: "Degree",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberEducationalQualification_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MemberEducationalQualification_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "HR",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberEducationalQualification_RelDegreeSubject_reldegreesubjectId",
                        column: x => x.reldegreesubjectId,
                        principalSchema: "HR",
                        principalTable: "RelDegreeSubject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberEducationalQualification_Result_resultId",
                        column: x => x.resultId,
                        principalSchema: "HR",
                        principalTable: "Result",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberComment",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    details = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    topicId = table.Column<int>(nullable: true),
                    memberId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberComment_MemberInfo_memberId",
                        column: x => x.memberId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberComment_Topic_topicId",
                        column: x => x.topicId,
                        principalSchema: "Club",
                        principalTable: "Topic",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Collection",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    paymentHeadId = table.Column<int>(nullable: true),
                    trMasterId = table.Column<int>(nullable: true),
                    period = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    verifyDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Collection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Collection_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Collection_PaymentHead_paymentHeadId",
                        column: x => x.paymentHeadId,
                        principalSchema: "Club",
                        principalTable: "PaymentHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Collection_TrMaster_trMasterId",
                        column: x => x.trMasterId,
                        principalSchema: "Club",
                        principalTable: "TrMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    planDetailsId = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    maxParticipate = table.Column<int>(nullable: false),
                    numberOfFreeSeat = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingInfo_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "HR",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfo_PlanDetails_planDetailsId",
                        column: x => x.planDetailsId,
                        principalSchema: "HR",
                        principalTable: "PlanDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Bed",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nameEn = table.Column<string>(nullable: true),
                    nameBn = table.Column<string>(nullable: true),
                    cabinId = table.Column<int>(nullable: true),
                    isBooked = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: false),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Bed", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Bed_Cabin_cabinId",
                        column: x => x.cabinId,
                        principalSchema: "SCM",
                        principalTable: "Cabin",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AgreementCostInformation",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementId = table.Column<int>(nullable: true),
                    costHeadId = table.Column<int>(nullable: true),
                    value = table.Column<decimal>(nullable: true),
                    periodTypeId = table.Column<int>(nullable: true),
                    amountTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementCostInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AgreementCostInformation_AgreementInformation_agreementId",
                        column: x => x.agreementId,
                        principalSchema: "VMS",
                        principalTable: "AgreementInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AgreementCostInformation_LimitAmountType_amountTypeId",
                        column: x => x.amountTypeId,
                        principalSchema: "VMS",
                        principalTable: "LimitAmountType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AgreementCostInformation_AgreementCostHead_costHeadId",
                        column: x => x.costHeadId,
                        principalSchema: "VMS",
                        principalTable: "AgreementCostHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AgreementCostInformation_LimitPeriodType_periodTypeId",
                        column: x => x.periodTypeId,
                        principalSchema: "VMS",
                        principalTable: "LimitPeriodType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FuelComment",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelInformationId = table.Column<int>(nullable: true),
                    title = table.Column<string>(maxLength: 250, nullable: true),
                    comment = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FuelComment_FuelInformation_fuelInformationId",
                        column: x => x.fuelInformationId,
                        principalSchema: "VMS",
                        principalTable: "FuelInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FuelDetail",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelInformationId = table.Column<int>(nullable: true),
                    fuelTypeId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    rate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FuelDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FuelDetail_FuelInformation_fuelInformationId",
                        column: x => x.fuelInformationId,
                        principalSchema: "VMS",
                        principalTable: "FuelInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FuelDetail_FuelType_fuelTypeId",
                        column: x => x.fuelTypeId,
                        principalSchema: "VMS",
                        principalTable: "FuelType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "InspectionDetail",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    inspectionMasterId = table.Column<int>(nullable: true),
                    inspectionCheckListCategoryId = table.Column<int>(nullable: true),
                    result = table.Column<bool>(nullable: false),
                    filename = table.Column<string>(nullable: true),
                    comments = table.Column<string>(nullable: true),
                    filePath = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InspectionDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InspectionDetail_InspectionCheckLIstCategory_inspectionCheckListCategoryId",
                        column: x => x.inspectionCheckListCategoryId,
                        principalSchema: "VMS",
                        principalTable: "InspectionCheckLIstCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_InspectionDetail_InspectionMaster_inspectionMasterId",
                        column: x => x.inspectionMasterId,
                        principalSchema: "VMS",
                        principalTable: "InspectionMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PartsIssueDetails",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    partsIssueId = table.Column<int>(nullable: true),
                    partsDetailId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PartsIssueDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PartsIssueDetails_PurchasePartsDetail_partsDetailId",
                        column: x => x.partsDetailId,
                        principalSchema: "VMS",
                        principalTable: "PurchasePartsDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PartsIssueDetails_PartsIssueMaster_partsIssueId",
                        column: x => x.partsIssueId,
                        principalSchema: "VMS",
                        principalTable: "PartsIssueMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleMaintenanceLimitDetail",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleMaintenanceLimitId = table.Column<int>(nullable: true),
                    fuelTypeId = table.Column<int>(nullable: true),
                    limitPeriodTypeId = table.Column<int>(nullable: true),
                    limitAmountTypeId = table.Column<int>(nullable: true),
                    limitValue = table.Column<decimal>(nullable: true),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleMaintenanceLimitDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleMaintenanceLimitDetail_FuelType_fuelTypeId",
                        column: x => x.fuelTypeId,
                        principalSchema: "VMS",
                        principalTable: "FuelType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleMaintenanceLimitDetail_LimitAmountType_limitAmountTypeId",
                        column: x => x.limitAmountTypeId,
                        principalSchema: "VMS",
                        principalTable: "LimitAmountType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleMaintenanceLimitDetail_LimitPeriodType_limitPeriodTypeId",
                        column: x => x.limitPeriodTypeId,
                        principalSchema: "VMS",
                        principalTable: "LimitPeriodType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleMaintenanceLimitDetail_VehicleMaintenanceLimit_vehicleMaintenanceLimitId",
                        column: x => x.vehicleMaintenanceLimitId,
                        principalSchema: "VMS",
                        principalTable: "VehicleMaintenanceLimit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ItemStoreInServiceCenter",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleServiceHistoryId = table.Column<int>(nullable: true),
                    sparePartsId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemStoreInServiceCenter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemStoreInServiceCenter_SpareParts_sparePartsId",
                        column: x => x.sparePartsId,
                        principalSchema: "VMS",
                        principalTable: "SpareParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ItemStoreInServiceCenter_VehicleServiceHistory_vehicleServiceHistoryId",
                        column: x => x.vehicleServiceHistoryId,
                        principalSchema: "VMS",
                        principalTable: "VehicleServiceHistory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ServiceLabel",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleServiceHistoryId = table.Column<int>(nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    labelTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ServiceLabel", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ServiceLabel_LabelType_labelTypeId",
                        column: x => x.labelTypeId,
                        principalSchema: "VMS",
                        principalTable: "LabelType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ServiceLabel_VehicleServiceHistory_vehicleServiceHistoryId",
                        column: x => x.vehicleServiceHistoryId,
                        principalSchema: "VMS",
                        principalTable: "VehicleServiceHistory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleLineItem",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleServiceHistoryId = table.Column<int>(nullable: true),
                    sparePartsId = table.Column<int>(nullable: true),
                    labor = table.Column<decimal>(nullable: true),
                    parts = table.Column<decimal>(nullable: true),
                    subTotal = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleLineItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleLineItem_SpareParts_sparePartsId",
                        column: x => x.sparePartsId,
                        principalSchema: "VMS",
                        principalTable: "SpareParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleLineItem_VehicleServiceHistory_vehicleServiceHistoryId",
                        column: x => x.vehicleServiceHistoryId,
                        principalSchema: "VMS",
                        principalTable: "VehicleServiceHistory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleServiceComment",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleServiceHistoryId = table.Column<int>(nullable: true),
                    titles = table.Column<string>(maxLength: 250, nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleServiceComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleServiceComment_VehicleServiceHistory_vehicleServiceHistoryId",
                        column: x => x.vehicleServiceHistoryId,
                        principalSchema: "VMS",
                        principalTable: "VehicleServiceHistory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleServiceIssueComment",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleServiceIssueId = table.Column<int>(nullable: true),
                    title = table.Column<string>(maxLength: 250, nullable: true),
                    comment = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleServiceIssueComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleServiceIssueComment_VehicleServiceIssue_vehicleServiceIssueId",
                        column: x => x.vehicleServiceIssueId,
                        principalSchema: "VMS",
                        principalTable: "VehicleServiceIssue",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ReminderSchedule",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    vehicleServiceReminderId = table.Column<int>(nullable: true),
                    scheduleOdometer = table.Column<decimal>(nullable: true),
                    scheduleDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReminderSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReminderSchedule_VehicleServiceReminder_vehicleServiceReminderId",
                        column: x => x.vehicleServiceReminderId,
                        principalSchema: "VMS",
                        principalTable: "VehicleServiceReminder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CompanyAddresses",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    addressTypeId = table.Column<int>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompanyAddresses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompanyAddresses_AddressTypes_addressTypeId",
                        column: x => x.addressTypeId,
                        principalTable: "AddressTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CompanyAddresses_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CompanyAddresses_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CompanyAddresses_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CompanyAddresses_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberAddress",
                schema: "Club",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    roadNumber = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberAddress_MemberInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "Club",
                        principalTable: "MemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MemberAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankBranchDetails",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bankId = table.Column<int>(nullable: true),
                    bankBranchId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    accountNo = table.Column<string>(maxLength: 100, nullable: true),
                    maillingAddress = table.Column<string>(maxLength: 350, nullable: true),
                    email = table.Column<string>(maxLength: 100, nullable: true),
                    fax = table.Column<string>(maxLength: 20, nullable: true),
                    website = table.Column<string>(maxLength: 50, nullable: true),
                    phone = table.Column<string>(maxLength: 15, nullable: true),
                    mobile = table.Column<string>(maxLength: 16, nullable: true),
                    collectionType = table.Column<string>(maxLength: 3, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankBranchDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankBranchDetails_BankBranch_bankBranchId",
                        column: x => x.bankBranchId,
                        principalSchema: "CRM",
                        principalTable: "BankBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankBranchDetails_Bank_bankId",
                        column: x => x.bankId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankBranchDetails_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramMaster",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    number = table.Column<string>(nullable: true),
                    projectName = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    Startdate = table.Column<DateTime>(nullable: true),
                    Enddate = table.Column<DateTime>(nullable: true),
                    place = table.Column<string>(nullable: true),
                    grantNumber = table.Column<string>(nullable: true),
                    isDiscussion = table.Column<int>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    totalBudget = table.Column<decimal>(nullable: true),
                    programCategoryId = table.Column<int>(nullable: true),
                    programYearId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    programImpactId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramMaster_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramMaster_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramMaster_ProgramCategory_programCategoryId",
                        column: x => x.programCategoryId,
                        principalSchema: "PM",
                        principalTable: "ProgramCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramMaster_ProgramImpact_programImpactId",
                        column: x => x.programImpactId,
                        principalSchema: "PM",
                        principalTable: "ProgramImpact",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramMaster_ProgramYear_programYearId",
                        column: x => x.programYearId,
                        principalSchema: "PM",
                        principalTable: "ProgramYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramMaster_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StoreAddress",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    addressCategoryId = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreAddress_AddressTypes_addressCategoryId",
                        column: x => x.addressCategoryId,
                        principalTable: "AddressTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreAddress_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VMSAddress",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelStationInfoId = table.Column<int>(nullable: false),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VMSAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VMSAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VMSAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VMSAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VMSAddress_FuelStationInfo_fuelStationInfoId",
                        column: x => x.fuelStationInfoId,
                        principalSchema: "VMS",
                        principalTable: "FuelStationInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_VMSAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RequisitionComment",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: true),
                    titles = table.Column<string>(maxLength: 250, nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequisitionComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RequisitionComment_VMSRequisitionMaster_requisitionMasterId",
                        column: x => x.requisitionMasterId,
                        principalSchema: "VMS",
                        principalTable: "VMSRequisitionMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VehicleUse",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionId = table.Column<int>(nullable: true),
                    vehicleInformationId = table.Column<int>(nullable: true),
                    journeyDate = table.Column<DateTime>(nullable: true),
                    timetoleave = table.Column<string>(nullable: true),
                    journeyTime = table.Column<string>(nullable: true),
                    journeyFrom = table.Column<string>(nullable: true),
                    journeyDestination = table.Column<string>(nullable: true),
                    reason = table.Column<string>(nullable: true),
                    odometerValuejourneyStart = table.Column<decimal>(nullable: true),
                    odometerValuejourneyEnd = table.Column<decimal>(nullable: true),
                    petrolOpeningStock = table.Column<decimal>(nullable: true),
                    petrolSupply = table.Column<decimal>(nullable: true),
                    petrolUse = table.Column<decimal>(nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VehicleUse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VehicleUse_VMSRequisitionMaster_requisitionId",
                        column: x => x.requisitionId,
                        principalSchema: "VMS",
                        principalTable: "VMSRequisitionMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VehicleUse_VehicleInformation_vehicleInformationId",
                        column: x => x.vehicleInformationId,
                        principalSchema: "VMS",
                        principalTable: "VehicleInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VMSRequisitionDetails",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionId = table.Column<int>(nullable: true),
                    routingPlace = table.Column<string>(nullable: true),
                    sequenseNo = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VMSRequisitionDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VMSRequisitionDetails_VMSRequisitionMaster_requisitionId",
                        column: x => x.requisitionId,
                        principalSchema: "VMS",
                        principalTable: "VMSRequisitionMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingDeliverables",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoId = table.Column<int>(nullable: true),
                    deliverable = table.Column<string>(nullable: true),
                    details = table.Column<string>(nullable: true),
                    dueDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingDeliverables", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingDeliverables_TrainingInfo_trainingInfoId",
                        column: x => x.trainingInfoId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingMiscallenous",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoId = table.Column<int>(nullable: true),
                    activityHead = table.Column<string>(nullable: true),
                    activityDetails = table.Column<string>(nullable: true),
                    startTimestamp = table.Column<DateTime>(nullable: true),
                    endTimestamp = table.Column<DateTime>(nullable: true),
                    costOfAction = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingMiscallenous", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingMiscallenous_TrainingInfo_trainingInfoId",
                        column: x => x.trainingInfoId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Companies",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyName = table.Column<string>(maxLength: 250, nullable: true),
                    ownerName = table.Column<string>(maxLength: 250, nullable: true),
                    managerName = table.Column<string>(maxLength: 250, nullable: true),
                    tradeLicense = table.Column<string>(maxLength: 250, nullable: true),
                    businessNature = table.Column<string>(maxLength: 250, nullable: true),
                    officeTelephone = table.Column<string>(maxLength: 150, nullable: true),
                    certificateOfInspir = table.Column<string>(nullable: true),
                    permission = table.Column<string>(nullable: true),
                    generation = table.Column<string>(nullable: true),
                    vision = table.Column<string>(nullable: true),
                    mission = table.Column<string>(nullable: true),
                    vatNo = table.Column<string>(maxLength: 150, nullable: true),
                    tinNo = table.Column<string>(maxLength: 150, nullable: true),
                    binNo = table.Column<string>(nullable: true),
                    swiftCode = table.Column<string>(nullable: true),
                    bankBranchDetailsId = table.Column<int>(nullable: true),
                    dateOfEstablishment = table.Column<DateTime>(nullable: true),
                    permanentEmployee = table.Column<int>(nullable: true),
                    companyEmail = table.Column<string>(maxLength: 150, nullable: true),
                    alternetEmail = table.Column<string>(maxLength: 150, nullable: true),
                    liquidityRatio = table.Column<decimal>(nullable: true),
                    fileName = table.Column<string>(maxLength: 250, nullable: true),
                    filePath = table.Column<string>(maxLength: 500, nullable: true),
                    addressLine = table.Column<string>(nullable: true),
                    filePathTwo = table.Column<string>(maxLength: 500, nullable: true),
                    filePathThree = table.Column<string>(maxLength: 500, nullable: true),
                    companyShortName = table.Column<string>(maxLength: 100, nullable: true),
                    height = table.Column<string>(maxLength: 100, nullable: true),
                    width = table.Column<string>(maxLength: 100, nullable: true),
                    labelColor = table.Column<string>(nullable: true),
                    dateOfAgm = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Companies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Companies_BankBranchDetails_bankBranchDetailsId",
                        column: x => x.bankBranchDetailsId,
                        principalSchema: "CRM",
                        principalTable: "BankBranchDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramAddress",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    address = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramAddress_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramAttachment",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    caption = table.Column<string>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramAttachment_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramHeadline",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    headline = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramHeadline", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramHeadline_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramImplementor",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    implementor = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramImplementor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramImplementor_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramLocation",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    location = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramLocation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramLocation_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramOutCome",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    programStatusId = table.Column<int>(nullable: true),
                    outcome = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramOutCome", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramOutCome_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramOutCome_ProgramStatus_programStatusId",
                        column: x => x.programStatusId,
                        principalSchema: "PM",
                        principalTable: "ProgramStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramPeopleInDiscussion",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramPeopleInDiscussion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramPeopleInDiscussion_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramSourceFund",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    sourceName = table.Column<string>(nullable: true),
                    percent = table.Column<decimal>(nullable: true),
                    amount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramSourceFund", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramSourceFund_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramSourceFundApprove",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    sourceName = table.Column<string>(nullable: true),
                    percent = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramSourceFundApprove", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramSourceFundApprove_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramSubject",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    subject = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramSubject", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramSubject_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramViewer",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramViewer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramViewer_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CompanyGroups",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    groupName = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompanyGroups", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompanyGroups_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ERPModuleAssigns",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    roleId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ERPModuleAssigns", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ERPModuleAssigns_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CompanyBudgets",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    yearId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    initialAmount = table.Column<decimal>(nullable: true),
                    surveillence = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompanyBudgets", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompanyBudgets_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CompanyBudgets_Year_yearId",
                        column: x => x.yearId,
                        principalSchema: "HR",
                        principalTable: "Year",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BoardOfDirector",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    address = table.Column<string>(nullable: true),
                    bio = table.Column<string>(nullable: true),
                    photoUrl = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: false),
                    year = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BoardOfDirector", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BoardOfDirector_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "SpecialBranchUnit",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    branchUnitName = table.Column<string>(nullable: true),
                    branchUnitNameBN = table.Column<string>(nullable: true),
                    branchCode = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true),
                    isdefault = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialBranchUnit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecialBranchUnit_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosBillReturnPaymentMaster",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    PosCustomerId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    billPaymentDate = table.Column<DateTime>(nullable: true),
                    billPaymentNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    billPaymentBy = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    billNumber = table.Column<string>(maxLength: 100, nullable: true),
                    receivedNotes = table.Column<string>(maxLength: 100, nullable: true),
                    isPartialReceived = table.Column<int>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosBillReturnPaymentMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosBillReturnPaymentMaster_PosCustomer_PosCustomerId",
                        column: x => x.PosCustomerId,
                        principalSchema: "POS",
                        principalTable: "PosCustomer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosBillReturnPaymentMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosBillReturnPaymentMaster_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosBillReturnPaymentMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosSalesReturnInvoiceMaster",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    posCustomerId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    isPayClose = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosSalesReturnInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosSalesReturnInvoiceMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosSalesReturnInvoiceMaster_PosCustomer_posCustomerId",
                        column: x => x.posCustomerId,
                        principalSchema: "POS",
                        principalTable: "PosCustomer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosSalesReturnInvoiceMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TransferMaster",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    storeFromId = table.Column<int>(nullable: true),
                    storeToId = table.Column<int>(nullable: true),
                    transferDate = table.Column<DateTime>(nullable: true),
                    transferNO = table.Column<string>(maxLength: 30, nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransferMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransferMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferMaster_Store_storeFromId",
                        column: x => x.storeFromId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferMaster_Store_storeToId",
                        column: x => x.storeToId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramOutComeProgres",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programOutComeId = table.Column<int>(nullable: true),
                    outcome = table.Column<string>(nullable: true),
                    programStatusId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramOutComeProgres", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramOutComeProgres_ProgramOutCome_programOutComeId",
                        column: x => x.programOutComeId,
                        principalSchema: "PM",
                        principalTable: "ProgramOutCome",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramOutComeProgres_ProgramStatus_programStatusId",
                        column: x => x.programStatusId,
                        principalSchema: "PM",
                        principalTable: "ProgramStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramOutPut",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    programOutComeId = table.Column<int>(nullable: true),
                    programStatusId = table.Column<int>(nullable: true),
                    output = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramOutPut", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramOutPut_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramOutPut_ProgramOutCome_programOutComeId",
                        column: x => x.programOutComeId,
                        principalSchema: "PM",
                        principalTable: "ProgramOutCome",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramOutPut_ProgramStatus_programStatusId",
                        column: x => x.programStatusId,
                        principalSchema: "PM",
                        principalTable: "ProgramStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Leads",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sourceId = table.Column<int>(nullable: true),
                    sectorId = table.Column<int>(nullable: true),
                    companyGroupId = table.Column<int>(nullable: true),
                    ownerShipTypeId = table.Column<int>(nullable: true),
                    leadOwner = table.Column<string>(maxLength: 350, nullable: true),
                    leadName = table.Column<string>(maxLength: 250, nullable: true),
                    leadShortName = table.Column<string>(maxLength: 100, nullable: true),
                    leadNumber = table.Column<string>(maxLength: 50, nullable: true),
                    sourceDescription = table.Column<string>(nullable: true),
                    isClient = table.Column<int>(nullable: true),
                    totalemployee = table.Column<int>(nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    isPersonal = table.Column<int>(nullable: true),
                    fITypeId = table.Column<int>(nullable: true),
                    leadProgressStatusId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Leads", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Leads_CompanyGroups_companyGroupId",
                        column: x => x.companyGroupId,
                        principalTable: "CompanyGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Leads_FIType_fITypeId",
                        column: x => x.fITypeId,
                        principalSchema: "CRM",
                        principalTable: "FIType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Leads_LeadProgressStatus_leadProgressStatusId",
                        column: x => x.leadProgressStatusId,
                        principalSchema: "CRM",
                        principalTable: "LeadProgressStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Leads_OwnerShipType_ownerShipTypeId",
                        column: x => x.ownerShipTypeId,
                        principalSchema: "CRM",
                        principalTable: "OwnerShipType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Leads_Sector_sectorId",
                        column: x => x.sectorId,
                        principalSchema: "CRM",
                        principalTable: "Sector",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Leads_Source_sourceId",
                        column: x => x.sourceId,
                        principalSchema: "CRM",
                        principalTable: "Source",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(nullable: false),
                    UserName = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(maxLength: 256, nullable: true),
                    Email = table.Column<string>(maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(nullable: false),
                    PasswordHash = table.Column<string>(nullable: true),
                    SecurityStamp = table.Column<string>(nullable: true),
                    ConcurrencyStamp = table.Column<string>(nullable: true),
                    PhoneNumber = table.Column<string>(nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(nullable: false),
                    TwoFactorEnabled = table.Column<bool>(nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(nullable: true),
                    LockoutEnabled = table.Column<bool>(nullable: false),
                    AccessFailedCount = table.Column<int>(nullable: false),
                    userTypeId = table.Column<int>(nullable: true),
                    EmpCode = table.Column<string>(type: "nvarchar(50)", nullable: true),
                    userId = table.Column<int>(nullable: false),
                    companyId = table.Column<int>(nullable: true),
                    MaxAmount = table.Column<decimal>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    org = table.Column<string>(maxLength: 120, nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 120, nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    updatedBy = table.Column<string>(maxLength: 120, nullable: true),
                    isPassChange = table.Column<int>(nullable: false),
                    passChangeDate = table.Column<DateTime>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true),
                    totalLoggedIn = table.Column<int>(nullable: true),
                    isOnline = table.Column<int>(nullable: true),
                    lastLoggedInTime = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUsers_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AspNetUsers_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AspNetUsers_UserTypes_userTypeId",
                        column: x => x.userTypeId,
                        principalTable: "UserTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Ledger",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    groupId = table.Column<int>(nullable: true),
                    accountCode = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    accountName = table.Column<string>(type: "nvarchar(300)", nullable: true),
                    aliasName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    currencyId = table.Column<int>(nullable: true),
                    haveSubLedger = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true),
                    ledgerType = table.Column<string>(maxLength: 30, nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ledger", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Ledger_Currency_currencyId",
                        column: x => x.currencyId,
                        principalSchema: "SCM",
                        principalTable: "Currency",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ledger_AccountGroup_groupId",
                        column: x => x.groupId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AccountGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Ledger_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "NoteMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    noteName = table.Column<string>(maxLength: 350, nullable: true),
                    noteHead = table.Column<string>(maxLength: 350, nullable: true),
                    nmSerialNo = table.Column<int>(nullable: true),
                    balanceSheetMasterId = table.Column<int>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NoteMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NoteMaster_BalanceSheetMaster_balanceSheetMasterId",
                        column: x => x.balanceSheetMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "BalanceSheetMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_NoteMaster_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BudgetBranchAddress",
                schema: "Budget",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    addressTypeId = table.Column<int>(nullable: true),
                    budgetBranchId = table.Column<int>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BudgetBranchAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BudgetBranchAddress_AddressTypes_addressTypeId",
                        column: x => x.addressTypeId,
                        principalTable: "AddressTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BudgetBranchAddress_SpecialBranchUnit_budgetBranchId",
                        column: x => x.budgetBranchId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BudgetBranchAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BudgetBranchAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BudgetBranchAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BudgetBranchAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FunctionInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    branchUnitName = table.Column<string>(nullable: true),
                    branchUnitNameBN = table.Column<string>(nullable: true),
                    branchCode = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true),
                    branchPlace = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FunctionInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FunctionInfo_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FunctionInfo_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GratuityPolicyMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sbuId = table.Column<int>(nullable: false),
                    daysDIv = table.Column<decimal>(nullable: false),
                    roundMode = table.Column<int>(nullable: false),
                    isJoiningDate = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GratuityPolicyMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GratuityPolicyMaster_SpecialBranchUnit_sbuId",
                        column: x => x.sbuId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RlnSBUPNS",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pNSId = table.Column<int>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RlnSBUPNS", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RlnSBUPNS_PNS_pNSId",
                        column: x => x.pNSId,
                        principalSchema: "HR",
                        principalTable: "PNS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RlnSBUPNS_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Project",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    projectName = table.Column<string>(maxLength: 250, nullable: true),
                    projectNameBN = table.Column<string>(maxLength: 250, nullable: true),
                    projectShortName = table.Column<string>(maxLength: 50, nullable: true),
                    projectLocation = table.Column<string>(maxLength: 450, nullable: true),
                    inChargeEmpCode = table.Column<string>(maxLength: 20, nullable: true),
                    projectStatus = table.Column<string>(maxLength: 20, nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    isdefault = table.Column<int>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Project", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Project_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosBillReturnPaymentDetail",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    billReturnPaymentMasterId = table.Column<int>(nullable: true),
                    salesReturnInvoiceMasterId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosBillReturnPaymentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosBillReturnPaymentDetail_PosBillReturnPaymentMaster_billReturnPaymentMasterId",
                        column: x => x.billReturnPaymentMasterId,
                        principalSchema: "POS",
                        principalTable: "PosBillReturnPaymentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosBillReturnPaymentDetail_PosSalesReturnInvoiceMaster_salesReturnInvoiceMasterId",
                        column: x => x.salesReturnInvoiceMasterId,
                        principalSchema: "POS",
                        principalTable: "PosSalesReturnInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramActivity",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    ProgramOutPutId = table.Column<int>(nullable: true),
                    activity = table.Column<string>(nullable: true),
                    values = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    outComeName = table.Column<string>(nullable: true),
                    outPutName = table.Column<string>(nullable: true),
                    outPutValues = table.Column<string>(nullable: true),
                    indicator = table.Column<string>(nullable: true),
                    outputIndicator = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramActivity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramActivity_ProgramOutPut_ProgramOutPutId",
                        column: x => x.ProgramOutPutId,
                        principalSchema: "PM",
                        principalTable: "ProgramOutPut",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramActivity_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramIndicator",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    programOutPutId = table.Column<int>(nullable: true),
                    indicator = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramIndicator", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramIndicator_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramIndicator_ProgramOutPut_programOutPutId",
                        column: x => x.programOutPutId,
                        principalSchema: "PM",
                        principalTable: "ProgramOutPut",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramOutPutProgres",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programOutPutId = table.Column<int>(nullable: true),
                    programStatusId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramOutPutProgres", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramOutPutProgres_ProgramOutPut_programOutPutId",
                        column: x => x.programOutPutId,
                        principalSchema: "PM",
                        principalTable: "ProgramOutPut",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramOutPutProgres_ProgramStatus_programStatusId",
                        column: x => x.programStatusId,
                        principalSchema: "PM",
                        principalTable: "ProgramStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ActivityMaster",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    activityMasterId = table.Column<int>(nullable: true),
                    activityStatusId = table.Column<int>(nullable: true),
                    activityCategoryId = table.Column<int>(nullable: true),
                    activitySessionId = table.Column<int>(nullable: true),
                    activityTypeId = table.Column<int>(nullable: true),
                    activitiesDate = table.Column<DateTime>(nullable: true),
                    ownerType = table.Column<string>(nullable: true),
                    taskOwner = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    priority = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    reminderDate = table.Column<DateTime>(nullable: true),
                    reminderTime = table.Column<DateTime>(nullable: true),
                    isreminder = table.Column<int>(nullable: true),
                    taskSectionId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivityMaster_ActivityCategory_activityCategoryId",
                        column: x => x.activityCategoryId,
                        principalSchema: "CRM",
                        principalTable: "ActivityCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityMaster_ActivityMaster_activityMasterId",
                        column: x => x.activityMasterId,
                        principalSchema: "CRM",
                        principalTable: "ActivityMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityMaster_ActivitySession_activitySessionId",
                        column: x => x.activitySessionId,
                        principalSchema: "CRM",
                        principalTable: "ActivitySession",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityMaster_ActivityStatus_activityStatusId",
                        column: x => x.activityStatusId,
                        principalSchema: "CRM",
                        principalTable: "ActivityStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityMaster_ActivityType_activityTypeId",
                        column: x => x.activityTypeId,
                        principalSchema: "CRM",
                        principalTable: "ActivityType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityMaster_TaskSection_taskSectionId",
                        column: x => x.taskSectionId,
                        principalSchema: "TMS",
                        principalTable: "TaskSection",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Clients",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementReceiveDate = table.Column<DateTime>(nullable: true),
                    leadsId = table.Column<int>(nullable: false),
                    isconverted = table.Column<int>(nullable: true),
                    isactive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clients", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Clients_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CRMNoteMaster",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    title = table.Column<string>(nullable: true),
                    notesdescription = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CRMNoteMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CRMNoteMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeadsBankInfo",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    bankBranchDetailsId = table.Column<int>(nullable: true),
                    bankType = table.Column<string>(maxLength: 50, nullable: true),
                    crmdepartmentsId = table.Column<int>(nullable: true),
                    crmdesignationsId = table.Column<int>(nullable: true),
                    contactName = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeadsBankInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeadsBankInfo_BankBranchDetails_bankBranchDetailsId",
                        column: x => x.bankBranchDetailsId,
                        principalSchema: "CRM",
                        principalTable: "BankBranchDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeadsBankInfo_CRMDepartment_crmdepartmentsId",
                        column: x => x.crmdepartmentsId,
                        principalSchema: "CRM",
                        principalTable: "CRMDepartment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeadsBankInfo_CRMDesignation_crmdesignationsId",
                        column: x => x.crmdesignationsId,
                        principalSchema: "CRM",
                        principalTable: "CRMDesignation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeadsBankInfo_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeadsHistory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    actionName = table.Column<string>(maxLength: 250, nullable: true),
                    actionDetails = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeadsHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeadsHistory_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OwnerChangeHistory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    peviousOwner = table.Column<string>(maxLength: 250, nullable: true),
                    nextOwner = table.Column<string>(maxLength: 250, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OwnerChangeHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OwnerChangeHistory_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProposalMaster",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    proposalTypeId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    proposalStatusId = table.Column<int>(nullable: true),
                    proposalNo = table.Column<string>(maxLength: 100, nullable: true),
                    proposalDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProposalMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProposalMaster_ProposalStatus_proposalStatusId",
                        column: x => x.proposalStatusId,
                        principalSchema: "CRM",
                        principalTable: "ProposalStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProposalMaster_ProposalType_proposalTypeId",
                        column: x => x.proposalTypeId,
                        principalSchema: "CRM",
                        principalTable: "ProposalType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PatientHistory",
                schema: "HOSPTL",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    diseaseInfoId = table.Column<int>(nullable: true),
                    diseaseStartDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PatientHistory_DiseaseInfo_diseaseInfoId",
                        column: x => x.diseaseInfoId,
                        principalSchema: "HOSPTL",
                        principalTable: "DiseaseInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PatientHistory_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PatientService",
                schema: "HOSPTL",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    itemCategoryId = table.Column<int>(nullable: true),
                    serviceFromDate = table.Column<DateTime>(nullable: true),
                    serviceToDate = table.Column<DateTime>(nullable: true),
                    billingType = table.Column<string>(maxLength: 20, nullable: true),
                    billAmount = table.Column<decimal>(nullable: true),
                    iscomplete = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientService", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PatientService_ItemCategory_itemCategoryId",
                        column: x => x.itemCategoryId,
                        principalSchema: "SCM",
                        principalTable: "ItemCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PatientService_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesCollection",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    collectionAmount = table.Column<decimal>(nullable: true),
                    collectionNumber = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    mobileAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesCollection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesCollection_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesInvoiceMaster",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    TAXOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    lcNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    lcDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    UserId = table.Column<string>(nullable: false),
                    ClaimType = table.Column<string>(nullable: true),
                    ClaimValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(nullable: false),
                    ProviderKey = table.Column<string>(nullable: false),
                    ProviderDisplayName = table.Column<string>(nullable: true),
                    UserId = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(nullable: false),
                    RoleId = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(nullable: false),
                    LoginProvider = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    Value = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Notifications",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    senderId = table.Column<string>(nullable: true),
                    receiverId = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    title = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    isRead = table.Column<int>(nullable: false),
                    url = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: false),
                    statusName = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Notifications_AspNetUsers_receiverId",
                        column: x => x.receiverId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Notifications_AspNetUsers_senderId",
                        column: x => x.senderId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Teams",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    teamId = table.Column<int>(nullable: true),
                    areaId = table.Column<int>(nullable: true),
                    teamCode = table.Column<string>(maxLength: 50, nullable: true),
                    memberName = table.Column<string>(maxLength: 250, nullable: true),
                    moduleId = table.Column<int>(nullable: true),
                    aspnetuserId = table.Column<string>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Teams", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Teams_Area_areaId",
                        column: x => x.areaId,
                        principalSchema: "CRM",
                        principalTable: "Area",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Teams_AspNetUsers_aspnetuserId",
                        column: x => x.aspnetuserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Teams_ERPModules_moduleId",
                        column: x => x.moduleId,
                        principalTable: "ERPModules",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Teams_Teams_teamId",
                        column: x => x.teamId,
                        principalTable: "Teams",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StoreAssign",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    aspnetuserId = table.Column<string>(nullable: true),
                    isDefault = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreAssign", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreAssign_AspNetUsers_aspnetuserId",
                        column: x => x.aspnetuserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreAssign_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LedgerRelation",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ledgerId = table.Column<int>(nullable: true),
                    subLedgerId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LedgerRelation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LedgerRelation_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LedgerRelation_Ledger_subLedgerId",
                        column: x => x.subLedgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProfitAndLossAccountDetails",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    profitAndLossAccountMasterId = table.Column<int>(nullable: true),
                    ledgerId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProfitAndLossAccountDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProfitAndLossAccountDetails_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProfitAndLossAccountDetails_ProfitAndLossAccountMaster_profitAndLossAccountMasterId",
                        column: x => x.profitAndLossAccountMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "ProfitAndLossAccountMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SubLedger",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ledgerId = table.Column<int>(nullable: true),
                    accountCode = table.Column<string>(nullable: true),
                    accountName = table.Column<string>(nullable: true),
                    aliasName = table.Column<string>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SubLedger", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SubLedger_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ItemSpecification",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemId = table.Column<int>(nullable: true),
                    SKUNumber = table.Column<string>(nullable: true),
                    specificationName = table.Column<string>(maxLength: 250, nullable: true),
                    specImageUrl = table.Column<string>(nullable: true),
                    reOrderLevel = table.Column<int>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    unitId = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    isQR = table.Column<int>(nullable: true),
                    isMostUsed = table.Column<int>(nullable: true),
                    isBuild = table.Column<int>(nullable: true),
                    ledgerId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemSpecification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemSpecification_Item_itemId",
                        column: x => x.itemId,
                        principalSchema: "SCM",
                        principalTable: "Item",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ItemSpecification_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ItemSpecification_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ItemSpecification_Unit_unitId",
                        column: x => x.unitId,
                        principalSchema: "SCM",
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Organization",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organizationName = table.Column<string>(maxLength: 250, nullable: true),
                    organizationNameBn = table.Column<string>(maxLength: 250, nullable: true),
                    orgCode = table.Column<string>(maxLength: 50, nullable: true),
                    LicenseNumber = table.Column<string>(maxLength: 100, nullable: true),
                    eTinNumber = table.Column<string>(maxLength: 100, nullable: true),
                    VATNumber = table.Column<string>(maxLength: 100, nullable: true),
                    email = table.Column<string>(maxLength: 100, nullable: true),
                    alternativeEmail = table.Column<string>(maxLength: 100, nullable: true),
                    mobile = table.Column<string>(maxLength: 100, nullable: true),
                    phone = table.Column<string>(maxLength: 100, nullable: true),
                    website = table.Column<string>(maxLength: 120, nullable: true),
                    ledgerId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Organization", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Organization_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BalanceSheetDetails",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    noteMasterId = table.Column<int>(nullable: true),
                    ledgerId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BalanceSheetDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BalanceSheetDetails_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BalanceSheetDetails_NoteMaster_noteMasterId",
                        column: x => x.noteMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "NoteMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GratuityPolicyDetail",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fromYear = table.Column<int>(nullable: true),
                    toYear = table.Column<int>(nullable: true),
                    Times = table.Column<decimal>(nullable: true),
                    gratuityPolicyId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GratuityPolicyDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GratuityPolicyDetail_GratuityPolicyMaster_gratuityPolicyId",
                        column: x => x.gratuityPolicyId,
                        principalSchema: "HR",
                        principalTable: "GratuityPolicyMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AutoVoucherMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    autoVoucherNameId = table.Column<int>(nullable: true),
                    voucherTypeId = table.Column<int>(nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    description = table.Column<string>(maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AutoVoucherMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AutoVoucherMaster_AutoVoucherName_autoVoucherNameId",
                        column: x => x.autoVoucherNameId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AutoVoucherName",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AutoVoucherMaster_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AutoVoucherMaster_VoucherType_voucherTypeId",
                        column: x => x.voucherTypeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VoucherMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    refNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    voucherDate = table.Column<DateTime>(type: "Date", nullable: true),
                    chequeDate = table.Column<DateTime>(nullable: true),
                    chequeNumber = table.Column<string>(nullable: true),
                    voucherTypeId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    voucherAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    isPosted = table.Column<int>(nullable: true),
                    fiscalYearId = table.Column<int>(nullable: true),
                    taxYearId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    autoVoucherNameId = table.Column<int>(nullable: true),
                    fundSourceId = table.Column<int>(nullable: true),
                    fileNo = table.Column<string>(nullable: true),
                    projectId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VoucherMaster_AutoVoucherName_autoVoucherNameId",
                        column: x => x.autoVoucherNameId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AutoVoucherName",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherMaster_SalaryYear_fiscalYearId",
                        column: x => x.fiscalYearId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherMaster_FundSource_fundSourceId",
                        column: x => x.fundSourceId,
                        principalSchema: "ACCOUNT",
                        principalTable: "FundSource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherMaster_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherMaster_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherMaster_VoucherType_voucherTypeId",
                        column: x => x.voucherTypeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalMatrix",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    matrixTypeId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    nextApproverId = table.Column<int>(nullable: true),
                    approverTypeId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: false),
                    isLeave = table.Column<int>(nullable: true),
                    sequenceNo = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalMatrix", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApprovalMatrix_ApproverType_approverTypeId",
                        column: x => x.approverTypeId,
                        principalSchema: "SCM",
                        principalTable: "ApproverType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApprovalMatrix_MatrixType_matrixTypeId",
                        column: x => x.matrixTypeId,
                        principalSchema: "SCM",
                        principalTable: "MatrixType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApprovalMatrix_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DailyProgressReports",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ApplicationUserId = table.Column<string>(nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    reportDate = table.Column<DateTime>(nullable: true),
                    siteCondition = table.Column<string>(nullable: true),
                    siteWeather = table.Column<string>(nullable: true),
                    reportNo = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    statusId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DailyProgressReports", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DailyProgressReports_AspNetUsers_ApplicationUserId",
                        column: x => x.ApplicationUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DailyProgressReports_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    iouNo = table.Column<string>(type: "nvarchar(120)", nullable: true),
                    iouDate = table.Column<DateTime>(nullable: true),
                    expectedDeliveryDate = table.Column<DateTime>(nullable: true),
                    attentionTo = table.Column<string>(type: "nvarchar(120)", nullable: true),
                    attentionToId = table.Column<int>(nullable: true),
                    iouStatus = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    projectId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUMaster_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUPaymentMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    iouPaymentNo = table.Column<string>(type: "nvarchar(120)", nullable: true),
                    iouPaymentDate = table.Column<DateTime>(nullable: true),
                    attentionTo = table.Column<string>(type: "nvarchar(320)", nullable: true),
                    attentionToId = table.Column<int>(nullable: true),
                    iouPaymentStatus = table.Column<int>(nullable: false),
                    paymentBy = table.Column<string>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUPaymentMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUPaymentMaster_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectConstructionLocations",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    ApplicationUserId = table.Column<string>(nullable: true),
                    locationPosition = table.Column<string>(nullable: true),
                    floorNo = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectConstructionLocations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectConstructionLocations_AspNetUsers_ApplicationUserId",
                        column: x => x.ApplicationUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectConstructionLocations_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramActivityProgres",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programActivityId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramActivityProgres", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramActivityProgres_ProgramActivity_programActivityId",
                        column: x => x.programActivityId,
                        principalSchema: "PM",
                        principalTable: "ProgramActivity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramAttendee",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programMasterId = table.Column<int>(nullable: true),
                    programActivityId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    village = table.Column<string>(nullable: true),
                    benificiaryTypeId = table.Column<int>(nullable: true),
                    idTypeId = table.Column<int>(nullable: true),
                    idNumber = table.Column<string>(nullable: true),
                    dateRangeId = table.Column<int>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    genderId = table.Column<int>(nullable: true),
                    peopleTypeId = table.Column<int>(nullable: true),
                    benificiaryActiveTypeId = table.Column<int>(nullable: true),
                    isEthnic = table.Column<string>(nullable: true),
                    isFemaleHeaded = table.Column<string>(nullable: true),
                    isLactatingMother = table.Column<string>(nullable: true),
                    address = table.Column<string>(nullable: true),
                    contact = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramAttendee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_BenificiaryActiveType_benificiaryActiveTypeId",
                        column: x => x.benificiaryActiveTypeId,
                        principalSchema: "PM",
                        principalTable: "BenificiaryActiveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_BenificiaryType_benificiaryTypeId",
                        column: x => x.benificiaryTypeId,
                        principalSchema: "PM",
                        principalTable: "BenificiaryType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_DateRange_dateRangeId",
                        column: x => x.dateRangeId,
                        principalSchema: "PM",
                        principalTable: "DateRange",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_Gender_genderId",
                        column: x => x.genderId,
                        principalSchema: "PM",
                        principalTable: "Gender",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_IdType_idTypeId",
                        column: x => x.idTypeId,
                        principalSchema: "PM",
                        principalTable: "IdType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_PeopleType_peopleTypeId",
                        column: x => x.peopleTypeId,
                        principalSchema: "PM",
                        principalTable: "PeopleType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_ProgramActivity_programActivityId",
                        column: x => x.programActivityId,
                        principalSchema: "PM",
                        principalTable: "ProgramActivity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramAttendee_ProgramMaster_programMasterId",
                        column: x => x.programMasterId,
                        principalSchema: "PM",
                        principalTable: "ProgramMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramPlanLocation",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programActivityId = table.Column<int>(nullable: true),
                    programYearId = table.Column<int>(nullable: true),
                    monthName = table.Column<string>(maxLength: 10, nullable: true),
                    planQuantity = table.Column<decimal>(nullable: true),
                    targetQuantity = table.Column<decimal>(nullable: true),
                    executionQuantity = table.Column<decimal>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    maillingAddress = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramPlanLocation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramPlanLocation_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramPlanLocation_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramPlanLocation_ProgramActivity_programActivityId",
                        column: x => x.programActivityId,
                        principalSchema: "PM",
                        principalTable: "ProgramActivity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramPlanLocation_ProgramYear_programYearId",
                        column: x => x.programYearId,
                        principalSchema: "PM",
                        principalTable: "ProgramYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramPlanLocation_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProgramWorkPlan",
                schema: "PM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    programActivityId = table.Column<int>(nullable: true),
                    programYearId = table.Column<int>(nullable: true),
                    firstMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    secondMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    thirdMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    fourthMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    fifthMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    sixthMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    seventhMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    eighthMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    ninethMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    tenthMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    eleventhMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    twelvethMonth = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    subTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProgramWorkPlan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProgramWorkPlan_ProgramActivity_programActivityId",
                        column: x => x.programActivityId,
                        principalSchema: "PM",
                        principalTable: "ProgramActivity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProgramWorkPlan_ProgramYear_programYearId",
                        column: x => x.programYearId,
                        principalSchema: "PM",
                        principalTable: "ProgramYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ActivityDetails",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityMasterId = table.Column<int>(nullable: false),
                    contactsId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivityDetails_ActivityMaster_activityMasterId",
                        column: x => x.activityMasterId,
                        principalSchema: "CRM",
                        principalTable: "ActivityMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ActivityStatusProgress",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityMasterId = table.Column<int>(nullable: true),
                    activityStatusId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityStatusProgress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivityStatusProgress_ActivityMaster_activityMasterId",
                        column: x => x.activityMasterId,
                        principalSchema: "CRM",
                        principalTable: "ActivityMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityStatusProgress_ActivityStatus_activityStatusId",
                        column: x => x.activityStatusId,
                        principalSchema: "CRM",
                        principalTable: "ActivityStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProposalDetail",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    proposalMasterId = table.Column<int>(nullable: true),
                    proposalParticularsId = table.Column<int>(nullable: true),
                    particularsValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProposalDetail_ProposalMaster_proposalMasterId",
                        column: x => x.proposalMasterId,
                        principalSchema: "CRM",
                        principalTable: "ProposalMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProposalDetail_ProposalParticulars_proposalParticularsId",
                        column: x => x.proposalParticularsId,
                        principalSchema: "CRM",
                        principalTable: "ProposalParticulars",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RelProductProposal",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productId = table.Column<int>(nullable: true),
                    proposalMasterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelProductProposal", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelProductProposal_Product_productId",
                        column: x => x.productId,
                        principalSchema: "CRM",
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelProductProposal_ProposalMaster_proposalMasterId",
                        column: x => x.proposalMasterId,
                        principalSchema: "CRM",
                        principalTable: "ProposalMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RepSalesCollection",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesCollectionId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    collectionAmount = table.Column<decimal>(nullable: true),
                    collectionNumber = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    mobileAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepSalesCollection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RepSalesCollection_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepSalesCollection_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepSalesCollection_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepSalesCollection_SalesCollection_salesCollectionId",
                        column: x => x.salesCollectionId,
                        principalSchema: "Sales",
                        principalTable: "SalesCollection",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RepSalesInvoiceMaster",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    TAXOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    lcNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    lcDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepSalesInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RepSalesInvoiceMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepSalesInvoiceMaster_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "Sales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesCollectionDetail",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesCollectionId = table.Column<int>(nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesCollectionDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesCollectionDetail_SalesCollection_salesCollectionId",
                        column: x => x.salesCollectionId,
                        principalSchema: "Sales",
                        principalTable: "SalesCollection",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollectionDetail_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "Sales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ActivityTeam",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityMasterId = table.Column<int>(nullable: true),
                    teamId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityTeam", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivityTeam_ActivityMaster_activityMasterId",
                        column: x => x.activityMasterId,
                        principalSchema: "CRM",
                        principalTable: "ActivityMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityTeam_Teams_teamId",
                        column: x => x.teamId,
                        principalTable: "Teams",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ColdActivityTeams",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    coldActivityMastersId = table.Column<int>(nullable: false),
                    teamId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ColdActivityTeams", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ColdActivityTeams_ColdActivityMasters_coldActivityMastersId",
                        column: x => x.coldActivityMastersId,
                        principalSchema: "CRM",
                        principalTable: "ColdActivityMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ColdActivityTeams_Teams_teamId",
                        column: x => x.teamId,
                        principalTable: "Teams",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TeamBudgets",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    teamId = table.Column<int>(nullable: true),
                    companyBudgetsId = table.Column<int>(nullable: true),
                    initialAmount = table.Column<decimal>(nullable: true),
                    surveillence = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TeamBudgets", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TeamBudgets_CompanyBudgets_companyBudgetsId",
                        column: x => x.companyBudgetsId,
                        principalSchema: "CRM",
                        principalTable: "CompanyBudgets",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TeamBudgets_Teams_teamId",
                        column: x => x.teamId,
                        principalTable: "Teams",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankChargeMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bankBranchDetailsId = table.Column<int>(nullable: true),
                    AccountName = table.Column<string>(maxLength: 300, nullable: true),
                    AccountNumber = table.Column<string>(maxLength: 30, nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true),
                    Status = table.Column<string>(maxLength: 10, nullable: true),
                    AccountType = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankChargeMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankChargeMaster_BankBranchDetails_bankBranchDetailsId",
                        column: x => x.bankBranchDetailsId,
                        principalSchema: "CRM",
                        principalTable: "BankBranchDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankChargeMaster_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankReconciliationMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sbuId = table.Column<int>(nullable: true),
                    ReconRef = table.Column<string>(nullable: true),
                    closingBalance = table.Column<decimal>(nullable: true),
                    bankStatementClosingBalance = table.Column<decimal>(nullable: true),
                    closingDate = table.Column<DateTime>(nullable: true),
                    reconDate = table.Column<DateTime>(nullable: true),
                    reconFromDate = table.Column<DateTime>(nullable: true),
                    reconToDate = table.Column<DateTime>(nullable: true),
                    ledgerId = table.Column<int>(nullable: true),
                    fiscalYearId = table.Column<int>(nullable: true),
                    taxYearId = table.Column<int>(nullable: true),
                    fundSourceId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankReconciliationMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankReconciliationMaster_SalaryYear_fiscalYearId",
                        column: x => x.fiscalYearId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankReconciliationMaster_FundSource_fundSourceId",
                        column: x => x.fundSourceId,
                        principalSchema: "ACCOUNT",
                        principalTable: "FundSource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankReconciliationMaster_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankReconciliationMaster_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankReconciliationMaster_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FDRInvestmentDetail",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fDRInvesmentMasterId = table.Column<int>(nullable: true),
                    RefNo = table.Column<string>(nullable: true),
                    Rate = table.Column<decimal>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    OpenDate = table.Column<DateTime>(nullable: true),
                    MaturityDate = table.Column<DateTime>(nullable: true),
                    DestinationType = table.Column<string>(nullable: true),
                    bankId = table.Column<int>(nullable: true),
                    DestinationBranch = table.Column<string>(nullable: true),
                    ChequeNo = table.Column<string>(nullable: true),
                    LinkledgerRelationId = table.Column<int>(nullable: true),
                    ReceiveLinkLedgerId = table.Column<int>(nullable: true),
                    FormulaType = table.Column<string>(nullable: true),
                    ChequeUpload = table.Column<string>(nullable: true),
                    UploadDoc = table.Column<string>(nullable: true),
                    UploadMemo = table.Column<string>(nullable: true),
                    MaturityStatus = table.Column<string>(nullable: true),
                    ApprovalStatus = table.Column<int>(nullable: false),
                    ParentFDRID = table.Column<int>(nullable: true),
                    TotalInterest = table.Column<decimal>(nullable: true),
                    Tenure = table.Column<string>(nullable: true),
                    TenureType = table.Column<string>(nullable: true),
                    NPBAddress = table.Column<string>(nullable: true),
                    encashRecLedgerRelId = table.Column<int>(nullable: true),
                    encashBankCharge = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FDRInvestmentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FDRInvestmentDetail_LedgerRelation_LinkledgerRelationId",
                        column: x => x.LinkledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FDRInvestmentDetail_LedgerRelation_ReceiveLinkLedgerId",
                        column: x => x.ReceiveLinkLedgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FDRInvestmentDetail_Bank_bankId",
                        column: x => x.bankId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FDRInvestmentDetail_LedgerRelation_encashRecLedgerRelId",
                        column: x => x.encashRecLedgerRelId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FDRInvestmentDetail_FDRInvesment_fDRInvesmentMasterId",
                        column: x => x.fDRInvesmentMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "FDRInvesment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpeningBalance",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    transectionModeId = table.Column<int>(nullable: true),
                    balanceUpTo = table.Column<DateTime>(nullable: true),
                    branchUnitId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpeningBalance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OpeningBalance_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OpeningBalance_TransectionMode_transectionModeId",
                        column: x => x.transectionModeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "TransectionMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UploadedVoucherData",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    refNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    voucherNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    voucherDate = table.Column<DateTime>(type: "Date", nullable: true),
                    accountName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    accountCode = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    description = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    sbuName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true),
                    projectName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    chequeNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    chequeDate = table.Column<DateTime>(type: "Date", nullable: true),
                    transectionModeId = table.Column<int>(nullable: true),
                    voucherTypeId = table.Column<int>(nullable: true),
                    fiscalYearId = table.Column<int>(nullable: true),
                    taxYearId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    fundSourceId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true),
                    hasWrongData = table.Column<int>(nullable: true),
                    isProcessed = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    isActive = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UploadedVoucherData", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_SalaryYear_fiscalYearId",
                        column: x => x.fiscalYearId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_FundSource_fundSourceId",
                        column: x => x.fundSourceId,
                        principalSchema: "ACCOUNT",
                        principalTable: "FundSource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_TransectionMode_transectionModeId",
                        column: x => x.transectionModeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "TransectionMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UploadedVoucherData_VoucherType_voucherTypeId",
                        column: x => x.voucherTypeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VoucherSetting",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyId = table.Column<int>(nullable: false),
                    voucherTypeId = table.Column<int>(nullable: true),
                    bankAccountLedgerId = table.Column<int>(nullable: true),
                    cashAccountLedgerId = table.Column<int>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherSetting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VoucherSetting_LedgerRelation_bankAccountLedgerId",
                        column: x => x.bankAccountLedgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherSetting_LedgerRelation_cashAccountLedgerId",
                        column: x => x.cashAccountLedgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherSetting_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_VoucherSetting_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProfitAndLossAccountProcess",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    profitAndLossAccountDetailsId = table.Column<int>(nullable: true),
                    currentYearAmount = table.Column<decimal>(nullable: true),
                    previousYearAmount = table.Column<decimal>(nullable: true),
                    currentYear = table.Column<int>(nullable: true),
                    previousYear = table.Column<int>(nullable: true),
                    isLocked = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProfitAndLossAccountProcess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProfitAndLossAccountProcess_ProfitAndLossAccountDetails_profitAndLossAccountDetailsId",
                        column: x => x.profitAndLossAccountDetailsId,
                        principalSchema: "ACCOUNT",
                        principalTable: "ProfitAndLossAccountDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DisItemPriceFixing",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    price = table.Column<decimal>(nullable: true),
                    discountPersent = table.Column<decimal>(nullable: true),
                    VAT = table.Column<decimal>(nullable: true),
                    barCodeImage = table.Column<byte[]>(nullable: true),
                    barCode = table.Column<string>(maxLength: 50, nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DisItemPriceFixing", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DisItemPriceFixing_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PackageDetail",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    quantity = table.Column<int>(nullable: true),
                    discountPersent = table.Column<decimal>(nullable: true),
                    packageMasterId = table.Column<int>(nullable: true),
                    isfree = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PackageDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PackageDetail_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PackageDetail_PackageMaster_packageMasterId",
                        column: x => x.packageMasterId,
                        principalSchema: "Distribution",
                        principalTable: "PackageMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PatientServiceDetail",
                schema: "HOSPTL",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    patientServiceId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientServiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PatientServiceDetail_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PatientServiceDetail_PatientService_patientServiceId",
                        column: x => x.patientServiceId,
                        principalSchema: "HOSPTL",
                        principalTable: "PatientService",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ItemPriceFixing",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    price = table.Column<decimal>(nullable: true),
                    discountPersent = table.Column<decimal>(nullable: true),
                    VAT = table.Column<decimal>(nullable: true),
                    barCodeImage = table.Column<byte[]>(nullable: true),
                    barCode = table.Column<string>(maxLength: 50, nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemPriceFixing", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemPriceFixing_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesMenu",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesMenuCategoryId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    menuName = table.Column<string>(maxLength: 300, nullable: true),
                    fileName = table.Column<string>(maxLength: 500, nullable: true),
                    activeStatus = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesMenu", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesMenu_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesMenu_SalesMenuCategory_salesMenuCategoryId",
                        column: x => x.salesMenuCategoryId,
                        principalSchema: "OSales",
                        principalTable: "SalesMenuCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesMenuOpeningBalance",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    openingDate = table.Column<DateTime>(nullable: true),
                    openingQty = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesMenuOpeningBalance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesMenuOpeningBalance_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ItemPriceFixing",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    price = table.Column<decimal>(nullable: true),
                    discountPersent = table.Column<decimal>(nullable: true),
                    VAT = table.Column<decimal>(nullable: true),
                    barCodeImage = table.Column<byte[]>(nullable: true),
                    barCode = table.Column<string>(maxLength: 50, nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemPriceFixing", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemPriceFixing_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BOMMasters",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bomNo = table.Column<string>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    bomItemDescription = table.Column<string>(nullable: true),
                    operationType = table.Column<string>(nullable: true),
                    quantity = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    isactive = table.Column<int>(nullable: true),
                    bomDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOMMasters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BOMMasters_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TransferDetail",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    transferMasterId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    qty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    rate = table.Column<decimal>(type: "decimal(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransferDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransferDetail_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferDetail_TransferMaster_transferMasterId",
                        column: x => x.transferMasterId,
                        principalSchema: "Purchase",
                        principalTable: "TransferMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FeatureItems",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    userId = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    statusId = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FeatureItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FeatureItems_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ItemReqDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemReqMasterId = table.Column<int>(nullable: true),
                    itemspecificationId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ItemReqDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ItemReqDetails_ItemReqMaster_itemReqMasterId",
                        column: x => x.itemReqMasterId,
                        principalSchema: "SCM",
                        principalTable: "ItemReqMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ItemReqDetails_ItemSpecification_itemspecificationId",
                        column: x => x.itemspecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OpeningStock",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    openingQty = table.Column<decimal>(nullable: true),
                    openingRate = table.Column<decimal>(nullable: true),
                    openingValue = table.Column<decimal>(nullable: true),
                    balanceUpTo = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OpeningStock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OpeningStock_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectWiseEquipment",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectWiseEquipment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectWiseEquipment_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectWiseEquipment_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SpecificationDetail",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    specificationCategoryId = table.Column<int>(nullable: true),
                    value = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecificationDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecificationDetail_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SpecificationDetail_SpecificationCategory_specificationCategoryId",
                        column: x => x.specificationCategoryId,
                        principalSchema: "SCM",
                        principalTable: "SpecificationCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CustomerProductWarranty",
                schema: "SEBA",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    salesDate = table.Column<DateTime>(nullable: true),
                    warrantyStartDate = table.Column<DateTime>(nullable: true),
                    warrantyEndDate = table.Column<DateTime>(nullable: true),
                    warrantyDescription = table.Column<string>(nullable: true),
                    invoiceNo = table.Column<string>(maxLength: 50, nullable: true),
                    serialNo = table.Column<string>(maxLength: 50, nullable: true),
                    modelNo = table.Column<string>(maxLength: 80, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerProductWarranty", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CustomerProductWarranty_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CustomerProductWarranty_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillPaymentMaster",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    billPaymentDate = table.Column<DateTime>(nullable: true),
                    billPaymentNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    billPaymentBy = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    billNumber = table.Column<string>(nullable: true),
                    receivedNotes = table.Column<string>(nullable: true),
                    isPartialReceived = table.Column<int>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillPaymentMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillPaymentMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillPaymentMaster_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillPaymentMaster_Organization_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrdersMasters",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    poNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    poDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    deliveryDate = table.Column<DateTime>(nullable: true),
                    rfqRef = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    billToLocation = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    taxPercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    vatPercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    taxAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    vatAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    netTotal = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrdersMasters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrdersMasters_Organization_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Address",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    addressTypeId = table.Column<int>(nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Address", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Address_AddressTypes_addressTypeId",
                        column: x => x.addressTypeId,
                        principalTable: "AddressTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RFQPriceMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rFQMasterId = table.Column<int>(nullable: true),
                    supplierId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RFQPriceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RFQPriceMaster_RFQMaster_rFQMasterId",
                        column: x => x.rFQMasterId,
                        principalSchema: "SCM",
                        principalTable: "RFQMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RFQPriceMaster_Organization_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RFQSupDetail",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rFQMasterId = table.Column<int>(nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: true),
                    supplierId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RFQSupDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RFQSupDetail_RFQMaster_rFQMasterId",
                        column: x => x.rFQMasterId,
                        principalSchema: "SCM",
                        principalTable: "RFQMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RFQSupDetail_Organization_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SupplierItemInfo",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    itemId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SupplierItemInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SupplierItemInfo_Item_itemId",
                        column: x => x.itemId,
                        principalSchema: "SCM",
                        principalTable: "Item",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SupplierItemInfo_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RegistrationForm",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    typeOfNDAAgree = table.Column<int>(nullable: true),
                    tradeLicenseNumber = table.Column<string>(nullable: true),
                    eTinNumber = table.Column<string>(nullable: true),
                    vatNumber = table.Column<string>(nullable: true),
                    contactPersonName = table.Column<string>(nullable: true),
                    contactNumber = table.Column<string>(nullable: true),
                    companyEmail = table.Column<string>(nullable: true),
                    alternativeEmail = table.Column<string>(nullable: true),
                    procurementCategoryId = table.Column<int>(nullable: true),
                    productServiceName = table.Column<string>(nullable: true),
                    partialDisagreement = table.Column<string>(nullable: true),
                    loginId = table.Column<string>(nullable: true),
                    password = table.Column<string>(nullable: true),
                    approveType = table.Column<int>(nullable: true),
                    organizationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RegistrationForm", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RegistrationForm_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RegistrationForm_CSItemCategory_procurementCategoryId",
                        column: x => x.procurementCategoryId,
                        principalSchema: "SCM",
                        principalTable: "CSItemCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BalanceSheetProcess",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    balanceSheetDetailsId = table.Column<int>(nullable: true),
                    currentYearAmount = table.Column<decimal>(nullable: true),
                    previousYearAmount = table.Column<decimal>(nullable: true),
                    currentYear = table.Column<int>(nullable: true),
                    previousYear = table.Column<int>(nullable: true),
                    isLocked = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BalanceSheetProcess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BalanceSheetProcess_BalanceSheetDetails_balanceSheetDetailsId",
                        column: x => x.balanceSheetDetailsId,
                        principalSchema: "ACCOUNT",
                        principalTable: "BalanceSheetDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AutoVoucherDetail",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    autoVoucherMasterId = table.Column<int>(nullable: true),
                    transectionModeId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AutoVoucherDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AutoVoucherDetail_AutoVoucherMaster_autoVoucherMasterId",
                        column: x => x.autoVoucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AutoVoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AutoVoucherDetail_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AutoVoucherDetail_TransectionMode_transectionModeId",
                        column: x => x.transectionModeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "TransectionMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUAdjustmentMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    adjustmentNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    adjustmentAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    advanceAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    adjustmentDate = table.Column<DateTime>(type: "Date", nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    iOUVoucherNos = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    advLedgerRelationId = table.Column<int>(nullable: true),
                    adjustmentBy = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUAdjustmentMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentMaster_LedgerRelation_advLedgerRelationId",
                        column: x => x.advLedgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentMaster_VoucherMaster_voucherMasterId",
                        column: x => x.voucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUVoucherMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    voucherDate = table.Column<DateTime>(type: "Date", nullable: true),
                    voucherNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    voucherAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    paymentBy = table.Column<int>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    autoVoucherNameId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true),
                    subLedgerRelationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUVoucherMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUVoucherMaster_AutoVoucherName_autoVoucherNameId",
                        column: x => x.autoVoucherNameId,
                        principalSchema: "ACCOUNT",
                        principalTable: "AutoVoucherName",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUVoucherMaster_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUVoucherMaster_LedgerRelation_subLedgerRelationId",
                        column: x => x.subLedgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUVoucherMaster_VoucherMaster_voucherMasterId",
                        column: x => x.voucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VoucherDetail",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    voucherId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: false),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    transectionModeId = table.Column<int>(nullable: true),
                    isPrincAcc = table.Column<int>(nullable: true),
                    accountName = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VoucherDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VoucherDetail_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_VoucherDetail_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherDetail_TransectionMode_transectionModeId",
                        column: x => x.transectionModeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "TransectionMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VoucherDetail_VoucherMaster_voucherId",
                        column: x => x.voucherId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalMatrixlog",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    matrixTypeId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    nextApproverId = table.Column<int>(nullable: true),
                    approverTypeId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: false),
                    sequenceNo = table.Column<int>(nullable: false),
                    approvalMatrixId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalMatrixlog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApprovalMatrixlog_ApprovalMatrix_approvalMatrixId",
                        column: x => x.approvalMatrixId,
                        principalSchema: "SCM",
                        principalTable: "ApprovalMatrix",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApprovalMatrixlog_ApproverType_approverTypeId",
                        column: x => x.approverTypeId,
                        principalSchema: "SCM",
                        principalTable: "ApproverType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApprovalMatrixlog_MatrixType_matrixTypeId",
                        column: x => x.matrixTypeId,
                        principalSchema: "SCM",
                        principalTable: "MatrixType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApprovalMatrixlog_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SiteConstraints",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    progressReportId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    statusId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SiteConstraints", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SiteConstraints_DailyProgressReports_progressReportId",
                        column: x => x.progressReportId,
                        principalSchema: "SCM",
                        principalTable: "DailyProgressReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SiteEquipments",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    progressReportId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    categoryName = table.Column<string>(nullable: true),
                    equipmentNo = table.Column<string>(nullable: true),
                    equipmentHours = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SiteEquipments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SiteEquipments_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SiteEquipments_DailyProgressReports_progressReportId",
                        column: x => x.progressReportId,
                        principalSchema: "SCM",
                        principalTable: "DailyProgressReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SiteManpowers",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    progressReportId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    planned = table.Column<string>(nullable: true),
                    actual = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    unitName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SiteManpowers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SiteManpowers_DailyProgressReports_progressReportId",
                        column: x => x.progressReportId,
                        principalSchema: "SCM",
                        principalTable: "DailyProgressReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SiteMaterials",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    progressReportId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    forDay = table.Column<string>(nullable: true),
                    tillDate = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SiteMaterials", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SiteMaterials_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SiteMaterials_DailyProgressReports_progressReportId",
                        column: x => x.progressReportId,
                        principalSchema: "SCM",
                        principalTable: "DailyProgressReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SiteVisitors",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    progressReportId = table.Column<int>(nullable: true),
                    visitorName = table.Column<string>(nullable: true),
                    visitorOrganization = table.Column<string>(nullable: true),
                    mobileNo = table.Column<string>(nullable: true),
                    imagePath = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SiteVisitors", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SiteVisitors_DailyProgressReports_progressReportId",
                        column: x => x.progressReportId,
                        principalSchema: "SCM",
                        principalTable: "DailyProgressReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DeisbarseDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    disbarseId = table.Column<int>(nullable: true),
                    IOUId = table.Column<int>(nullable: true),
                    statusId = table.Column<int>(nullable: true),
                    issueBy = table.Column<string>(nullable: true),
                    issueDate = table.Column<DateTime>(nullable: true),
                    userId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeisbarseDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeisbarseDetails_IOUMaster_IOUId",
                        column: x => x.IOUId,
                        principalSchema: "SCM",
                        principalTable: "IOUMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DeisbarseDetails_DisbarseMaster_disbarseId",
                        column: x => x.disbarseId,
                        principalSchema: "SCM",
                        principalTable: "DisbarseMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectGridLocations",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    projectConstructionLocationId = table.Column<int>(nullable: true),
                    gridLocation = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectGridLocations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectGridLocations_ProjectConstructionLocations_projectConstructionLocationId",
                        column: x => x.projectConstructionLocationId,
                        principalSchema: "SCM",
                        principalTable: "ProjectConstructionLocations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RepSalesCollectionDetail",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    repSalesCollectionId = table.Column<int>(nullable: true),
                    salesCollectionDetailId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepSalesCollectionDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RepSalesCollectionDetail_RepSalesCollection_repSalesCollectionId",
                        column: x => x.repSalesCollectionId,
                        principalSchema: "Sales",
                        principalTable: "RepSalesCollection",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepSalesCollectionDetail_SalesCollectionDetail_salesCollectionDetailId",
                        column: x => x.salesCollectionDetailId,
                        principalSchema: "Sales",
                        principalTable: "SalesCollectionDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MemberBudgets",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    teamBudgetsId = table.Column<int>(nullable: true),
                    teamId = table.Column<int>(nullable: true),
                    initialAmount = table.Column<decimal>(nullable: true),
                    surveillence = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MemberBudgets", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MemberBudgets_TeamBudgets_teamBudgetsId",
                        column: x => x.teamBudgetsId,
                        principalSchema: "CRM",
                        principalTable: "TeamBudgets",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MemberBudgets_Teams_teamId",
                        column: x => x.teamId,
                        principalTable: "Teams",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FDREncashment",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fDRInvestmentDetailId = table.Column<int>(nullable: true),
                    encashDate = table.Column<DateTime>(nullable: true),
                    provisionAmount = table.Column<decimal>(nullable: true),
                    receiveAmount = table.Column<decimal>(nullable: true),
                    exciseDuty = table.Column<decimal>(nullable: true),
                    percentDiff = table.Column<decimal>(nullable: true),
                    diffAmount = table.Column<decimal>(nullable: true),
                    advanceTax = table.Column<decimal>(nullable: true),
                    typeOfDiff = table.Column<int>(nullable: true),
                    prematurePercent = table.Column<decimal>(nullable: true),
                    accountName = table.Column<string>(nullable: true),
                    principleBankId = table.Column<int>(nullable: true),
                    principleBankAccountNumber = table.Column<string>(nullable: true),
                    interestBankId = table.Column<int>(nullable: true),
                    interestBankAccountNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    encashStatus = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FDREncashment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FDREncashment_FDRInvestmentDetail_fDRInvestmentDetailId",
                        column: x => x.fDRInvestmentDetailId,
                        principalSchema: "ACCOUNT",
                        principalTable: "FDRInvestmentDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FDREncashment_Bank_interestBankId",
                        column: x => x.interestBankId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FDREncashment_Bank_principleBankId",
                        column: x => x.principleBankId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DisItemPriceFixingDetails",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    price = table.Column<decimal>(nullable: true),
                    discountPersent = table.Column<decimal>(nullable: true),
                    VAT = table.Column<decimal>(nullable: true),
                    barCodeImage = table.Column<byte[]>(nullable: true),
                    barCode = table.Column<string>(maxLength: 50, nullable: true),
                    disItemPriceFixingId = table.Column<int>(nullable: true),
                    distributorTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DisItemPriceFixingDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DisItemPriceFixingDetails_DisItemPriceFixing_disItemPriceFixingId",
                        column: x => x.disItemPriceFixingId,
                        principalSchema: "Distribution",
                        principalTable: "DisItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DisItemPriceFixingDetails_DistributorType_distributorTypeId",
                        column: x => x.distributorTypeId,
                        principalSchema: "Distribution",
                        principalTable: "DistributorType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BarCodeInformation",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceId = table.Column<int>(nullable: true),
                    barCodeImage = table.Column<byte[]>(nullable: true),
                    barCode = table.Column<string>(maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BarCodeInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BarCodeInformation_ItemPriceFixing_itemPriceId",
                        column: x => x.itemPriceId,
                        principalSchema: "OSales",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MenuMealTypeMapping",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesMenuId = table.Column<int>(nullable: true),
                    mealTypeId = table.Column<int>(nullable: true),
                    activeStatus = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MenuMealTypeMapping", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MenuMealTypeMapping_MealType_mealTypeId",
                        column: x => x.mealTypeId,
                        principalSchema: "OSales",
                        principalTable: "MealType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MenuMealTypeMapping_SalesMenu_salesMenuId",
                        column: x => x.salesMenuId,
                        principalSchema: "OSales",
                        principalTable: "SalesMenu",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OfferDetails",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceFixingId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    offerMasterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OfferDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OfferDetails_ItemPriceFixing_itemPriceFixingId",
                        column: x => x.itemPriceFixingId,
                        principalSchema: "POS",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OfferDetails_OfferMaster_offerMasterId",
                        column: x => x.offerMasterId,
                        principalSchema: "POS",
                        principalTable: "OfferMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosInvoiceDetail",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceFixingId = table.Column<int>(nullable: true),
                    posInvoiceMasterId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosInvoiceDetail_ItemPriceFixing_itemPriceFixingId",
                        column: x => x.itemPriceFixingId,
                        principalSchema: "POS",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosInvoiceDetail_PosInvoiceMaster_posInvoiceMasterId",
                        column: x => x.posInvoiceMasterId,
                        principalSchema: "POS",
                        principalTable: "PosInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosRepInvoiceDetail",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceFixingId = table.Column<int>(nullable: true),
                    posRepInvoiceMasterId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosRepInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosRepInvoiceDetail_ItemPriceFixing_itemPriceFixingId",
                        column: x => x.itemPriceFixingId,
                        principalSchema: "POS",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosRepInvoiceDetail_PosRepInvoiceMaster_posRepInvoiceMasterId",
                        column: x => x.posRepInvoiceMasterId,
                        principalSchema: "POS",
                        principalTable: "PosRepInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BOMDetails",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bOMMasterId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    rate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    wastePercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOMDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BOMDetails_BOMMasters_bOMMasterId",
                        column: x => x.bOMMasterId,
                        principalSchema: "PROD",
                        principalTable: "BOMMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BOMDetails_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BOMOverheadDetail",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bOMMasterId = table.Column<int>(nullable: true),
                    overheadCostId = table.Column<int>(nullable: true),
                    ledgerId = table.Column<int>(nullable: true),
                    cost = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    costType = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BOMOverheadDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BOMOverheadDetail_BOMMasters_bOMMasterId",
                        column: x => x.bOMMasterId,
                        principalSchema: "PROD",
                        principalTable: "BOMMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BOMOverheadDetail_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BOMOverheadDetail_OverheadCosts_overheadCostId",
                        column: x => x.overheadCostId,
                        principalSchema: "PROD",
                        principalTable: "OverheadCosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionPlans",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    planNumber = table.Column<string>(nullable: true),
                    planDate = table.Column<DateTime>(nullable: true),
                    targetDate = table.Column<DateTime>(nullable: true),
                    bOMMasterId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionPlans", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionPlans_BOMMasters_bOMMasterId",
                        column: x => x.bOMMasterId,
                        principalSchema: "PROD",
                        principalTable: "BOMMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProblemDetail",
                schema: "SEBA",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    problemMasterId = table.Column<int>(nullable: true),
                    customerProductWarrantyId = table.Column<int>(nullable: true),
                    problemTitle = table.Column<string>(maxLength: 300, nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProblemDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProblemDetail_CustomerProductWarranty_customerProductWarrantyId",
                        column: x => x.customerProductWarrantyId,
                        principalSchema: "SEBA",
                        principalTable: "CustomerProductWarranty",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProblemDetail_ProblemMaster_problemMasterId",
                        column: x => x.problemMasterId,
                        principalSchema: "SEBA",
                        principalTable: "ProblemMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrdersDetails",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    purchaseId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    description = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    quantity = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    rate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    currencyId = table.Column<int>(nullable: true),
                    vatPercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    taxPercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrdersDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrdersDetails_Currency_currencyId",
                        column: x => x.currencyId,
                        principalSchema: "SCM",
                        principalTable: "Currency",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrdersDetails_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrdersDetails_PurchaseOrdersMasters_purchaseId",
                        column: x => x.purchaseId,
                        principalSchema: "Purchase",
                        principalTable: "PurchaseOrdersMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RFQDocumentAttachmentDetail",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rFQPriceMasterId = table.Column<int>(nullable: true),
                    fileName = table.Column<string>(nullable: true),
                    fileType = table.Column<string>(nullable: true),
                    filePath = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RFQDocumentAttachmentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RFQDocumentAttachmentDetail_RFQPriceMaster_rFQPriceMasterId",
                        column: x => x.rFQPriceMasterId,
                        principalSchema: "SCM",
                        principalTable: "RFQPriceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AuthorizedPerson",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    registrationFormId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    contactNumber = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AuthorizedPerson", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AuthorizedPerson_RegistrationForm_registrationFormId",
                        column: x => x.registrationFormId,
                        principalSchema: "VEMS",
                        principalTable: "RegistrationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankInformation",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    registrationFormId = table.Column<int>(nullable: true),
                    accountName = table.Column<string>(nullable: true),
                    accountNumber = table.Column<string>(nullable: true),
                    bankName = table.Column<string>(nullable: true),
                    branchName = table.Column<string>(nullable: true),
                    routingNumber = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankInformation_RegistrationForm_registrationFormId",
                        column: x => x.registrationFormId,
                        principalSchema: "VEMS",
                        principalTable: "RegistrationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CompanyInformation",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    registrationFormId = table.Column<int>(nullable: true),
                    typeOfVendor = table.Column<string>(nullable: true),
                    businessNature = table.Column<string>(nullable: true),
                    officeTelephone = table.Column<string>(nullable: true),
                    dateOfEstablishment = table.Column<DateTime>(nullable: true),
                    permanentEmployee = table.Column<int>(nullable: true),
                    investment = table.Column<decimal>(nullable: true),
                    turnover = table.Column<decimal>(nullable: true),
                    liquidityRatio = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CompanyInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CompanyInformation_RegistrationForm_registrationFormId",
                        column: x => x.registrationFormId,
                        principalSchema: "VEMS",
                        principalTable: "RegistrationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "InterestedArea",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    registrationFormId = table.Column<int>(nullable: true),
                    productName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InterestedArea", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InterestedArea_RegistrationForm_registrationFormId",
                        column: x => x.registrationFormId,
                        principalSchema: "VEMS",
                        principalTable: "RegistrationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TopOfficial",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    registrationFormId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    contactNumber = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TopOfficial", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TopOfficial_RegistrationForm_registrationFormId",
                        column: x => x.registrationFormId,
                        principalSchema: "VEMS",
                        principalTable: "RegistrationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VendorAddress",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    registrationFormId = table.Column<int>(nullable: true),
                    addressTypeId = table.Column<int>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VendorAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VendorAddress_AddressTypes_addressTypeId",
                        column: x => x.addressTypeId,
                        principalTable: "AddressTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VendorAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VendorAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VendorAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VendorAddress_RegistrationForm_registrationFormId",
                        column: x => x.registrationFormId,
                        principalSchema: "VEMS",
                        principalTable: "RegistrationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VendorAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VendorAttachment",
                schema: "VEMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    registrationFormId = table.Column<int>(nullable: true),
                    fileFor = table.Column<string>(nullable: true),
                    fileNmae = table.Column<string>(nullable: true),
                    filePath = table.Column<string>(nullable: true),
                    fileType = table.Column<string>(nullable: true),
                    remark = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VendorAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VendorAttachment_RegistrationForm_registrationFormId",
                        column: x => x.registrationFormId,
                        principalSchema: "VEMS",
                        principalTable: "RegistrationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUAdjustmentSpend",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    iOUAdjustmentMasterId = table.Column<int>(nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    type = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUAdjustmentSpend", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentSpend_IOUAdjustmentMaster_iOUAdjustmentMasterId",
                        column: x => x.iOUAdjustmentMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "IOUAdjustmentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentSpend_VoucherMaster_voucherMasterId",
                        column: x => x.voucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUAdjustmentlog",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    iOUAdjustmentMasterId = table.Column<int>(nullable: true),
                    iOUVoucherMasterId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUAdjustmentlog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentlog_IOUAdjustmentMaster_iOUAdjustmentMasterId",
                        column: x => x.iOUAdjustmentMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "IOUAdjustmentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentlog_IOUVoucherMaster_iOUVoucherMasterId",
                        column: x => x.iOUVoucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "IOUVoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUVoucherLog",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    IOUVoucherMasterId = table.Column<int>(nullable: true),
                    IOUId = table.Column<int>(nullable: true),
                    iouAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    paymentAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    adjustmentAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUVoucherLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUVoucherLog_IOUMaster_IOUId",
                        column: x => x.IOUId,
                        principalSchema: "SCM",
                        principalTable: "IOUMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUVoucherLog_IOUVoucherMaster_IOUVoucherMasterId",
                        column: x => x.IOUVoucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "IOUVoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankReconcileDetail",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bankReconcileMasterId = table.Column<int>(nullable: true),
                    voucherDetailId = table.Column<int>(nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    chequeNo = table.Column<string>(nullable: true),
                    isChecked = table.Column<int>(nullable: true),
                    chackDate = table.Column<DateTime>(nullable: true),
                    bankClearingDate = table.Column<DateTime>(nullable: true),
                    unCheckDate = table.Column<DateTime>(nullable: true),
                    drAmount = table.Column<decimal>(nullable: true),
                    crAmount = table.Column<decimal>(nullable: true),
                    transectionMode = table.Column<int>(nullable: true),
                    specialBranchUnitId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankReconcileDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankReconcileDetail_BankReconciliationMaster_bankReconcileMasterId",
                        column: x => x.bankReconcileMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "BankReconciliationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankReconcileDetail_SpecialBranchUnit_specialBranchUnitId",
                        column: x => x.specialBranchUnitId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankReconcileDetail_VoucherDetail_voucherDetailId",
                        column: x => x.voucherDetailId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankReconcileDetail_VoucherMaster_voucherMasterId",
                        column: x => x.voucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CostCentreAllocation",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    costCentreId = table.Column<int>(nullable: true),
                    voucherDetailId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CostCentreAllocation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CostCentreAllocation_CostCentre_costCentreId",
                        column: x => x.costCentreId,
                        principalSchema: "ACCOUNT",
                        principalTable: "CostCentre",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CostCentreAllocation_VoucherDetail_voucherDetailId",
                        column: x => x.voucherDetailId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUAdjustmentDetail",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    iOUAdjustmentMasterId = table.Column<int>(nullable: true),
                    voucherDetailId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    adjAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUAdjustmentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentDetail_IOUAdjustmentMaster_iOUAdjustmentMasterId",
                        column: x => x.iOUAdjustmentMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "IOUAdjustmentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentDetail_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentDetail_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentDetail_VoucherDetail_voucherDetailId",
                        column: x => x.voucherDetailId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectLocationActivityDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    projectGridLocationId = table.Column<int>(nullable: true),
                    progressActivityTypeId = table.Column<int>(nullable: true),
                    unitId = table.Column<int>(nullable: true),
                    qty = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectLocationActivityDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectLocationActivityDetails_WorkProgressActivityTypes_progressActivityTypeId",
                        column: x => x.progressActivityTypeId,
                        principalSchema: "SCM",
                        principalTable: "WorkProgressActivityTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectLocationActivityDetails_ProjectGridLocations_projectGridLocationId",
                        column: x => x.projectGridLocationId,
                        principalSchema: "SCM",
                        principalTable: "ProjectGridLocations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectLocationActivityDetails_Unit_unitId",
                        column: x => x.unitId,
                        principalSchema: "SCM",
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkProgressActivityDescriptions",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    progressReportId = table.Column<int>(nullable: true),
                    progressActivityTypeId = table.Column<int>(nullable: true),
                    locationName = table.Column<string>(nullable: true),
                    projectConstructionLocationId = table.Column<int>(nullable: true),
                    gridName = table.Column<string>(nullable: true),
                    projectGridLocationId = table.Column<int>(nullable: true),
                    unit = table.Column<string>(nullable: true),
                    totalQty = table.Column<decimal>(nullable: true),
                    forDayPlanned = table.Column<string>(nullable: true),
                    forDayAchived = table.Column<string>(nullable: true),
                    nextDayPlanned = table.Column<string>(nullable: true),
                    cumAchived = table.Column<string>(nullable: true),
                    compPercent = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkProgressActivityDescriptions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkProgressActivityDescriptions_WorkProgressActivityTypes_progressActivityTypeId",
                        column: x => x.progressActivityTypeId,
                        principalSchema: "SCM",
                        principalTable: "WorkProgressActivityTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkProgressActivityDescriptions_DailyProgressReports_progressReportId",
                        column: x => x.progressReportId,
                        principalSchema: "SCM",
                        principalTable: "DailyProgressReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkProgressActivityDescriptions_ProjectConstructionLocations_projectConstructionLocationId",
                        column: x => x.projectConstructionLocationId,
                        principalSchema: "SCM",
                        principalTable: "ProjectConstructionLocations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkProgressActivityDescriptions_ProjectGridLocations_projectGridLocationId",
                        column: x => x.projectGridLocationId,
                        principalSchema: "SCM",
                        principalTable: "ProjectGridLocations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosSalesReturnInvoiceDetail",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceFixingId = table.Column<int>(nullable: true),
                    salesReturnInvoiceMasterId = table.Column<int>(nullable: true),
                    salesInvoiceDetailId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosSalesReturnInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosSalesReturnInvoiceDetail_ItemPriceFixing_itemPriceFixingId",
                        column: x => x.itemPriceFixingId,
                        principalSchema: "POS",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosSalesReturnInvoiceDetail_PosInvoiceDetail_salesInvoiceDetailId",
                        column: x => x.salesInvoiceDetailId,
                        principalSchema: "POS",
                        principalTable: "PosInvoiceDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosSalesReturnInvoiceDetail_PosSalesReturnInvoiceMaster_salesReturnInvoiceMasterId",
                        column: x => x.salesReturnInvoiceMasterId,
                        principalSchema: "POS",
                        principalTable: "PosSalesReturnInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionBatchs",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productionPlanId = table.Column<int>(nullable: true),
                    batchNumber = table.Column<string>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    perDayTargetQuantity = table.Column<decimal>(nullable: true),
                    expectedEndDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionBatchs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionBatchs_ProductionPlans_productionPlanId",
                        column: x => x.productionPlanId,
                        principalSchema: "PROD",
                        principalTable: "ProductionPlans",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ActivityWiseItemDetials",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    activityDetailsId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    unitId = table.Column<int>(nullable: true),
                    qty = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityWiseItemDetials", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivityWiseItemDetials_ProjectLocationActivityDetails_activityDetailsId",
                        column: x => x.activityDetailsId,
                        principalSchema: "SCM",
                        principalTable: "ProjectLocationActivityDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityWiseItemDetials_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityWiseItemDetials_Unit_unitId",
                        column: x => x.unitId,
                        principalSchema: "SCM",
                        principalTable: "Unit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionMasters",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productionNo = table.Column<string>(maxLength: 150, nullable: true),
                    productionDate = table.Column<DateTime>(nullable: true),
                    bOMId = table.Column<int>(nullable: true),
                    bomQty = table.Column<decimal>(nullable: true),
                    batchId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(maxLength: 350, nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    operationType = table.Column<string>(maxLength: 50, nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionMasters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionMasters_BOMMasters_bOMId",
                        column: x => x.bOMId,
                        principalSchema: "PROD",
                        principalTable: "BOMMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionMasters_ProductionBatchs_batchId",
                        column: x => x.batchId,
                        principalSchema: "PROD",
                        principalTable: "ProductionBatchs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionMasters_Organization_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "HR",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionRequsitionMasters",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productionPlanId = table.Column<int>(nullable: true),
                    productionBatchId = table.Column<int>(nullable: true),
                    requsitionNumber = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    requisitionQty = table.Column<decimal>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    isClose = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionRequsitionMasters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionRequsitionMasters_ProductionBatchs_productionBatchId",
                        column: x => x.productionBatchId,
                        principalSchema: "PROD",
                        principalTable: "ProductionBatchs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionRequsitionMasters_ProductionPlans_productionPlanId",
                        column: x => x.productionPlanId,
                        principalSchema: "PROD",
                        principalTable: "ProductionPlans",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ActivityWiseDailyProgressDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    workProgressActivityId = table.Column<int>(nullable: true),
                    itemDetialId = table.Column<int>(nullable: true),
                    materialReceived = table.Column<decimal>(nullable: true),
                    materialConsumtion = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActivityWiseDailyProgressDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActivityWiseDailyProgressDetails_ActivityWiseItemDetials_itemDetialId",
                        column: x => x.itemDetialId,
                        principalSchema: "SCM",
                        principalTable: "ActivityWiseItemDetials",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ActivityWiseDailyProgressDetails_WorkProgressActivityDescriptions_workProgressActivityId",
                        column: x => x.workProgressActivityId,
                        principalSchema: "SCM",
                        principalTable: "WorkProgressActivityDescriptions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionDetails",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productionId = table.Column<int>(nullable: true),
                    bOMDetailId = table.Column<int>(nullable: true),
                    qty = table.Column<decimal>(nullable: true),
                    defaultPrice = table.Column<decimal>(nullable: true),
                    wastePercent = table.Column<decimal>(nullable: true),
                    defaultSupplierId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionDetails_BOMDetails_bOMDetailId",
                        column: x => x.bOMDetailId,
                        principalSchema: "PROD",
                        principalTable: "BOMDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionDetails_ProductionMasters_productionId",
                        column: x => x.productionId,
                        principalSchema: "PROD",
                        principalTable: "ProductionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionRequsitionDetails",
                schema: "PROD",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productionRequsitionMasterId = table.Column<int>(nullable: true),
                    BOMDetailId = table.Column<int>(nullable: true),
                    requsitionQuantity = table.Column<decimal>(nullable: true),
                    rate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionRequsitionDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionRequsitionDetails_BOMDetails_BOMDetailId",
                        column: x => x.BOMDetailId,
                        principalSchema: "PROD",
                        principalTable: "BOMDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionRequsitionDetails_ProductionRequsitionMasters_productionRequsitionMasterId",
                        column: x => x.productionRequsitionMasterId,
                        principalSchema: "PROD",
                        principalTable: "ProductionRequsitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Address",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: false),
                    addressTypeId = table.Column<int>(nullable: false),
                    maillingAddress = table.Column<string>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    postOfficeId = table.Column<int>(nullable: true),
                    postOfficeName = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    fax = table.Column<string>(nullable: true),
                    website = table.Column<string>(nullable: true),
                    phone = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    addressCategoryId = table.Column<int>(nullable: true),
                    resourceId = table.Column<int>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Address", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Address_addressCategories_addressCategoryId",
                        column: x => x.addressCategoryId,
                        principalTable: "addressCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_AddressTypes_addressTypeId",
                        column: x => x.addressTypeId,
                        principalTable: "AddressTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Address_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "HR",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_PostOffices_postOfficeId",
                        column: x => x.postOfficeId,
                        principalTable: "PostOffices",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeCode = table.Column<string>(maxLength: 50, nullable: false),
                    nationalID = table.Column<string>(maxLength: 100, nullable: true),
                    PassportNo = table.Column<string>(nullable: true),
                    PassportIssueDate = table.Column<string>(nullable: true),
                    PassportExDate = table.Column<string>(nullable: true),
                    birthIdentificationNo = table.Column<string>(maxLength: 100, nullable: true),
                    govtID = table.Column<string>(maxLength: 250, nullable: true),
                    gpfNomineeName = table.Column<string>(maxLength: 250, nullable: true),
                    gpfAcNo = table.Column<string>(maxLength: 50, nullable: true),
                    nameEnglish = table.Column<string>(maxLength: 250, nullable: true),
                    nameBangla = table.Column<string>(maxLength: 250, nullable: true),
                    fatherNameEnglish = table.Column<string>(maxLength: 250, nullable: true),
                    fatherNameBangla = table.Column<string>(maxLength: 250, nullable: true),
                    fatherNationality = table.Column<string>(nullable: true),
                    fatherNID = table.Column<string>(nullable: true),
                    fatherPassportNo = table.Column<string>(nullable: true),
                    fatherPassportIssueDate = table.Column<string>(nullable: true),
                    fatherPassportExDate = table.Column<string>(nullable: true),
                    fatherOccupationId = table.Column<int>(nullable: true),
                    fatherEmail = table.Column<string>(nullable: true),
                    fatherMobile = table.Column<string>(nullable: true),
                    fatherAddress = table.Column<string>(nullable: true),
                    motherNameEnglish = table.Column<string>(maxLength: 250, nullable: true),
                    motherNameBangla = table.Column<string>(maxLength: 250, nullable: true),
                    motherNationality = table.Column<string>(nullable: true),
                    motherNID = table.Column<string>(nullable: true),
                    motherPassportNo = table.Column<string>(nullable: true),
                    motherPassportIssueDate = table.Column<string>(nullable: true),
                    motherPassportExDate = table.Column<string>(nullable: true),
                    motherOccupationId = table.Column<int>(nullable: true),
                    motherEmail = table.Column<string>(nullable: true),
                    motherMobile = table.Column<string>(nullable: true),
                    motherAddress = table.Column<string>(nullable: true),
                    nationality = table.Column<string>(maxLength: 100, nullable: true),
                    disability = table.Column<string>(maxLength: 3, nullable: true),
                    disabilityTypeId = table.Column<int>(nullable: true),
                    favouriteColor = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    joiningDatePresentWorkstation = table.Column<DateTime>(nullable: true),
                    joiningDateGovtService = table.Column<DateTime>(nullable: true),
                    dateofregularity = table.Column<DateTime>(nullable: true),
                    dateOfPermanent = table.Column<DateTime>(nullable: true),
                    LPRDate = table.Column<DateTime>(nullable: true),
                    PRLStartDate = table.Column<DateTime>(nullable: true),
                    PRLEndDate = table.Column<DateTime>(nullable: true),
                    gender = table.Column<string>(maxLength: 10, nullable: true),
                    birthPlace = table.Column<string>(maxLength: 250, nullable: true),
                    maritalStatus = table.Column<string>(maxLength: 20, nullable: true),
                    qualification = table.Column<string>(nullable: true),
                    religionId = table.Column<int>(nullable: true),
                    employeeTypeId = table.Column<int>(nullable: true),
                    contructualType = table.Column<string>(nullable: true),
                    activityStatus = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    tin = table.Column<string>(maxLength: 30, nullable: true),
                    batch = table.Column<string>(nullable: true),
                    bloodGroup = table.Column<string>(maxLength: 20, nullable: true),
                    freedomFighter = table.Column<bool>(nullable: true),
                    freedomFighterNo = table.Column<string>(maxLength: 150, nullable: true),
                    telephoneOffice = table.Column<string>(maxLength: 50, nullable: true),
                    telephoneResidence = table.Column<string>(maxLength: 50, nullable: true),
                    pabx = table.Column<string>(maxLength: 50, nullable: true),
                    emailAddress = table.Column<string>(maxLength: 150, nullable: true),
                    emailAddressPersonal = table.Column<string>(maxLength: 150, nullable: true),
                    mobileNumberOffice = table.Column<string>(maxLength: 50, nullable: true),
                    mobileNumberPersonal = table.Column<string>(maxLength: 50, nullable: true),
                    specialSkill = table.Column<string>(maxLength: 250, nullable: true),
                    height = table.Column<int>(nullable: true),
                    weight = table.Column<int>(nullable: true),
                    seniorityNumber = table.Column<string>(maxLength: 50, nullable: true),
                    designation = table.Column<string>(nullable: true),
                    skypeId = table.Column<string>(maxLength: 150, nullable: true),
                    FacebookId = table.Column<string>(maxLength: 150, nullable: true),
                    TwitterId = table.Column<string>(maxLength: 150, nullable: true),
                    InstagramId = table.Column<string>(maxLength: 150, nullable: true),
                    LinkedInId = table.Column<string>(maxLength: 150, nullable: true),
                    WhatsAppId = table.Column<string>(maxLength: 150, nullable: true),
                    post = table.Column<int>(nullable: true),
                    designationCheck = table.Column<int>(nullable: true),
                    joiningDesignation = table.Column<string>(maxLength: 250, nullable: true),
                    JoinDesignationId = table.Column<int>(nullable: true),
                    DateOfRetirement = table.Column<DateTime>(nullable: true),
                    natureOfRequitment = table.Column<string>(maxLength: 100, nullable: true),
                    homeDistrict = table.Column<string>(maxLength: 100, nullable: true),
                    DivisionId = table.Column<int>(nullable: true),
                    BranchName = table.Column<string>(nullable: true),
                    problem = table.Column<string>(nullable: true),
                    branchId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    isManager = table.Column<int>(nullable: true),
                    hrDivisionId = table.Column<int>(nullable: true),
                    pNSId = table.Column<int>(nullable: true),
                    orgType = table.Column<string>(maxLength: 100, nullable: true),
                    ApplicationUserId = table.Column<string>(nullable: true),
                    isApproved = table.Column<int>(nullable: true),
                    shiftGroupId = table.Column<int>(nullable: true),
                    employeeStatusId = table.Column<int>(nullable: true),
                    hrProgramId = table.Column<int>(nullable: true),
                    hrUnitId = table.Column<int>(nullable: true),
                    locationId = table.Column<int>(nullable: true),
                    functionInfoId = table.Column<int>(nullable: true),
                    isEthnicMinority = table.Column<int>(nullable: true),
                    ethnicMinorityType = table.Column<string>(nullable: true),
                    disablityType = table.Column<string>(nullable: true),
                    salaryStatus = table.Column<int>(nullable: true),
                    salaryStatusComment = table.Column<string>(nullable: true),
                    bloodDonateStatus = table.Column<int>(nullable: true),
                    approveStatus = table.Column<int>(nullable: true),
                    prlDate = table.Column<DateTime>(nullable: true),
                    refLetterNo = table.Column<string>(nullable: true),
                    fileNo = table.Column<string>(nullable: true),
                    presentPosting = table.Column<string>(nullable: true),
                    lastPromotionDate = table.Column<DateTime>(nullable: true),
                    lastWorkingDate = table.Column<DateTime>(nullable: true),
                    lastDesignationId = table.Column<int>(nullable: true),
                    lastTransferDate = table.Column<DateTime>(nullable: true),
                    lastSalary = table.Column<decimal>(nullable: true),
                    identificationSign = table.Column<string>(nullable: true),
                    prevOrganisationResp = table.Column<string>(nullable: true),
                    significantAchivement = table.Column<string>(nullable: true),
                    areaOfProficiency = table.Column<string>(nullable: true),
                    joiningLocation = table.Column<string>(nullable: true),
                    placeOfPosting = table.Column<string>(nullable: true),
                    postingDate = table.Column<DateTime>(nullable: true),
                    probationStart = table.Column<DateTime>(nullable: true),
                    probationEnd = table.Column<DateTime>(nullable: true),
                    bondDateStart = table.Column<DateTime>(nullable: true),
                    bondDateEnd = table.Column<DateTime>(nullable: true),
                    customRoleId = table.Column<int>(nullable: true),
                    isFestival = table.Column<int>(nullable: true),
                    DesiCode = table.Column<string>(nullable: true),
                    PRLreportDateBn = table.Column<string>(nullable: true),
                    PRLreportDateEn = table.Column<DateTime>(nullable: true),
                    joiningGradeId = table.Column<int>(nullable: true),
                    joiningGradeName = table.Column<string>(nullable: true),
                    joiningBasic = table.Column<decimal>(nullable: true),
                    currentGradeId = table.Column<int>(nullable: true),
                    currentBasic = table.Column<decimal>(nullable: true),
                    seniorityLevel = table.Column<string>(nullable: true),
                    expertiseId = table.Column<int>(nullable: true),
                    sbAccount = table.Column<string>(nullable: true),
                    specialRole = table.Column<string>(nullable: true),
                    SupervisorCode = table.Column<string>(nullable: true),
                    SupervisorName = table.Column<string>(nullable: true),
                    dateOfResignation = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_AspNetUsers_ApplicationUserId",
                        column: x => x.ApplicationUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_Divisions_DivisionId",
                        column: x => x.DivisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_Designation_JoinDesignationId",
                        column: x => x.JoinDesignationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_SpecialBranchUnit_branchId",
                        column: x => x.branchId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_SalaryGrade_currentGradeId",
                        column: x => x.currentGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_CustomRole_customRoleId",
                        column: x => x.customRoleId,
                        principalSchema: "HR",
                        principalTable: "CustomRole",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_DisabilityType_disabilityTypeId",
                        column: x => x.disabilityTypeId,
                        principalSchema: "HR",
                        principalTable: "DisabilityType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_ServiceStatus_employeeStatusId",
                        column: x => x.employeeStatusId,
                        principalSchema: "HR",
                        principalTable: "ServiceStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_EmployeeType_employeeTypeId",
                        column: x => x.employeeTypeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_EmpExpertise_expertiseId",
                        column: x => x.expertiseId,
                        principalSchema: "HR",
                        principalTable: "EmpExpertise",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_Occupation_fatherOccupationId",
                        column: x => x.fatherOccupationId,
                        principalSchema: "HR",
                        principalTable: "Occupation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_FunctionInfo_functionInfoId",
                        column: x => x.functionInfoId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_HrProgram_hrProgramId",
                        column: x => x.hrProgramId,
                        principalSchema: "HR",
                        principalTable: "HrProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_SalaryGrade_joiningGradeId",
                        column: x => x.joiningGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_Designation_lastDesignationId",
                        column: x => x.lastDesignationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_Occupation_motherOccupationId",
                        column: x => x.motherOccupationId,
                        principalSchema: "HR",
                        principalTable: "Occupation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_PNS_pNSId",
                        column: x => x.pNSId,
                        principalSchema: "HR",
                        principalTable: "PNS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_Religion_religionId",
                        column: x => x.religionId,
                        principalSchema: "HR",
                        principalTable: "Religion",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeInfo_ShiftGroupMaster_shiftGroupId",
                        column: x => x.shiftGroupId,
                        principalSchema: "HR",
                        principalTable: "ShiftGroupMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "loanPolicyNews",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    jobDuration = table.Column<int>(maxLength: 300, nullable: true),
                    loanDuration = table.Column<int>(nullable: true),
                    loanPolicyName = table.Column<string>(nullable: true),
                    maximumLoanAmount = table.Column<decimal>(nullable: true),
                    loanInterestRate = table.Column<decimal>(nullable: true),
                    loanNoOfInstallment = table.Column<int>(nullable: true),
                    isActive = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_loanPolicyNews", x => x.Id);
                    table.ForeignKey(
                        name: "FK_loanPolicyNews_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_loanPolicyNews_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SendEmailLogStatus",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    sender = table.Column<string>(nullable: true),
                    receiver = table.Column<string>(nullable: true),
                    receiverEmail = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    module = table.Column<string>(nullable: true),
                    itemName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SendEmailLogStatus", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SendEmailLogStatus_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Signature",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    signatureTypeId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    signatureSlNo = table.Column<int>(nullable: true),
                    active = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Signature", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Signature_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Signature_SignatureType_signatureTypeId",
                        column: x => x.signatureTypeId,
                        principalSchema: "ACCOUNT",
                        principalTable: "SignatureType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ACRPrevJobHistory",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    company = table.Column<string>(nullable: true),
                    position = table.Column<string>(nullable: true),
                    jobstart = table.Column<DateTime>(nullable: true),
                    jobend = table.Column<DateTime>(nullable: true),
                    type = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRPrevJobHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACRPrevJobHistory_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ACRPrevJobHistory_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IRCSignatory",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    serialNo = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IRCSignatory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IRCSignatory_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesTeamDeployment",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salesLevelId = table.Column<int>(nullable: true),
                    areaId = table.Column<int>(nullable: true),
                    salesTeamDeploymentId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesTeamDeployment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesTeamDeployment_Area_areaId",
                        column: x => x.areaId,
                        principalSchema: "CRM",
                        principalTable: "Area",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesTeamDeployment_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesTeamDeployment_SalesLevel_salesLevelId",
                        column: x => x.salesLevelId,
                        principalSchema: "Distribution",
                        principalTable: "SalesLevel",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesTeamDeployment_SalesTeamDeployment_salesTeamDeploymentId",
                        column: x => x.salesTeamDeploymentId,
                        principalSchema: "Distribution",
                        principalTable: "SalesTeamDeployment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentMaster",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    documentCategoryId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    documentName = table.Column<string>(maxLength: 400, nullable: true),
                    documentNo = table.Column<string>(maxLength: 100, nullable: true),
                    docCreateDate = table.Column<DateTime>(nullable: true),
                    docCreateBy = table.Column<string>(maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentMaster_DocumentCategory_documentCategoryId",
                        column: x => x.documentCategoryId,
                        principalSchema: "Doc",
                        principalTable: "DocumentCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DocumentMaster_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DocumentMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FixationIntegration",
                schema: "Fixation",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    joiningDate = table.Column<DateTime>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    grade = table.Column<string>(nullable: true),
                    currentGrade = table.Column<string>(nullable: true),
                    lastIncrementDate = table.Column<DateTime>(nullable: true),
                    postingPlace = table.Column<string>(nullable: true),
                    initialBasic = table.Column<decimal>(nullable: true),
                    increment = table.Column<decimal>(nullable: true),
                    startingBasic = table.Column<decimal>(nullable: true),
                    newBasicPoint = table.Column<decimal>(nullable: true),
                    basicPay = table.Column<decimal>(nullable: true),
                    lastPromotionDate = table.Column<DateTime>(nullable: true),
                    lastPromotionDatePrev = table.Column<DateTime>(nullable: true),
                    punishmentDate = table.Column<DateTime>(nullable: true),
                    branchName = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    lastDesignationId = table.Column<int>(nullable: true),
                    fixation = table.Column<string>(nullable: true),
                    brachCode = table.Column<string>(nullable: true),
                    divisionCode = table.Column<string>(nullable: true),
                    promotionScale = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    fixationTypeId = table.Column<int>(nullable: true),
                    fixaTypeId = table.Column<int>(nullable: true),
                    fixationType = table.Column<string>(nullable: true),
                    fixationGradeId = table.Column<int>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    refNo = table.Column<string>(nullable: true),
                    nextIncrementDate = table.Column<DateTime>(nullable: true),
                    slNo = table.Column<int>(nullable: true),
                    fileNo = table.Column<int>(nullable: true),
                    letterDate = table.Column<DateTime>(nullable: true),
                    note = table.Column<string>(nullable: true),
                    batchId = table.Column<int>(nullable: true),
                    isApproved = table.Column<int>(nullable: true),
                    reportHeader = table.Column<string>(nullable: true),
                    particular = table.Column<string>(nullable: true),
                    employeeStatusId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    salaryStructureCreated = table.Column<int>(nullable: true),
                    newSignatory = table.Column<string>(nullable: true),
                    newSignatoryName = table.Column<string>(nullable: true),
                    newSignatoryDesig = table.Column<string>(nullable: true),
                    newSignatoryPhone = table.Column<string>(nullable: true),
                    categoryId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FixationIntegration", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FixationIntegration_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FixationIntegration_FixaType_fixaTypeId",
                        column: x => x.fixaTypeId,
                        principalSchema: "Fixation",
                        principalTable: "FixaType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FixationIntegration_SalaryGrade_fixationGradeId",
                        column: x => x.fixationGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FixationIntegration_Designation_lastDesignationId",
                        column: x => x.lastDesignationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IncrementHeld",
                schema: "Fixation",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    empName = table.Column<string>(nullable: true),
                    reason = table.Column<string>(nullable: true),
                    expireDate = table.Column<DateTime>(nullable: true),
                    orderNo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IncrementHeld", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IncrementHeld_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PatientRepresentative",
                schema: "HOSPTL",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    representativeName = table.Column<string>(maxLength: 150, nullable: true),
                    representativeAddress = table.Column<string>(maxLength: 550, nullable: true),
                    representativeMobile = table.Column<string>(maxLength: 15, nullable: true),
                    representativeEmail = table.Column<string>(maxLength: 100, nullable: true),
                    representativeDesignation = table.Column<int>(maxLength: 200, nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    isactive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PatientRepresentative", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PatientRepresentative_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PatientRepresentative_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    supervisorCode = table.Column<string>(maxLength: 20, nullable: true),
                    supervisorName = table.Column<string>(maxLength: 250, nullable: true),
                    supervisorDesg = table.Column<string>(maxLength: 100, nullable: true),
                    signatoryCode = table.Column<string>(maxLength: 20, nullable: true),
                    signatoryName = table.Column<string>(maxLength: 250, nullable: true),
                    signatoryDesg = table.Column<string>(maxLength: 100, nullable: true),
                    year = table.Column<string>(maxLength: 10, nullable: true),
                    advanceComment = table.Column<string>(nullable: true),
                    score = table.Column<int>(nullable: false),
                    remarks = table.Column<string>(nullable: true),
                    finalStatus = table.Column<string>(maxLength: 200, nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    fileUrl = table.Column<string>(maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AcrInitiate",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    acrType = table.Column<string>(nullable: true),
                    isArchive = table.Column<int>(nullable: true),
                    acrDate = table.Column<DateTime>(nullable: true),
                    archivedate = table.Column<DateTime>(nullable: true),
                    lateReason = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrInitiate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrInitiate_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ACRSchedule",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    employeeInfoId = table.Column<int>(nullable: true),
                    startTime = table.Column<DateTime>(nullable: false),
                    endTime = table.Column<DateTime>(nullable: false),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACRSchedule_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Address",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    roadNumber = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false),
                    prCountry = table.Column<string>(nullable: true),
                    prNo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Address", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Address_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Address_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Address_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Allegation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    allegationDetail = table.Column<string>(nullable: true),
                    allegationUrl = table.Column<string>(nullable: true),
                    clarification = table.Column<string>(nullable: true),
                    clarificationUrl = table.Column<string>(nullable: true),
                    management = table.Column<string>(nullable: true),
                    managementUrl = table.Column<string>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Allegation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Allegation_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AppreciationLetter",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    letterNo = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppreciationLetter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AppreciationLetter_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    approvalTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApprovalMaster_ApprovalType_approvalTypeId",
                        column: x => x.approvalTypeId,
                        principalSchema: "HR",
                        principalTable: "ApprovalType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApprovalMaster_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AttendanceUpdateApply",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    applicationNo = table.Column<string>(maxLength: 20, nullable: true),
                    applyDateTime = table.Column<DateTime>(nullable: true),
                    notes = table.Column<string>(nullable: true),
                    approvalStatus = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttendanceUpdateApply", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AttendanceUpdateApply_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AwardEntry",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    awardName = table.Column<string>(nullable: true),
                    purpose = table.Column<string>(nullable: true),
                    awardDate = table.Column<DateTime>(nullable: false),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AwardEntry", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AwardEntry_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BankInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    bankId = table.Column<int>(nullable: true),
                    walletTypeId = table.Column<int>(nullable: true),
                    branchName = table.Column<string>(maxLength: 200, nullable: true),
                    accountNumber = table.Column<string>(maxLength: 30, nullable: true),
                    walletNumber = table.Column<string>(maxLength: 50, nullable: true),
                    ibus = table.Column<string>(maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankInfo_Bank_bankId",
                        column: x => x.bankId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_BankInfo_WalletType_walletTypeId",
                        column: x => x.walletTypeId,
                        principalSchema: "Payroll",
                        principalTable: "WalletType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankingDiploma",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    diplomaPart = table.Column<string>(nullable: true),
                    passingYear = table.Column<string>(nullable: true),
                    result = table.Column<string>(nullable: true),
                    session = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankingDiploma", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankingDiploma_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Belongings",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetNo = table.Column<string>(maxLength: 70, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    belongingItemId = table.Column<int>(nullable: true),
                    description = table.Column<string>(maxLength: 400, nullable: true),
                    issueDate = table.Column<DateTime>(nullable: true),
                    returnDate = table.Column<DateTime>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Belongings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Belongings_belongingItems_belongingItemId",
                        column: x => x.belongingItemId,
                        principalTable: "belongingItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Belongings_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Belongings_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BondLetter",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    letterNo = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BondLetter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BondLetter_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BorrowerInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    borrowerId = table.Column<int>(nullable: false),
                    bookEntryId = table.Column<int>(nullable: true),
                    dateOfBorrow = table.Column<DateTime>(nullable: true),
                    dateOfReturn = table.Column<DateTime>(nullable: true),
                    noOfCopy = table.Column<string>(nullable: true),
                    isReturned = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BorrowerInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BorrowerInfo_BookEntry_bookEntryId",
                        column: x => x.bookEntryId,
                        principalSchema: "HR",
                        principalTable: "BookEntry",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BorrowerInfo_EmployeeInfo_borrowerId",
                        column: x => x.borrowerId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Charge",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    employeeInfoId = table.Column<int>(nullable: true),
                    letterNo = table.Column<string>(nullable: true),
                    chargeDate = table.Column<DateTime>(nullable: false),
                    chargeFor = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Charge", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Charge_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Children",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    childName = table.Column<string>(maxLength: 250, nullable: true),
                    maritalstatus = table.Column<string>(nullable: true),
                    childNameBN = table.Column<string>(maxLength: 250, nullable: true),
                    phone = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    education = table.Column<string>(nullable: true),
                    gender = table.Column<string>(maxLength: 30, nullable: true),
                    bin = table.Column<string>(maxLength: 50, nullable: true),
                    occupationId = table.Column<int>(nullable: true),
                    designation = table.Column<string>(maxLength: 250, nullable: true),
                    nationality = table.Column<string>(maxLength: 250, nullable: true),
                    relationship = table.Column<string>(maxLength: 250, nullable: true),
                    emailAddressPersonal = table.Column<string>(maxLength: 250, nullable: true),
                    organization = table.Column<string>(maxLength: 250, nullable: true),
                    nid = table.Column<string>(maxLength: 100, nullable: true),
                    bloodGroup = table.Column<string>(maxLength: 30, nullable: true),
                    presentEducation = table.Column<string>(maxLength: 130, nullable: true),
                    disability = table.Column<int>(nullable: false),
                    disablityType = table.Column<string>(nullable: true),
                    imageUrl = table.Column<string>(nullable: true),
                    childNo = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Children", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Children_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Children_Occupation_occupationId",
                        column: x => x.occupationId,
                        principalSchema: "HR",
                        principalTable: "Occupation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DisciplinaryAction",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    OffenseId = table.Column<int>(nullable: true),
                    naturalPunishmentId = table.Column<int>(nullable: true),
                    punishmentDate = table.Column<DateTime>(nullable: false),
                    startingDate = table.Column<DateTime>(nullable: false),
                    endDate = table.Column<DateTime>(nullable: false),
                    goNumberWithDate = table.Column<string>(nullable: true),
                    goFileURL = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    status = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DisciplinaryAction", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DisciplinaryAction_Offense_OffenseId",
                        column: x => x.OffenseId,
                        principalSchema: "HR",
                        principalTable: "Offense",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DisciplinaryAction_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DisciplinaryAction_NaturalPunishment_naturalPunishmentId",
                        column: x => x.naturalPunishmentId,
                        principalSchema: "HR",
                        principalTable: "NaturalPunishment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DisciplinaryLog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    OffenseId = table.Column<int>(nullable: true),
                    offenceName = table.Column<string>(nullable: true),
                    naturalPunishmentId = table.Column<int>(nullable: true),
                    naturalPunishmentName = table.Column<string>(nullable: true),
                    punishmentDate = table.Column<DateTime>(nullable: true),
                    startingDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    goNumberWithDate = table.Column<string>(nullable: true),
                    goFileURL = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DisciplinaryLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DisciplinaryLog_Offense_OffenseId",
                        column: x => x.OffenseId,
                        principalSchema: "HR",
                        principalTable: "Offense",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DisciplinaryLog_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_DisciplinaryLog_NaturalPunishment_naturalPunishmentId",
                        column: x => x.naturalPunishmentId,
                        principalSchema: "HR",
                        principalTable: "NaturalPunishment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DrivingLicense",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    licenseNumber = table.Column<string>(nullable: true),
                    category = table.Column<string>(nullable: true),
                    placeOfIssue = table.Column<string>(nullable: true),
                    dateOfIssue = table.Column<DateTime>(nullable: true),
                    dateOfExpair = table.Column<DateTime>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DrivingLicense", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DrivingLicense_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "DuelResidence",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    duelCountryId = table.Column<int>(nullable: true),
                    duelPassport = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DuelResidence", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DuelResidence_Countries_duelCountryId",
                        column: x => x.duelCountryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DuelResidence_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EducationalQualification",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    institution = table.Column<string>(nullable: true),
                    resultId = table.Column<int>(nullable: true),
                    majorGroup = table.Column<string>(nullable: true),
                    grade = table.Column<string>(nullable: true),
                    passingYear = table.Column<int>(nullable: true),
                    degreeId = table.Column<int>(nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    organizationName = table.Column<string>(nullable: true),
                    reldegreesubjectId = table.Column<int>(nullable: true),
                    duration = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EducationalQualification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EducationalQualification_Degree_degreeId",
                        column: x => x.degreeId,
                        principalSchema: "HR",
                        principalTable: "Degree",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EducationalQualification_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EducationalQualification_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "HR",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EducationalQualification_RelDegreeSubject_reldegreesubjectId",
                        column: x => x.reldegreesubjectId,
                        principalSchema: "HR",
                        principalTable: "RelDegreeSubject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EducationalQualification_Result_resultId",
                        column: x => x.resultId,
                        principalSchema: "HR",
                        principalTable: "Result",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmergencyContact",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    name = table.Column<string>(nullable: true),
                    relation = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    contact = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    Occupation = table.Column<string>(nullable: true),
                    OfficeAddress = table.Column<string>(nullable: true),
                    HomeAddress = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmergencyContact", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmergencyContact_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeAllocation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    dutyId = table.Column<int>(nullable: true),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true),
                    location = table.Column<string>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeAllocation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeAllocation_eventDutyMasters_dutyId",
                        column: x => x.dutyId,
                        principalTable: "eventDutyMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeAllocation_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeAward",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    awardId = table.Column<int>(nullable: false),
                    purpose = table.Column<string>(nullable: true),
                    awardDate = table.Column<DateTime>(nullable: true),
                    issuedBy = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeAward", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeAward_Award_awardId",
                        column: x => x.awardId,
                        principalSchema: "HR",
                        principalTable: "Award",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeAward_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeContractInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    contractStartDate = table.Column<DateTime>(nullable: true),
                    contractEndDate = table.Column<DateTime>(nullable: true),
                    attachmentUrl = table.Column<string>(nullable: true),
                    contractStatus = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeContractInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeContractInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeCostCentre",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    costCentreId = table.Column<int>(nullable: true),
                    costCentreDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeCostCentre", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeCostCentre_CostCentre_costCentreId",
                        column: x => x.costCentreId,
                        principalSchema: "ACCOUNT",
                        principalTable: "CostCentre",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeCostCentre_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeDeath",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    reason = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeDeath", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeDeath_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeDisease",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    medicalDiseaseId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    hospitalised = table.Column<int>(nullable: true),
                    underTreatment = table.Column<int>(nullable: true),
                    vaccinated = table.Column<int>(nullable: true),
                    observation = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeDisease", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeDisease_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeDisease_medicalDiseases_medicalDiseaseId",
                        column: x => x.medicalDiseaseId,
                        principalTable: "medicalDiseases",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeExtraCurricular",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    extraCurricularTypeId = table.Column<int>(nullable: true),
                    skillLevel = table.Column<string>(nullable: true),
                    skillType = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeExtraCurricular", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeExtraCurricular_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeExtraCurricular_ExtraCurricularType_extraCurricularTypeId",
                        column: x => x.extraCurricularTypeId,
                        principalSchema: "HR",
                        principalTable: "ExtraCurricularType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeGrade",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryGradeId = table.Column<int>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeGrade", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeGrade_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeGrade_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeHobby",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    hobbyName = table.Column<string>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeHobby", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeHobby_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeInsurance",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    name = table.Column<string>(maxLength: 350, nullable: true),
                    relation = table.Column<string>(maxLength: 100, nullable: true),
                    NID = table.Column<string>(maxLength: 20, nullable: true),
                    age = table.Column<string>(maxLength: 100, nullable: true),
                    gender = table.Column<string>(maxLength: 10, nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    insuranceDate = table.Column<DateTime>(nullable: true),
                    imageUrl = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeInsurance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeInsurance_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeLanguage",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    reading = table.Column<string>(maxLength: 50, nullable: true),
                    writing = table.Column<string>(maxLength: 50, nullable: true),
                    speaking = table.Column<string>(maxLength: 50, nullable: true),
                    listening = table.Column<string>(maxLength: 50, nullable: true),
                    languageId = table.Column<int>(nullable: true),
                    proficiency = table.Column<string>(maxLength: 100, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeLanguage", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeLanguage_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeLanguage_Language_languageId",
                        column: x => x.languageId,
                        principalSchema: "HR",
                        principalTable: "Language",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeLanguageSkill",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    LanguageName = table.Column<string>(nullable: true),
                    skill = table.Column<int>(nullable: true),
                    isNative = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeLanguageSkill", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeLanguageSkill_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeMembership",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    nameOrganization = table.Column<string>(nullable: true),
                    membershipNo = table.Column<string>(nullable: true),
                    membershipId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeMembership", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeMembership_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeMembership_MembershipOrganization_membershipId",
                        column: x => x.membershipId,
                        principalSchema: "HR",
                        principalTable: "MembershipOrganization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeOtherInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    hRFacilityId = table.Column<int>(nullable: true),
                    simsId = table.Column<string>(maxLength: 200, nullable: true),
                    busArea = table.Column<string>(maxLength: 200, nullable: true),
                    type = table.Column<string>(maxLength: 200, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeOtherInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeOtherInfo_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeOtherInfo_HRFacility_hRFacilityId",
                        column: x => x.hRFacilityId,
                        principalSchema: "HR",
                        principalTable: "HRFacility",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeProjectActivity",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    hRProjectId = table.Column<int>(nullable: true),
                    hRDonerId = table.Column<int>(nullable: true),
                    hRActivityId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeProjectActivity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeProjectActivity_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeProjectActivity_HRActivity_hRActivityId",
                        column: x => x.hRActivityId,
                        principalSchema: "HR",
                        principalTable: "HRActivity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeProjectActivity_HRDoner_hRDonerId",
                        column: x => x.hRDonerId,
                        principalSchema: "HR",
                        principalTable: "HRDoner",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeProjectActivity_HRProject_hRProjectId",
                        column: x => x.hRProjectId,
                        principalSchema: "HR",
                        principalTable: "HRProject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeProjectAssign",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeProjectAssign", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeProjectAssign_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeProjectAssign_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeReleaseInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    officialEmpId = table.Column<int>(nullable: true),
                    officialEmpName = table.Column<string>(nullable: true),
                    employeeName = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    fromDepartmentId = table.Column<int>(nullable: true),
                    toDepartmentId = table.Column<int>(nullable: true),
                    fromDepartment = table.Column<string>(nullable: true),
                    toDepartment = table.Column<string>(nullable: true),
                    transferOrderNo = table.Column<string>(nullable: true),
                    releaseOrderNo = table.Column<string>(nullable: true),
                    transferToOfficial = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    transferOrderDate = table.Column<DateTime>(nullable: true),
                    releaseOrderDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeReleaseInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeReleaseInfo_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeRole",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    roleId = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeRole", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeRole_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeRole_CustomRole_roleId",
                        column: x => x.roleId,
                        principalSchema: "HR",
                        principalTable: "CustomRole",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeSignature",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    url = table.Column<string>(nullable: false),
                    banglaSign = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeSignature", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeSignature_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeSports",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    skillType = table.Column<string>(nullable: true),
                    skillLevel = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeSports", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeSports_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitInterviewMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    lastWithdrawnSalary = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitInterviewMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitInterviewMaster_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExperianceLetter",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    letterNo = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExperianceLetter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExperianceLetter_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinanceCode",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    fnCode = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinanceCode", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinanceCode_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FoodLiking",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    vegiterian = table.Column<int>(nullable: true),
                    nonVegiterian = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FoodLiking", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FoodLiking_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "FreedomFighter",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    number = table.Column<string>(nullable: true),
                    owner = table.Column<string>(nullable: true),
                    relationship = table.Column<string>(nullable: true),
                    sectorNo = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FreedomFighter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FreedomFighter_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HandoverTakeoverMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    handoverId = table.Column<int>(nullable: true),
                    takeoverId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HandoverTakeoverMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HandoverTakeoverMaster_EmployeeInfo_handoverId",
                        column: x => x.handoverId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HandoverTakeoverMaster_EmployeeInfo_takeoverId",
                        column: x => x.takeoverId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HrCommunication",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    refNo = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    mailBody = table.Column<string>(nullable: true),
                    mailSendingDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrCommunication", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrCommunication_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HrComputerLiteracy",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    subject = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    competencyLevel = table.Column<string>(nullable: true),
                    training = table.Column<string>(nullable: true),
                    diploma = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrComputerLiteracy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrComputerLiteracy_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HrFormatDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    formatMasterId = table.Column<int>(nullable: false),
                    employeeId = table.Column<int>(nullable: false),
                    editedFormat = table.Column<string>(nullable: true),
                    fileName = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrFormatDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrFormatDetails_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HrFormatDetails_HrFormatMaster_formatMasterId",
                        column: x => x.formatMasterId,
                        principalSchema: "HR",
                        principalTable: "HrFormatMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HRPMSAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    atttachmentCategoryId = table.Column<int>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    attachmentDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HRPMSAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HRPMSAttachment_AtttachmentCategory_atttachmentCategoryId",
                        column: x => x.atttachmentCategoryId,
                        principalSchema: "HR",
                        principalTable: "AtttachmentCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HRPMSAttachment_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LeaveLog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    leaveTypeId = table.Column<int>(nullable: true),
                    leaveFrom = table.Column<DateTime>(nullable: false),
                    leaveTo = table.Column<DateTime>(nullable: false),
                    purposeOfLeave = table.Column<string>(nullable: true),
                    Status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveLog_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveLog_LeaveType_leaveTypeId",
                        column: x => x.leaveTypeId,
                        principalSchema: "HR",
                        principalTable: "LeaveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeaveOpeningBalance",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    leaveTypeId = table.Column<int>(nullable: true),
                    yearId = table.Column<int>(nullable: true),
                    leaveDays = table.Column<decimal>(nullable: true),
                    leaveCarryDays = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveOpeningBalance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveOpeningBalance_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveOpeningBalance_LeaveType_leaveTypeId",
                        column: x => x.leaveTypeId,
                        principalSchema: "HR",
                        principalTable: "LeaveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveOpeningBalance_Year_yearId",
                        column: x => x.yearId,
                        principalSchema: "HR",
                        principalTable: "Year",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeavePolicy",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    leaveTypeId = table.Column<int>(nullable: true),
                    yearId = table.Column<int>(nullable: true),
                    yearlyMaxLeave = table.Column<decimal>(nullable: true),
                    yearlyMaxCarry = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    weeklyOffBridge = table.Column<int>(nullable: true),
                    govtHolidayBridge = table.Column<int>(nullable: true),
                    paymentType = table.Column<string>(maxLength: 20, nullable: true),
                    maxBridgeLimit = table.Column<int>(nullable: true),
                    highestCarryForward = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeavePolicy", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeavePolicy_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeavePolicy_LeaveType_leaveTypeId",
                        column: x => x.leaveTypeId,
                        principalSchema: "HR",
                        principalTable: "LeaveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeavePolicy_Year_yearId",
                        column: x => x.yearId,
                        principalSchema: "HR",
                        principalTable: "Year",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeaveRegister",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    substitutionUserId = table.Column<int>(nullable: true),
                    leaveTypeId = table.Column<int>(nullable: true),
                    leaveDayId = table.Column<int>(nullable: true),
                    whenLeave = table.Column<string>(nullable: true),
                    leaveFrom = table.Column<DateTime>(nullable: false),
                    leaveTo = table.Column<DateTime>(nullable: false),
                    daysLeave = table.Column<decimal>(nullable: true),
                    ActualLeaveFrom = table.Column<DateTime>(nullable: true),
                    ActualLeaveTo = table.Column<DateTime>(nullable: true),
                    purposeOfLeave = table.Column<string>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    updateAttatchment = table.Column<string>(nullable: true),
                    emergencyContactNo = table.Column<string>(nullable: true),
                    leaveStatus = table.Column<int>(nullable: true),
                    address = table.Column<string>(nullable: true),
                    paymentOption = table.Column<string>(maxLength: 20, nullable: true),
                    comment = table.Column<string>(nullable: true),
                    reason = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveRegister", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveRegister_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveRegister_LeaveDay_leaveDayId",
                        column: x => x.leaveDayId,
                        principalSchema: "HR",
                        principalTable: "LeaveDay",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveRegister_LeaveType_leaveTypeId",
                        column: x => x.leaveTypeId,
                        principalSchema: "HR",
                        principalTable: "LeaveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveRegister_EmployeeInfo_substitutionUserId",
                        column: x => x.substitutionUserId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MobileBenifit",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    type = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileBenifit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MobileBenifit_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Nominee",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    name = table.Column<string>(maxLength: 250, nullable: true),
                    address = table.Column<string>(nullable: true),
                    relation = table.Column<string>(maxLength: 100, nullable: true),
                    contact = table.Column<string>(maxLength: 40, nullable: true),
                    NID = table.Column<string>(maxLength: 20, nullable: true),
                    BRN = table.Column<string>(maxLength: 150, nullable: true),
                    imageUrl = table.Column<string>(nullable: true),
                    guardianName = table.Column<string>(maxLength: 250, nullable: true),
                    witnessName = table.Column<string>(maxLength: 250, nullable: true),
                    witnessPhone = table.Column<string>(nullable: true),
                    nomineeDate = table.Column<DateTime>(nullable: true),
                    Email = table.Column<string>(nullable: true),
                    Occupation = table.Column<string>(nullable: true),
                    Designation = table.Column<string>(nullable: true),
                    Organization = table.Column<string>(nullable: true),
                    Citizenship = table.Column<string>(nullable: true),
                    Purpose = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Nominee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Nominee_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OfficeAssign",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    roomNo = table.Column<string>(nullable: true),
                    floorNo = table.Column<string>(nullable: true),
                    deskNo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OfficeAssign", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OfficeAssign_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OtherActivity",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    activityNameId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OtherActivity", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OtherActivity_ActivityName_activityNameId",
                        column: x => x.activityNameId,
                        principalSchema: "HR",
                        principalTable: "ActivityName",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OtherActivity_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OtherQualification",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    otherQualificationHeadId = table.Column<int>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    resultId = table.Column<int>(nullable: true),
                    instituteName = table.Column<string>(nullable: true),
                    passingYear = table.Column<string>(nullable: true),
                    markGrade = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OtherQualification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OtherQualification_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_OtherQualification_OtherQualificationHead_otherQualificationHeadId",
                        column: x => x.otherQualificationHeadId,
                        principalSchema: "HR",
                        principalTable: "OtherQualificationHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OtherQualification_Result_resultId",
                        column: x => x.resultId,
                        principalSchema: "HR",
                        principalTable: "Result",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PassportDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    nameInPassport = table.Column<string>(nullable: true),
                    passportNumber = table.Column<string>(nullable: true),
                    placeOfIssue = table.Column<string>(nullable: true),
                    attachmentUrl = table.Column<string>(nullable: true),
                    dateOfIssue = table.Column<DateTime>(nullable: true),
                    dateOfExpair = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PassportDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PassportDetails_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Photograph",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    url = table.Column<string>(nullable: false),
                    remarks = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Photograph", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Photograph_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Position",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    employeeInfoId = table.Column<int>(nullable: true),
                    totalEmplyee = table.Column<int>(nullable: true),
                    noOfOfficer = table.Column<int>(nullable: true),
                    noOfWarker = table.Column<int>(nullable: true),
                    developmentBudget = table.Column<decimal>(type: "decimal(18, 2)", nullable: true),
                    infrasturcturBudget = table.Column<decimal>(type: "decimal(18, 2)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Position", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Position_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PostDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    postId = table.Column<int>(nullable: true),
                    reportingBossId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    postingTypeId = table.Column<int>(nullable: true),
                    employmentTypeId = table.Column<int>(nullable: true),
                    assaignDate = table.Column<DateTime>(nullable: true),
                    AssaignBy = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PostDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PostDetails_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PostDetails_EmploymentType_employmentTypeId",
                        column: x => x.employmentTypeId,
                        principalSchema: "HR",
                        principalTable: "EmploymentType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PostDetails_Post_postId",
                        column: x => x.postId,
                        principalSchema: "HR",
                        principalTable: "Post",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PostDetails_PostingType_postingTypeId",
                        column: x => x.postingTypeId,
                        principalSchema: "HR",
                        principalTable: "PostingType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PostDetails_PostDetails_reportingBossId",
                        column: x => x.reportingBossId,
                        principalSchema: "HR",
                        principalTable: "PostDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PrevJobHistory",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    company = table.Column<string>(nullable: true),
                    position = table.Column<string>(nullable: true),
                    jobstart = table.Column<DateTime>(nullable: true),
                    jobend = table.Column<DateTime>(nullable: true),
                    type = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PrevJobHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PrevJobHistory_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PriviousEmployment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    organizationName = table.Column<string>(nullable: true),
                    organizationTypeId = table.Column<int>(nullable: true),
                    employer = table.Column<string>(nullable: true),
                    joiningDesignationId = table.Column<int>(nullable: true),
                    lastDesignationId = table.Column<int>(nullable: true),
                    jobTitle = table.Column<string>(nullable: true),
                    lastSalary = table.Column<decimal>(nullable: true),
                    lengthOfService = table.Column<string>(nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    position = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    companyBusiness = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    companyLocation = table.Column<string>(nullable: true),
                    proficiency = table.Column<string>(nullable: true),
                    achivments = table.Column<string>(nullable: true),
                    responsibilities = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PriviousEmployment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PriviousEmployment_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PriviousEmployment_Designation_joiningDesignationId",
                        column: x => x.joiningDesignationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PriviousEmployment_Designation_lastDesignationId",
                        column: x => x.lastDesignationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PriviousEmployment_HRPMSOrganizationType_organizationTypeId",
                        column: x => x.organizationTypeId,
                        principalSchema: "HR",
                        principalTable: "HRPMSOrganizationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PRLApplication",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    applicationName = table.Column<string>(nullable: true),
                    applicationDate = table.Column<string>(nullable: true),
                    fromDate = table.Column<string>(nullable: true),
                    toDate = table.Column<string>(nullable: true),
                    duration = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRLApplication", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PRLApplication_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProfessionalQualifications",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    qualificationHeadId = table.Column<int>(nullable: true),
                    certificationName = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    resultId = table.Column<int>(nullable: true),
                    instituteName = table.Column<string>(nullable: true),
                    passingYear = table.Column<string>(nullable: true),
                    markGrade = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProfessionalQualifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProfessionalQualifications_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProfessionalQualifications_QualificationHead_qualificationHeadId",
                        column: x => x.qualificationHeadId,
                        principalSchema: "HR",
                        principalTable: "QualificationHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProfessionalQualifications_Result_resultId",
                        column: x => x.resultId,
                        principalSchema: "HR",
                        principalTable: "Result",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Promotion",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    employeeInfoId = table.Column<int>(nullable: true),
                    promotionType = table.Column<string>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    designationOldId = table.Column<int>(nullable: true),
                    promotionDate = table.Column<string>(nullable: true),
                    salaryGradeId = table.Column<int>(nullable: true),
                    Basic = table.Column<decimal>(nullable: true),
                    Remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Promotion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Promotion_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Promotion_Designation_designationOldId",
                        column: x => x.designationOldId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Promotion_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Promotion_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PromotionEntry",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    date = table.Column<string>(nullable: true),
                    payScale = table.Column<string>(nullable: true),
                    nature = table.Column<string>(nullable: true),
                    basic = table.Column<string>(nullable: true),
                    goNumber = table.Column<string>(nullable: true),
                    goDate = table.Column<string>(nullable: true),
                    remark = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PromotionEntry", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PromotionEntry_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PromotionLog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    designation = table.Column<string>(nullable: true),
                    designationNewId = table.Column<int>(nullable: true),
                    designationOldId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: false),
                    payScaleId = table.Column<int>(nullable: true),
                    goNumber = table.Column<string>(nullable: true),
                    goDate = table.Column<DateTime>(nullable: true),
                    remark = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PromotionLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PromotionLog_Designation_designationNewId",
                        column: x => x.designationNewId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PromotionLog_Designation_designationOldId",
                        column: x => x.designationOldId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PromotionLog_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PromotionLog_SalaryGrade_payScaleId",
                        column: x => x.payScaleId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Publication",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    publicationName = table.Column<string>(nullable: true),
                    publicationType = table.Column<string>(nullable: true),
                    publicationPlace = table.Column<string>(nullable: true),
                    publicationDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Publication", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Publication_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PublicationEntry",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    publicationType = table.Column<string>(nullable: true),
                    Date = table.Column<DateTime>(nullable: false),
                    nameOfPublication = table.Column<string>(nullable: true),
                    place = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PublicationEntry", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PublicationEntry_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Punishment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    letterNo = table.Column<string>(nullable: true),
                    punishmentDate = table.Column<DateTime>(nullable: false),
                    punishmentFor = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Punishment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Punishment_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "QualificationAndValidation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    qualificationHeadId = table.Column<int>(nullable: true),
                    attachment = table.Column<string>(nullable: true),
                    isValid = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualificationAndValidation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QualificationAndValidation_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_QualificationAndValidation_QualificationHead_qualificationHeadId",
                        column: x => x.qualificationHeadId,
                        principalSchema: "HR",
                        principalTable: "QualificationHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Reference",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    contact = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reference", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Reference_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ResignationLetter",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    submissionDate = table.Column<DateTime>(nullable: true),
                    lastworkingDate = table.Column<DateTime>(nullable: true),
                    reason = table.Column<string>(nullable: true),
                    totalWorkingDays = table.Column<string>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResignationLetter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ResignationLetter_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ResignInformation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    resignDate = table.Column<DateTime>(nullable: true),
                    lastWorkingDate = table.Column<DateTime>(nullable: true),
                    resignReason = table.Column<string>(maxLength: 500, nullable: true),
                    url = table.Column<string>(nullable: true),
                    nextApprover = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    bodyText = table.Column<string>(nullable: true),
                    letterNo = table.Column<string>(nullable: true),
                    clearanceFile = table.Column<string>(nullable: true),
                    clearanceDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResignInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ResignInformation_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ResourcePerson",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    workPlace = table.Column<string>(nullable: true),
                    specialization = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    contactNumber = table.Column<string>(nullable: true),
                    performance = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    address = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    orgType = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResourcePerson", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ResourcePerson_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Reward",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    letterNo = table.Column<string>(nullable: true),
                    rewardDate = table.Column<string>(nullable: true),
                    rewardName = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reward", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Reward_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Spouse",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    spouseName = table.Column<string>(maxLength: 250, nullable: true),
                    email = table.Column<string>(maxLength: 150, nullable: true),
                    spouseNameBN = table.Column<string>(maxLength: 250, nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    occupationId = table.Column<int>(nullable: true),
                    gender = table.Column<string>(maxLength: 20, nullable: true),
                    designation = table.Column<string>(maxLength: 250, nullable: true),
                    organization = table.Column<string>(maxLength: 450, nullable: true),
                    bin = table.Column<string>(maxLength: 100, nullable: true),
                    nid = table.Column<string>(maxLength: 100, nullable: true),
                    maritalStatus = table.Column<string>(nullable: true),
                    bloodGroup = table.Column<string>(maxLength: 30, nullable: true),
                    contact = table.Column<string>(maxLength: 250, nullable: true),
                    nationality = table.Column<string>(maxLength: 250, nullable: true),
                    relationship = table.Column<string>(maxLength: 250, nullable: true),
                    highestEducation = table.Column<string>(maxLength: 450, nullable: true),
                    homeDistrict = table.Column<string>(maxLength: 100, nullable: true),
                    imageUrl = table.Column<string>(nullable: true),
                    marriageCertificate = table.Column<string>(nullable: true),
                    dateOfMarriage = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Spouse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Spouse_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Spouse_Occupation_occupationId",
                        column: x => x.occupationId,
                        principalSchema: "HR",
                        principalTable: "Occupation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Supervisor",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    supervisorId = table.Column<int>(nullable: true),
                    commandOrder = table.Column<string>(maxLength: 2, nullable: true),
                    canFinalApprover = table.Column<string>(maxLength: 3, nullable: true),
                    supervisorDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Supervisor", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Supervisor_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Supervisor_EmployeeInfo_supervisorId",
                        column: x => x.supervisorId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Suspension",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    susDesc = table.Column<string>(nullable: true),
                    susFile = table.Column<string>(nullable: true),
                    chargeSheetDesc = table.Column<string>(nullable: true),
                    chargeSheetFile = table.Column<string>(nullable: true),
                    hearingReport = table.Column<string>(nullable: true),
                    hearingReportFile = table.Column<string>(nullable: true),
                    punishmentType = table.Column<string>(nullable: true),
                    effectiveForm = table.Column<DateTime>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Suspension", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Suspension_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Tax",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    taxZone = table.Column<string>(maxLength: 150, nullable: true),
                    taxCircle = table.Column<string>(maxLength: 150, nullable: true),
                    eTin = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tax", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Tax_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Trainer",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Trainer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Trainer_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TraningLog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    trainingCategoryId = table.Column<int>(nullable: true),
                    trainingInstituteId = table.Column<int>(nullable: true),
                    trainingInstituteName = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    trainingTitle = table.Column<string>(nullable: true),
                    sponsoringAgency = table.Column<string>(nullable: true),
                    trainingTitlelogId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TraningLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TraningLog_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TraningLog_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TraningLog_TrainingCategory_trainingCategoryId",
                        column: x => x.trainingCategoryId,
                        principalSchema: "HR",
                        principalTable: "TrainingCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TraningLog_TrainingInstitute_trainingInstituteId",
                        column: x => x.trainingInstituteId,
                        principalSchema: "HR",
                        principalTable: "TrainingInstitute",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TraningLog_TrainingTitlelog_trainingTitlelogId",
                        column: x => x.trainingTitlelogId,
                        principalSchema: "HR",
                        principalTable: "TrainingTitlelog",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TransferEntry",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    currentDesignation = table.Column<string>(nullable: true),
                    currentPlace = table.Column<string>(nullable: true),
                    currentGrade = table.Column<string>(nullable: true),
                    newDesignation = table.Column<string>(nullable: true),
                    newPlace = table.Column<string>(nullable: true),
                    newGrade = table.Column<string>(nullable: true),
                    orderDate = table.Column<string>(nullable: true),
                    effectDate = table.Column<string>(nullable: true),
                    joiningDate = table.Column<string>(nullable: true),
                    remark = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransferEntry", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransferEntry_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TraveInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    travelPurposeId = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(nullable: true),
                    location = table.Column<string>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    sponsoringAgency = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    goNumber = table.Column<string>(nullable: true),
                    goDate = table.Column<DateTime>(nullable: true),
                    file = table.Column<string>(nullable: true),
                    titleOfFile = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    titleName = table.Column<string>(maxLength: 550, nullable: true),
                    accountCode = table.Column<string>(maxLength: 250, nullable: true),
                    hrProgramId = table.Column<int>(nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    leaveStartDate = table.Column<DateTime>(nullable: true),
                    leaveEndDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TraveInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TraveInfo_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TraveInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TraveInfo_HrProgram_hrProgramId",
                        column: x => x.hrProgramId,
                        principalSchema: "HR",
                        principalTable: "HrProgram",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TraveInfo_HRProject_projectId",
                        column: x => x.projectId,
                        principalSchema: "HR",
                        principalTable: "HRProject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TraveInfo_TravelPurpose_travelPurposeId",
                        column: x => x.travelPurposeId,
                        principalSchema: "HR",
                        principalTable: "TravelPurpose",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TravelMaster",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    travelNumber = table.Column<string>(nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    date = table.Column<DateTime>(nullable: true),
                    accountNumber = table.Column<string>(nullable: true),
                    travelProjectId = table.Column<int>(nullable: true),
                    hRActivityId = table.Column<int>(nullable: true),
                    hRDonerId = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TravelMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TravelMaster_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TravelMaster_HRActivity_hRActivityId",
                        column: x => x.hRActivityId,
                        principalSchema: "HR",
                        principalTable: "HRActivity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TravelMaster_HRDoner_hRDonerId",
                        column: x => x.hRDonerId,
                        principalSchema: "HR",
                        principalTable: "HRDoner",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TravelMaster_HRProject_travelProjectId",
                        column: x => x.travelProjectId,
                        principalSchema: "HR",
                        principalTable: "HRProject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkHistory",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    emplyeeInfoId = table.Column<int>(nullable: true),
                    teamSize = table.Column<int>(nullable: false),
                    teamPosition = table.Column<string>(nullable: true),
                    workType = table.Column<string>(nullable: true),
                    workDuration = table.Column<string>(nullable: true),
                    task = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkHistory_EmployeeInfo_emplyeeInfoId",
                        column: x => x.emplyeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "YearlyLeaveProcess",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    leaveTypeId = table.Column<int>(nullable: true),
                    yearId = table.Column<int>(nullable: true),
                    leaveDays = table.Column<decimal>(nullable: true),
                    leaveCarryDays = table.Column<decimal>(nullable: true),
                    LeaveAvailed = table.Column<decimal>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_YearlyLeaveProcess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_YearlyLeaveProcess_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_YearlyLeaveProcess_LeaveType_leaveTypeId",
                        column: x => x.leaveTypeId,
                        principalSchema: "HR",
                        principalTable: "LeaveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_YearlyLeaveProcess_Year_yearId",
                        column: x => x.yearId,
                        principalSchema: "HR",
                        principalTable: "Year",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IeltsInfo",
                schema: "IELTS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    examType = table.Column<string>(nullable: true),
                    centerNo = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    candidateNo = table.Column<string>(nullable: true),
                    listeningScore = table.Column<decimal>(nullable: true),
                    readingScore = table.Column<decimal>(nullable: true),
                    writingScore = table.Column<decimal>(nullable: true),
                    speakingScore = table.Column<decimal>(nullable: true),
                    overallScore = table.Column<decimal>(nullable: true),
                    cefrScore = table.Column<decimal>(nullable: true),
                    attachment = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IeltsInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IeltsInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MessageGroup",
                schema: "MBox",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    tagline = table.Column<string>(nullable: true),
                    praivacy = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MessageGroup_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingDocument",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    number = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    content = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    Date = table.Column<DateTime>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isInitial = table.Column<int>(nullable: true),
                    isMeeting = table.Column<int>(nullable: true),
                    noteType = table.Column<string>(nullable: true),
                    summary = table.Column<string>(nullable: true),
                    decision = table.Column<string>(nullable: true),
                    docId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingDocument", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingDocument_MeetingDocument_docId",
                        column: x => x.docId,
                        principalSchema: "MMS",
                        principalTable: "MeetingDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDocument_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingInfo",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    title = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    Date = table.Column<DateTime>(nullable: true),
                    actionId = table.Column<int>(nullable: true),
                    isAchived = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingInfo_MeetingActionInfo_actionId",
                        column: x => x.actionId,
                        principalSchema: "MMS",
                        principalTable: "MeetingActionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingUser",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    role = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingUser", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingUser_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AdditionalTaxInfo",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    taxYearId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    exemptionRule = table.Column<string>(maxLength: 300, nullable: true),
                    exemptionAmount = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AdditionalTaxInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AdditionalTaxInfo_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AdditionalTaxInfo_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AdditionalTaxInfo_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AdvanceAdjustment",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: false),
                    date = table.Column<DateTime>(nullable: true),
                    advanceAmount = table.Column<decimal>(nullable: false),
                    installmentAmount = table.Column<decimal>(nullable: false),
                    noOfInstallment = table.Column<int>(nullable: false),
                    isContinue = table.Column<int>(nullable: true),
                    isComplete = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AdvanceAdjustment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AdvanceAdjustment_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AdvanceAdjustment_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AdvanceAdjustment_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CarLoan",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    salaryGradeId = table.Column<int>(nullable: true),
                    CarLoanNo = table.Column<string>(nullable: true),
                    advanceAmount = table.Column<decimal>(nullable: false),
                    installmentAmount = table.Column<decimal>(nullable: false),
                    noOfInstallment = table.Column<int>(nullable: false),
                    isFromSalary = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(maxLength: 300, nullable: true),
                    loanDate = table.Column<DateTime>(nullable: true),
                    loanType = table.Column<string>(nullable: true),
                    approver = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CarLoan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CarLoan_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CarLoan_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CarLoan_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CarLoan_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CarMaintenance",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CarMaintenance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CarMaintenance_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CarMaintenance_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CodeManagement",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    elementCode = table.Column<string>(nullable: true),
                    percentAmount = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CodeManagement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CodeManagement_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CodeManagement_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CodeManagement_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmpAttendanceSummary",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    weeklyOff = table.Column<int>(nullable: true),
                    holiday = table.Column<int>(nullable: true),
                    leave = table.Column<int>(nullable: true),
                    present = table.Column<int>(nullable: true),
                    absent = table.Column<int>(nullable: true),
                    late = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(maxLength: 400, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmpAttendanceSummary", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmpAttendanceSummary_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmpAttendanceSummary_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeArrear",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    arrearAmount = table.Column<decimal>(nullable: false),
                    ratio = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeArrear", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeArrear_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeArrear_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeeArrear_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeArrearInfo",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    employeeName = table.Column<string>(nullable: true),
                    Designation = table.Column<string>(nullable: true),
                    posting = table.Column<string>(nullable: true),
                    periodId = table.Column<int>(nullable: true),
                    Fromdate = table.Column<DateTime>(nullable: true),
                    ToDate = table.Column<DateTime>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    CalculatedArrear = table.Column<decimal>(nullable: true),
                    oldBasic = table.Column<decimal>(nullable: true),
                    currentBasic = table.Column<decimal>(nullable: true),
                    houseRent = table.Column<decimal>(nullable: true),
                    subs = table.Column<decimal>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    type = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeArrearInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeArrearInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeArrearInfo_SalaryPeriod_periodId",
                        column: x => x.periodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeesBonusStructure",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    bonousStructureId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeesBonusStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeesBonusStructure_BonousStructure_bonousStructureId",
                        column: x => x.bonousStructureId,
                        principalSchema: "Payroll",
                        principalTable: "BonousStructure",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeesBonusStructure_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeesCashSetup",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    bankAmount = table.Column<decimal>(nullable: true),
                    walletAmount = table.Column<decimal>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    defaultAccount = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeesCashSetup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeesCashSetup_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeesSalaryStructure",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salarySlabId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: false),
                    amount = table.Column<decimal>(nullable: false),
                    isActive = table.Column<string>(maxLength: 10, nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    pfType = table.Column<string>(nullable: true),
                    pfPercentage = table.Column<int>(nullable: true),
                    isPartial = table.Column<int>(nullable: true),
                    expiryDate = table.Column<DateTime>(nullable: true),
                    loanDeduction = table.Column<string>(nullable: true),
                    loanDedAmount = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeesSalaryStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeesSalaryStructure_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeesSalaryStructure_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeesSalaryStructure_SalarySlab_salarySlabId",
                        column: x => x.salarySlabId,
                        principalSchema: "Payroll",
                        principalTable: "SalarySlab",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeesTax",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    taxYearId = table.Column<int>(nullable: true),
                    yearlyTaxableincome = table.Column<decimal>(nullable: true),
                    yearlyTaxableamount = table.Column<decimal>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeesTax", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeesTax_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeesTax_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinalSettlement",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    seperationStatus = table.Column<string>(nullable: true),
                    noticePeriod_Emt = table.Column<int>(nullable: true),
                    noticePeriod_Served = table.Column<int>(nullable: true),
                    lastWorkingDay = table.Column<string>(nullable: true),
                    salaryDisbUpto = table.Column<string>(nullable: true),
                    lenghtOfService = table.Column<string>(nullable: true),
                    leaveBalance = table.Column<decimal>(nullable: true),
                    salDue = table.Column<decimal>(nullable: true),
                    specDue = table.Column<decimal>(nullable: true),
                    carADue = table.Column<decimal>(nullable: true),
                    leaveEncashment = table.Column<decimal>(nullable: true),
                    fBonus1 = table.Column<decimal>(nullable: true),
                    fBonus2 = table.Column<decimal>(nullable: true),
                    fB1Remarks = table.Column<string>(nullable: true),
                    fB2Remarks = table.Column<string>(nullable: true),
                    perfBonus = table.Column<decimal>(nullable: true),
                    lFAAdjust = table.Column<decimal>(nullable: true),
                    mobilePhone = table.Column<decimal>(nullable: true),
                    mobileData = table.Column<decimal>(nullable: true),
                    workingBeyendDays = table.Column<string>(nullable: true),
                    daysToYear = table.Column<int>(nullable: true),
                    hardInstall = table.Column<decimal>(nullable: true),
                    advSal = table.Column<decimal>(nullable: true),
                    gratuity = table.Column<decimal>(nullable: true),
                    lofSvsCG = table.Column<decimal>(nullable: true),
                    oDeduction1 = table.Column<decimal>(nullable: true),
                    oDeduction2 = table.Column<decimal>(nullable: true),
                    cODeduction1 = table.Column<string>(nullable: true),
                    cODeduction2 = table.Column<string>(nullable: true),
                    oAddition1 = table.Column<decimal>(nullable: true),
                    oAddition2 = table.Column<decimal>(nullable: true),
                    cOAddition1 = table.Column<string>(nullable: true),
                    cOAddition2 = table.Column<string>(nullable: true),
                    grossSalary = table.Column<decimal>(nullable: true),
                    basicSalary = table.Column<decimal>(nullable: true),
                    specialAllowance = table.Column<decimal>(nullable: true),
                    carAllowance = table.Column<decimal>(nullable: true),
                    appDate = table.Column<DateTime>(nullable: true),
                    trStatus = table.Column<int>(nullable: true),
                    noticePeriodDeducion = table.Column<decimal>(nullable: true),
                    incomeTax = table.Column<decimal>(nullable: true),
                    walletAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    pFAmount = table.Column<decimal>(nullable: true),
                    mobileAllowance = table.Column<decimal>(nullable: true),
                    dailyAllowance = table.Column<decimal>(nullable: true),
                    internetAllowance = table.Column<decimal>(nullable: true),
                    porataBonus = table.Column<decimal>(nullable: true),
                    deductedBonus = table.Column<decimal>(nullable: true),
                    totalDeduction = table.Column<decimal>(nullable: true),
                    totalBenefit = table.Column<decimal>(nullable: true),
                    totalOtherBenefit = table.Column<decimal>(nullable: true),
                    pFAmountInter = table.Column<decimal>(nullable: true),
                    deductedAmount = table.Column<decimal>(nullable: true),
                    pFAmountFifty = table.Column<decimal>(nullable: true),
                    pFAmountHund = table.Column<decimal>(nullable: true),
                    poratedBonusAmount = table.Column<decimal>(nullable: true),
                    lStatus = table.Column<string>(nullable: true),
                    basicDue = table.Column<decimal>(nullable: true),
                    houseRentDue = table.Column<decimal>(nullable: true),
                    conveyanceDue = table.Column<decimal>(nullable: true),
                    medicalDue = table.Column<decimal>(nullable: true),
                    pFCompanyInter = table.Column<decimal>(nullable: true),
                    carallowanceDeduction = table.Column<decimal>(nullable: true),
                    fixedallowanceDeduction = table.Column<decimal>(nullable: true),
                    mobileallowanceDeduction = table.Column<decimal>(nullable: true),
                    internetallowanceDeduction = table.Column<decimal>(nullable: true),
                    pFLoan = table.Column<decimal>(nullable: true),
                    pFOthersadjustment = table.Column<decimal>(nullable: true),
                    noticePeriodRequired = table.Column<decimal>(nullable: true),
                    salaryadjustment = table.Column<decimal>(nullable: true),
                    wPPF = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinalSettlement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinalSettlement_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinalSettlement_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FixedTaxEmployees",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    taxYearId = table.Column<int>(nullable: false),
                    taxAmount = table.Column<decimal>(nullable: true),
                    noofPeriod = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FixedTaxEmployees", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FixedTaxEmployees_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_FixedTaxEmployees_TaxYear_taxYearId",
                        column: x => x.taxYearId,
                        principalSchema: "Payroll",
                        principalTable: "TaxYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "GratiutyProcessData",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    basic = table.Column<decimal>(nullable: true),
                    year = table.Column<decimal>(nullable: true),
                    gratuity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GratiutyProcessData", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GratiutyProcessData_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HomeLoan",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    salaryGradeId = table.Column<int>(nullable: true),
                    HomeLoanNo = table.Column<string>(nullable: true),
                    advanceAmount = table.Column<decimal>(nullable: false),
                    installmentAmount = table.Column<decimal>(nullable: false),
                    noOfInstallment = table.Column<int>(nullable: false),
                    isFromSalary = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(maxLength: 300, nullable: true),
                    loanDate = table.Column<DateTime>(nullable: true),
                    loanType = table.Column<string>(nullable: true),
                    approver = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HomeLoan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HomeLoan_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HomeLoan_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HomeLoan_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HomeLoan_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InterestNotDeduct",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    empId = table.Column<int>(nullable: true),
                    loanType = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InterestNotDeduct", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InterestNotDeduct_EmployeeInfo_empId",
                        column: x => x.empId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeaveWithoutPay",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    noOfDays = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveWithoutPay", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveWithoutPay_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LeaveWithoutPay_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LfaInfo",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    lfaAmount = table.Column<decimal>(nullable: false),
                    lfaStartDate = table.Column<DateTime>(nullable: true),
                    lfaEndDate = table.Column<DateTime>(nullable: true),
                    currentLfaYearNo = table.Column<int>(nullable: false),
                    lfaStatus = table.Column<string>(maxLength: 3, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LfaInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LfaInfo_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_LfaInfo_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LoanScheduleMaster",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    loanPolicyId = table.Column<int>(nullable: true),
                    loanDate = table.Column<DateTime>(nullable: true),
                    totalLoanAmount = table.Column<decimal>(nullable: true),
                    installmentAmount = table.Column<decimal>(nullable: true),
                    noOfInstallment = table.Column<int>(nullable: true),
                    interestRate = table.Column<decimal>(nullable: true),
                    interestAmount = table.Column<decimal>(nullable: true),
                    TotalLoanWithInterestAmount = table.Column<decimal>(nullable: true),
                    isContinue = table.Column<int>(nullable: true),
                    isComplete = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(maxLength: 600, nullable: true),
                    approveStatus = table.Column<int>(nullable: true),
                    fileUrl = table.Column<string>(maxLength: 300, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LoanScheduleMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LoanScheduleMaster_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LoanScheduleMaster_LoanPolicy_loanPolicyId",
                        column: x => x.loanPolicyId,
                        principalSchema: "Payroll",
                        principalTable: "LoanPolicy",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MobileAllowanceStructure",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MobileAllowanceStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MobileAllowanceStructure_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MobileAllowanceStructure_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyAllowance",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: true),
                    allowanceAmount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(maxLength: 400, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyAllowance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MonthlyAllowance_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MonthlyAllowance_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MonthlyAllowance_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PartialSalaryLog",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true),
                    totalDays = table.Column<int>(nullable: true),
                    type = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PartialSalaryLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PartialSalaryLog_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PartialSalaryLog_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFLoan",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: true),
                    salaryGradeId = table.Column<int>(nullable: true),
                    PFLoanNo = table.Column<string>(nullable: true),
                    interestRate = table.Column<int>(nullable: true),
                    principalAmoun = table.Column<decimal>(nullable: true),
                    interestAmount = table.Column<decimal>(nullable: true),
                    advanceAmount = table.Column<decimal>(nullable: true),
                    installmentAmount = table.Column<decimal>(nullable: true),
                    noOfInstallment = table.Column<int>(nullable: true),
                    isFromSalary = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(maxLength: 300, nullable: true),
                    loanDate = table.Column<DateTime>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    designationEn = table.Column<string>(nullable: true),
                    forwardedBy = table.Column<int>(nullable: true),
                    loanType = table.Column<string>(nullable: true),
                    approver = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFLoan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFLoan_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFLoan_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFLoan_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFLoan_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFSalaryContribution",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    employeeCode = table.Column<string>(nullable: true),
                    year = table.Column<string>(nullable: true),
                    month = table.Column<string>(nullable: true),
                    pfOwn = table.Column<decimal>(nullable: true),
                    pfCompany = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFSalaryContribution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFSalaryContribution_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProcessEmployeesMobileAndCarAllowance",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    salaryHeadName = table.Column<string>(nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    empName = table.Column<string>(nullable: true),
                    sbAccount = table.Column<string>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    amount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcessEmployeesMobileAndCarAllowance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProcessEmployeesMobileAndCarAllowance_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmployeesMobileAndCarAllowance_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProcessEmpSalaryMaster",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    netPayable = table.Column<decimal>(nullable: true),
                    walletPayable = table.Column<decimal>(nullable: true),
                    bankPayable = table.Column<decimal>(nullable: true),
                    cashPayable = table.Column<decimal>(nullable: true),
                    bankName = table.Column<string>(maxLength: 200, nullable: true),
                    bankAccountNo = table.Column<string>(maxLength: 50, nullable: true),
                    walletNo = table.Column<string>(maxLength: 50, nullable: true),
                    division = table.Column<string>(maxLength: 250, nullable: true),
                    department = table.Column<string>(maxLength: 250, nullable: true),
                    designation = table.Column<string>(maxLength: 250, nullable: true),
                    companyBankAccNo = table.Column<string>(maxLength: 50, nullable: true),
                    companyBankName = table.Column<string>(maxLength: 150, nullable: true),
                    companyBankBranchName = table.Column<string>(maxLength: 150, nullable: true),
                    bankAddress = table.Column<string>(maxLength: 550, nullable: true),
                    walletType = table.Column<string>(maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcessEmpSalaryMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryMaster_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryMaster_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProcessSalaryRemarks",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    comments = table.Column<string>(nullable: true),
                    proposedAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcessSalaryRemarks", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProcessSalaryRemarks_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessSalaryRemarks_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalaryStructureHistory",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salarySlabId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    isActive = table.Column<string>(maxLength: 10, nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    historyCode = table.Column<string>(maxLength: 60, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryStructureHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryStructureHistory_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryStructureHistory_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryStructureHistory_SalarySlab_salarySlabId",
                        column: x => x.salarySlabId,
                        principalSchema: "Payroll",
                        principalTable: "SalarySlab",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SlabIncomeTaxAssign",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    slabTypeId = table.Column<int>(nullable: false),
                    employeeInfoId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SlabIncomeTaxAssign", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SlabIncomeTaxAssign_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_SlabIncomeTaxAssign_SlabType_slabTypeId",
                        column: x => x.slabTypeId,
                        principalSchema: "Payroll",
                        principalTable: "SlabType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StaffLoan",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    empName = table.Column<string>(nullable: true),
                    postingPlace = table.Column<string>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: true),
                    salaryGradeId = table.Column<int>(nullable: true),
                    LoanNo = table.Column<string>(nullable: true),
                    NewLoanNo = table.Column<string>(nullable: true),
                    interestRate = table.Column<decimal>(nullable: true),
                    principalAmount = table.Column<decimal>(nullable: true),
                    interestAmount = table.Column<decimal>(nullable: true),
                    chargeAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    totalDisbursement = table.Column<decimal>(nullable: true),
                    sanctionLimit = table.Column<decimal>(nullable: true),
                    installmentAmount = table.Column<decimal>(nullable: true),
                    noOfInstallment = table.Column<int>(nullable: true),
                    isFromSalary = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(maxLength: 300, nullable: true),
                    loanDate = table.Column<DateTime>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    designationEn = table.Column<string>(nullable: true),
                    forwardedBy = table.Column<int>(nullable: true),
                    loanType = table.Column<string>(nullable: true),
                    homeLoanType = table.Column<string>(nullable: true),
                    approver = table.Column<int>(nullable: true),
                    expiryDate = table.Column<DateTime>(nullable: true),
                    DisburseDate = table.Column<DateTime>(nullable: true),
                    loanNewType = table.Column<string>(nullable: true),
                    sanctionAmount = table.Column<decimal>(nullable: true),
                    sanctionDate = table.Column<DateTime>(nullable: true),
                    firstInstallmentDate = table.Column<DateTime>(nullable: true),
                    loanTenure = table.Column<DateTime>(nullable: true),
                    InstallmentType = table.Column<int>(nullable: true),
                    DeductionAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StaffLoan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StaffLoan_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StaffLoan_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StaffLoan_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StaffLoan_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StaffLoan_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BuyerItemMapping",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemCategoryId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BuyerItemMapping", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BuyerItemMapping_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BuyerItemMapping_ItemCategory_itemCategoryId",
                        column: x => x.itemCategoryId,
                        principalSchema: "SCM",
                        principalTable: "ItemCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUPayment",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    IOUId = table.Column<int>(nullable: true),
                    iOUPaymentMasterId = table.Column<int>(nullable: true),
                    iouAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    paymentAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    adjustmentAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    balance = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    statusInfoId = table.Column<int>(nullable: true),
                    paymentBy = table.Column<int>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    adjustmentBy = table.Column<int>(nullable: true),
                    adjustmentDate = table.Column<DateTime>(nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    receivebyId = table.Column<int>(nullable: true),
                    receiveDate = table.Column<DateTime>(nullable: true),
                    paymentMode = table.Column<string>(nullable: true),
                    chequeNo = table.Column<string>(nullable: true),
                    bankName = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUPayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUPayment_IOUMaster_IOUId",
                        column: x => x.IOUId,
                        principalSchema: "SCM",
                        principalTable: "IOUMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUPayment_IOUPaymentMaster_iOUPaymentMasterId",
                        column: x => x.iOUPaymentMasterId,
                        principalSchema: "SCM",
                        principalTable: "IOUPaymentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUPayment_EmployeeInfo_receivebyId",
                        column: x => x.receivebyId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUPayment_StatusInfo_statusInfoId",
                        column: x => x.statusInfoId,
                        principalSchema: "SCM",
                        principalTable: "StatusInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RequisitionMasters",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    reqNo = table.Column<string>(maxLength: 150, nullable: true),
                    reqDate = table.Column<DateTime>(nullable: true),
                    targetDate = table.Column<DateTime>(nullable: true),
                    justification = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    deliveryaddress = table.Column<string>(nullable: true),
                    reqBy = table.Column<int>(nullable: true),
                    reqDept = table.Column<string>(maxLength: 200, nullable: true),
                    projectId = table.Column<int>(nullable: true),
                    reqType = table.Column<string>(maxLength: 50, nullable: true),
                    teamMasterId = table.Column<int>(nullable: true),
                    assignDate = table.Column<DateTime>(nullable: true),
                    approveDate = table.Column<DateTime>(nullable: true),
                    isPostPR = table.Column<string>(maxLength: 50, nullable: true),
                    isActive = table.Column<int>(nullable: false),
                    statusInfoId = table.Column<int>(nullable: true),
                    fundSourceId = table.Column<int>(nullable: true),
                    employeeinfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequisitionMasters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RequisitionMasters_EmployeeInfo_employeeinfoId",
                        column: x => x.employeeinfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionMasters_FundSource_fundSourceId",
                        column: x => x.fundSourceId,
                        principalSchema: "ACCOUNT",
                        principalTable: "FundSource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionMasters_Project_projectId",
                        column: x => x.projectId,
                        principalSchema: "SCM",
                        principalTable: "Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionMasters_StatusInfo_statusInfoId",
                        column: x => x.statusInfoId,
                        principalSchema: "SCM",
                        principalTable: "StatusInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionMasters_TeamMaster_teamMasterId",
                        column: x => x.teamMasterId,
                        principalSchema: "SCM",
                        principalTable: "TeamMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VisitorEntryMaster",
                schema: "Shagotom",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VisitorEntryMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VisitorEntryMaster_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskInformation",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    problemMasterId = table.Column<int>(nullable: true),
                    name = table.Column<string>(maxLength: 400, nullable: true),
                    description = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    employeeAssignId = table.Column<int>(nullable: true),
                    satrtDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    estimatedHours = table.Column<decimal>(nullable: true),
                    taskSectionId = table.Column<int>(nullable: true),
                    activityStatusId = table.Column<int>(nullable: true),
                    activityCategoryId = table.Column<int>(nullable: true),
                    activitySessionId = table.Column<int>(nullable: true),
                    activityTypeId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskInformation_ActivityCategory_activityCategoryId",
                        column: x => x.activityCategoryId,
                        principalSchema: "CRM",
                        principalTable: "ActivityCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_ActivitySession_activitySessionId",
                        column: x => x.activitySessionId,
                        principalSchema: "CRM",
                        principalTable: "ActivitySession",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_ActivityStatus_activityStatusId",
                        column: x => x.activityStatusId,
                        principalSchema: "CRM",
                        principalTable: "ActivityStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_ActivityType_activityTypeId",
                        column: x => x.activityTypeId,
                        principalSchema: "CRM",
                        principalTable: "ActivityType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_EmployeeInfo_employeeAssignId",
                        column: x => x.employeeAssignId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_ProblemMaster_problemMasterId",
                        column: x => x.problemMasterId,
                        principalSchema: "SEBA",
                        principalTable: "ProblemMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskInformation_TaskSection_taskSectionId",
                        column: x => x.taskSectionId,
                        principalSchema: "TMS",
                        principalTable: "TaskSection",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Doc",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    number = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    content = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    Date = table.Column<DateTime>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isInitial = table.Column<int>(nullable: true),
                    noteType = table.Column<string>(nullable: true),
                    docId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Doc", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Doc_Doc_docId",
                        column: x => x.docId,
                        principalSchema: "WMS",
                        principalTable: "Doc",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Doc_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "loanPolicyDetails",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    loanPolicyId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_loanPolicyDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_loanPolicyDetails_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_loanPolicyDetails_loanPolicyNews_loanPolicyId",
                        column: x => x.loanPolicyId,
                        principalTable: "loanPolicyNews",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssignDocument",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    documentMasterId = table.Column<int>(nullable: true),
                    documentPhotoAttachmentId = table.Column<int>(nullable: true),
                    isViewed = table.Column<int>(nullable: true),
                    hasEmployee = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssignDocument", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssignDocument_DocumentMaster_documentMasterId",
                        column: x => x.documentMasterId,
                        principalSchema: "Doc",
                        principalTable: "DocumentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignDocument_DocumentPhotoAttachments_documentPhotoAttachmentId",
                        column: x => x.documentPhotoAttachmentId,
                        principalTable: "DocumentPhotoAttachments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignDocument_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssignDocumentMaster",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    documentMasterId = table.Column<int>(nullable: true),
                    isViewed = table.Column<int>(nullable: true),
                    hasEmployee = table.Column<string>(maxLength: 10, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssignDocumentMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssignDocumentMaster_DocumentMaster_documentMasterId",
                        column: x => x.documentMasterId,
                        principalSchema: "Doc",
                        principalTable: "DocumentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignDocumentMaster_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentDetail",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    documentMasterId = table.Column<int>(nullable: true),
                    fieldSettingId = table.Column<int>(nullable: true),
                    fileldValue = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentDetail_DocumentMaster_documentMasterId",
                        column: x => x.documentMasterId,
                        principalSchema: "Doc",
                        principalTable: "DocumentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DocumentDetail_FieldSettings_fieldSettingId",
                        column: x => x.fieldSettingId,
                        principalSchema: "Doc",
                        principalTable: "FieldSettings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentStatusLog",
                schema: "Doc",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    documentMasterId = table.Column<int>(nullable: true),
                    documentStatus = table.Column<string>(maxLength: 450, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentStatusLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentStatusLog_DocumentMaster_documentMasterId",
                        column: x => x.documentMasterId,
                        principalSchema: "Doc",
                        principalTable: "DocumentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrEvaluationValue",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrInitiateId = table.Column<int>(nullable: false),
                    acrEvaluationDetailId = table.Column<int>(nullable: false),
                    marks = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrEvaluationValue", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrEvaluationValue_AcrEvaluationDetail_acrEvaluationDetailId",
                        column: x => x.acrEvaluationDetailId,
                        principalSchema: "HR",
                        principalTable: "AcrEvaluationDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AcrEvaluationValue_AcrInitiate_acrInitiateId",
                        column: x => x.acrInitiateId,
                        principalSchema: "HR",
                        principalTable: "AcrInitiate",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AcrHealthInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrInitiateId = table.Column<int>(nullable: true),
                    height = table.Column<string>(nullable: true),
                    weight = table.Column<string>(nullable: true),
                    vision = table.Column<string>(nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    bloodPressure = table.Column<string>(nullable: true),
                    xray = table.Column<string>(nullable: true),
                    ecg = table.Column<string>(nullable: true),
                    treatementClassification = table.Column<string>(nullable: true),
                    physicalDisorder = table.Column<string>(nullable: true),
                    signDate = table.Column<DateTime>(nullable: true),
                    hoName = table.Column<string>(nullable: true),
                    hoDesignation = table.Column<string>(nullable: true),
                    hoOrganization = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrHealthInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrHealthInfo_AcrInitiate_acrInitiateId",
                        column: x => x.acrInitiateId,
                        principalSchema: "HR",
                        principalTable: "AcrInitiate",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrPersonalWorkDescription",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrInitiateId = table.Column<int>(nullable: false),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrPersonalWorkDescription", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrPersonalWorkDescription_AcrInitiate_acrInitiateId",
                        column: x => x.acrInitiateId,
                        principalSchema: "HR",
                        principalTable: "AcrInitiate",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AcrRoute",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    supervisorId = table.Column<int>(nullable: true),
                    acrInitiateId = table.Column<int>(nullable: false),
                    sequence = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrRoute_AcrInitiate_acrInitiateId",
                        column: x => x.acrInitiateId,
                        principalSchema: "HR",
                        principalTable: "AcrInitiate",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AcrRoute_EmployeeInfo_supervisorId",
                        column: x => x.supervisorId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ACRProcess",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrSeduleId = table.Column<int>(nullable: false),
                    aCRScheduleId = table.Column<int>(nullable: true),
                    sequence = table.Column<int>(nullable: true),
                    actorId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    actionType = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    routingType = table.Column<string>(nullable: true),
                    dueDate = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ACRProcess", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ACRProcess_ACRSchedule_aCRScheduleId",
                        column: x => x.aCRScheduleId,
                        principalSchema: "HR",
                        principalTable: "ACRSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ACRProcess_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApprovalDetail",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    approvalMasterId = table.Column<int>(nullable: true),
                    approverId = table.Column<int>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovalDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApprovalDetail_ApprovalMaster_approvalMasterId",
                        column: x => x.approvalMasterId,
                        principalSchema: "HR",
                        principalTable: "ApprovalMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApprovalDetail_EmployeeInfo_approverId",
                        column: x => x.approverId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AttendanceRoute",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    attendanceUpdateApplyId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    routeOrder = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttendanceRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AttendanceRoute_AttendanceUpdateApply_attendanceUpdateApplyId",
                        column: x => x.attendanceUpdateApplyId,
                        principalSchema: "HR",
                        principalTable: "AttendanceUpdateApply",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AttendanceRoute_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AwardAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    awardId = table.Column<int>(nullable: false),
                    type = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    uploadFile = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AwardAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AwardAttachment_AwardEntry_awardId",
                        column: x => x.awardId,
                        principalSchema: "HR",
                        principalTable: "AwardEntry",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PosCollectionMaster",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    posCustomerId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    collectionAmount = table.Column<decimal>(nullable: true),
                    collectionNumber = table.Column<string>(maxLength: 100, nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    cardAmount = table.Column<decimal>(nullable: true),
                    mobileAmount = table.Column<decimal>(nullable: true),
                    bankInfoId = table.Column<int>(nullable: true),
                    cardTypeId = table.Column<int>(nullable: true),
                    mobileBankingTypeId = table.Column<int>(nullable: true),
                    trxNumber = table.Column<string>(maxLength: 200, nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosCollectionMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosCollectionMaster_BankInfo_bankInfoId",
                        column: x => x.bankInfoId,
                        principalSchema: "HR",
                        principalTable: "BankInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosCollectionMaster_CardType_cardTypeId",
                        column: x => x.cardTypeId,
                        principalSchema: "POS",
                        principalTable: "CardType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosCollectionMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosCollectionMaster_MobileBankingType_mobileBankingTypeId",
                        column: x => x.mobileBankingTypeId,
                        principalSchema: "POS",
                        principalTable: "MobileBankingType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosCollectionMaster_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosCollectionMaster_PosCustomer_posCustomerId",
                        column: x => x.posCustomerId,
                        principalSchema: "POS",
                        principalTable: "PosCustomer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosCollectionMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ChildrenEducation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    childrenId = table.Column<int>(nullable: true),
                    institution = table.Column<string>(nullable: true),
                    levelOfEducationId = table.Column<int>(nullable: true),
                    degreeId = table.Column<int>(nullable: true),
                    majorSubject = table.Column<string>(nullable: true),
                    passingYear = table.Column<string>(nullable: true),
                    resultType = table.Column<string>(nullable: true),
                    result = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ChildrenEducation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ChildrenEducation_Children_childrenId",
                        column: x => x.childrenId,
                        principalSchema: "HR",
                        principalTable: "Children",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ChildrenEducation_Degree_degreeId",
                        column: x => x.degreeId,
                        principalSchema: "HR",
                        principalTable: "Degree",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ChildrenEducation_LevelofEducation_levelOfEducationId",
                        column: x => x.levelOfEducationId,
                        principalSchema: "HR",
                        principalTable: "LevelofEducation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DisiciplinaryAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    disiplinaryId = table.Column<int>(nullable: false),
                    disciplinaryId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    uploadFile = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DisiciplinaryAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DisiciplinaryAttachment_DisciplinaryAction_disciplinaryId",
                        column: x => x.disciplinaryId,
                        principalSchema: "HR",
                        principalTable: "DisciplinaryAction",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalaryActivityPercent",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeProjectActivityId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    Amount = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryActivityPercent", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryActivityPercent_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryActivityPercent_EmployeeProjectActivity_employeeProjectActivityId",
                        column: x => x.employeeProjectActivityId,
                        principalSchema: "HR",
                        principalTable: "EmployeeProjectActivity",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeJoiningLetter",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeReleaseInfoId = table.Column<int>(nullable: true),
                    joinedEmpId = table.Column<int>(nullable: true),
                    empName = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    joingDepartmentId = table.Column<int>(nullable: true),
                    joingDepartment = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    joiningDate = table.Column<DateTime>(nullable: true),
                    joiningTime = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeJoiningLetter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeJoiningLetter_EmployeeReleaseInfo_employeeReleaseInfoId",
                        column: x => x.employeeReleaseInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeReleaseInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitInterviewComment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    exitInterviewMasterId = table.Column<int>(nullable: true),
                    interviewCommentId = table.Column<int>(nullable: true),
                    commentText = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitInterviewComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitInterviewComment_ExitInterviewMaster_exitInterviewMasterId",
                        column: x => x.exitInterviewMasterId,
                        principalSchema: "HR",
                        principalTable: "ExitInterviewMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitInterviewComment_interviewComments_interviewCommentId",
                        column: x => x.interviewCommentId,
                        principalTable: "interviewComments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitInterviewFeelAndFollowings",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    exitInterviewMasterId = table.Column<int>(nullable: true),
                    feelAboutTheFollowingId = table.Column<int>(nullable: true),
                    feelAboutFollowinsText = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitInterviewFeelAndFollowings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitInterviewFeelAndFollowings_ExitInterviewMaster_exitInterviewMasterId",
                        column: x => x.exitInterviewMasterId,
                        principalSchema: "HR",
                        principalTable: "ExitInterviewMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitInterviewFeelAndFollowings_feelAboutTheFollowings_feelAboutTheFollowingId",
                        column: x => x.feelAboutTheFollowingId,
                        principalTable: "feelAboutTheFollowings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitInterviewPayNBenefits",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    exitInterviewMasterId = table.Column<int>(nullable: true),
                    payAndBenefitsId = table.Column<int>(nullable: true),
                    payAndBenefitsText = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitInterviewPayNBenefits", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitInterviewPayNBenefits_ExitInterviewMaster_exitInterviewMasterId",
                        column: x => x.exitInterviewMasterId,
                        principalSchema: "HR",
                        principalTable: "ExitInterviewMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitInterviewPayNBenefits_payAndBenefits_payAndBenefitsId",
                        column: x => x.payAndBenefitsId,
                        principalTable: "payAndBenefits",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitInterviewReasonOfLeaving",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    exitInterviewMasterId = table.Column<int>(nullable: true),
                    reasonForLeavingId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitInterviewReasonOfLeaving", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitInterviewReasonOfLeaving_ExitInterviewMaster_exitInterviewMasterId",
                        column: x => x.exitInterviewMasterId,
                        principalSchema: "HR",
                        principalTable: "ExitInterviewMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitInterviewReasonOfLeaving_reasonForLeavings_reasonForLeavingId",
                        column: x => x.reasonForLeavingId,
                        principalTable: "reasonForLeavings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitInterviewSuggestion",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    exitInterviewMasterId = table.Column<int>(nullable: true),
                    commentORSuggestionId = table.Column<int>(nullable: true),
                    suggestionText = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitInterviewSuggestion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitInterviewSuggestion_commentORSuggestions_commentORSuggestionId",
                        column: x => x.commentORSuggestionId,
                        principalTable: "commentORSuggestions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitInterviewSuggestion_ExitInterviewMaster_exitInterviewMasterId",
                        column: x => x.exitInterviewMasterId,
                        principalSchema: "HR",
                        principalTable: "ExitInterviewMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HandoverTakeoverDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    masterId = table.Column<int>(nullable: true),
                    taskName = table.Column<string>(nullable: true),
                    taskDetails = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    file = table.Column<string>(nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HandoverTakeoverDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HandoverTakeoverDetails_HandoverTakeoverMaster_masterId",
                        column: x => x.masterId,
                        principalSchema: "HR",
                        principalTable: "HandoverTakeoverMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeaveCommittee",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    leaveRegisterId = table.Column<int>(nullable: true),
                    memberRoleId = table.Column<int>(nullable: true),
                    empNameBn = table.Column<string>(nullable: true),
                    empNameEng = table.Column<string>(nullable: true),
                    designationBn = table.Column<string>(nullable: true),
                    designationEn = table.Column<string>(nullable: true),
                    departmentBn = table.Column<string>(nullable: true),
                    departmentEn = table.Column<string>(nullable: true),
                    CoYear = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveCommittee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveCommittee_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveCommittee_LeaveRegister_leaveRegisterId",
                        column: x => x.leaveRegisterId,
                        principalSchema: "HR",
                        principalTable: "LeaveRegister",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeaveRoute",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    leaveRegisterId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    routeOrder = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveRoute_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveRoute_LeaveRegister_leaveRegisterId",
                        column: x => x.leaveRegisterId,
                        principalSchema: "HR",
                        principalTable: "LeaveRegister",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LeaveStatusLog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    leaveRegisterId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    comments = table.Column<string>(nullable: true),
                    Status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LeaveStatusLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LeaveStatusLog_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LeaveStatusLog_LeaveRegister_leaveRegisterId",
                        column: x => x.leaveRegisterId,
                        principalSchema: "HR",
                        principalTable: "LeaveRegister",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "NomineeDetail",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nomineeFundId = table.Column<int>(nullable: true),
                    nomineeId = table.Column<int>(nullable: true),
                    persentence = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NomineeDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NomineeDetail_NomineeFund_nomineeFundId",
                        column: x => x.nomineeFundId,
                        principalSchema: "HR",
                        principalTable: "NomineeFund",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_NomineeDetail_Nominee_nomineeId",
                        column: x => x.nomineeId,
                        principalSchema: "HR",
                        principalTable: "Nominee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingAllocation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    postDetailsId = table.Column<int>(nullable: true),
                    priorityLevel = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingAllocation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingAllocation_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingAllocation_PostDetails_postDetailsId",
                        column: x => x.postDetailsId,
                        principalSchema: "HR",
                        principalTable: "PostDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingAllocation_TrainingInfo_trainingInfoId",
                        column: x => x.trainingInfoId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PRLAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    prlApplicationid = table.Column<int>(nullable: false),
                    type = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    uploadFile = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PRLAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PRLAttachment_PRLApplication_prlApplicationid",
                        column: x => x.prlApplicationid,
                        principalSchema: "HR",
                        principalTable: "PRLApplication",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PromotionAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    promotionId = table.Column<int>(nullable: false),
                    type = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    uploadFile = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PromotionAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PromotionAttachment_PromotionEntry_promotionId",
                        column: x => x.promotionId,
                        principalSchema: "HR",
                        principalTable: "PromotionEntry",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PublicationAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    publicationId = table.Column<int>(nullable: false),
                    type = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    uploadFile = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PublicationAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PublicationAttachment_PublicationEntry_publicationId",
                        column: x => x.publicationId,
                        principalSchema: "HR",
                        principalTable: "PublicationEntry",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "TrainingInfoNew",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    year = table.Column<string>(nullable: true),
                    course = table.Column<string>(nullable: true),
                    budget = table.Column<string>(nullable: true),
                    noOfParticipants = table.Column<int>(nullable: false),
                    noOfParticipantsActual = table.Column<int>(nullable: true),
                    employeeTypeId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    trainingCategoryId = table.Column<int>(nullable: true),
                    trainingInstituteId = table.Column<int>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    startDateActual = table.Column<DateTime>(nullable: true),
                    endDateActual = table.Column<DateTime>(nullable: true),
                    startTime = table.Column<string>(nullable: true),
                    endTime = table.Column<string>(nullable: true),
                    durationMinutes = table.Column<string>(nullable: true),
                    amount = table.Column<string>(nullable: true),
                    amountActual = table.Column<string>(nullable: true),
                    location = table.Column<string>(nullable: true),
                    courseObjective = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    trainingType = table.Column<int>(nullable: true),
                    orgType = table.Column<string>(nullable: true),
                    employeeTypes = table.Column<string>(nullable: true),
                    employeeTypeNames = table.Column<string>(nullable: true),
                    subjects = table.Column<string>(nullable: true),
                    subjectNames = table.Column<string>(nullable: true),
                    subjectId = table.Column<int>(nullable: true),
                    trainerId = table.Column<int>(nullable: true),
                    instituteId = table.Column<int>(nullable: true),
                    sourceOfFundId = table.Column<int>(nullable: true),
                    courseTypeId = table.Column<int>(nullable: true),
                    honorarium = table.Column<decimal>(nullable: true),
                    url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingInfoNew", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_CourseType_courseTypeId",
                        column: x => x.courseTypeId,
                        principalSchema: "HR",
                        principalTable: "CourseType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_EmployeeType_employeeTypeId",
                        column: x => x.employeeTypeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_TrainingInstitute_instituteId",
                        column: x => x.instituteId,
                        principalSchema: "HR",
                        principalTable: "TrainingInstitute",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_SourceOfFund_sourceOfFundId",
                        column: x => x.sourceOfFundId,
                        principalSchema: "HR",
                        principalTable: "SourceOfFund",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_TrainingSubject_subjectId",
                        column: x => x.subjectId,
                        principalSchema: "HR",
                        principalTable: "TrainingSubject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_ResourcePerson_trainerId",
                        column: x => x.trainerId,
                        principalSchema: "HR",
                        principalTable: "ResourcePerson",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_TrainingCategory_trainingCategoryId",
                        column: x => x.trainingCategoryId,
                        principalSchema: "HR",
                        principalTable: "TrainingCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoNew_TrainingInstitute_trainingInstituteId",
                        column: x => x.trainingInstituteId,
                        principalSchema: "HR",
                        principalTable: "TrainingInstitute",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Evaluation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoId = table.Column<int>(nullable: true),
                    trainerId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    evaluationFectorsId = table.Column<int>(nullable: true),
                    optainedValue = table.Column<string>(nullable: true),
                    comment = table.Column<string>(nullable: true),
                    evaluationDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Evaluation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Evaluation_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Evaluation_EvaluationFectors_evaluationFectorsId",
                        column: x => x.evaluationFectorsId,
                        principalSchema: "HR",
                        principalTable: "EvaluationFectors",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Evaluation_Trainer_trainerId",
                        column: x => x.trainerId,
                        principalSchema: "HR",
                        principalTable: "Trainer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Evaluation_TrainingInfo_trainingInfoId",
                        column: x => x.trainingInfoId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RlnTrainingTrainer",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainerId = table.Column<int>(nullable: true),
                    trainingOfferId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RlnTrainingTrainer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RlnTrainingTrainer_Trainer_trainerId",
                        column: x => x.trainerId,
                        principalSchema: "HR",
                        principalTable: "Trainer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RlnTrainingTrainer_TrainingOffer_trainingOfferId",
                        column: x => x.trainingOfferId,
                        principalSchema: "HR",
                        principalTable: "TrainingOffer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingExam",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    trainingInfoId = table.Column<int>(nullable: true),
                    trainerId = table.Column<int>(nullable: true),
                    startTimestamp = table.Column<DateTime>(nullable: true),
                    endTimestamp = table.Column<DateTime>(nullable: true),
                    modeOfExam = table.Column<string>(nullable: true),
                    syllabus = table.Column<string>(nullable: true),
                    maxValue = table.Column<string>(nullable: true),
                    minValue = table.Column<string>(nullable: true),
                    unit = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingExam", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingExam_Trainer_trainerId",
                        column: x => x.trainerId,
                        principalSchema: "HR",
                        principalTable: "Trainer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingExam_TrainingInfo_trainingInfoId",
                        column: x => x.trainingInfoId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingInfoDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    startTimestamp = table.Column<string>(nullable: true),
                    endTimestamp = table.Column<string>(nullable: true),
                    trainerId = table.Column<int>(nullable: true),
                    content = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingInfoDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingInfoDetails_Trainer_trainerId",
                        column: x => x.trainerId,
                        principalSchema: "HR",
                        principalTable: "Trainer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingInfoDetails_TrainingInfo_trainingInfoId",
                        column: x => x.trainingInfoId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TransferAttachment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taransferId = table.Column<int>(nullable: false),
                    transferId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    uploadFile = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransferAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransferAttachment_TransferEntry_transferId",
                        column: x => x.transferId,
                        principalSchema: "HR",
                        principalTable: "TransferEntry",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TravellerInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    travelMasterId = table.Column<int>(nullable: true),
                    employeeID = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TravellerInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TravellerInfo_EmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TravellerInfo_TravelMaster_travelMasterId",
                        column: x => x.travelMasterId,
                        principalSchema: "HR",
                        principalTable: "TravelMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TravellingInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    travelMasterId = table.Column<int>(nullable: true),
                    travellingFrom = table.Column<string>(nullable: true),
                    travellingTo = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    arrivalDate = table.Column<DateTime>(nullable: true),
                    startTime = table.Column<string>(nullable: true),
                    arrivalTime = table.Column<string>(nullable: true),
                    travelVehicleTypeId = table.Column<int>(nullable: true),
                    vehicleNumber = table.Column<string>(nullable: true),
                    driverName = table.Column<string>(nullable: true),
                    driverContactNumber = table.Column<string>(nullable: true),
                    accommodationDaaress = table.Column<string>(nullable: true),
                    bookingRequird = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TravellingInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TravellingInfo_TravelMaster_travelMasterId",
                        column: x => x.travelMasterId,
                        principalSchema: "HR",
                        principalTable: "TravelMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TravellingInfo_TravelVehicleType_travelVehicleTypeId",
                        column: x => x.travelVehicleTypeId,
                        principalSchema: "HR",
                        principalTable: "TravelVehicleType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TravelRoute",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    travelMasterId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    routeOrder = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TravelRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TravelRoute_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TravelRoute_TravelMaster_travelMasterId",
                        column: x => x.travelMasterId,
                        principalSchema: "HR",
                        principalTable: "TravelMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TravelStatusLog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    travelMasterId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    date = table.Column<DateTime>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    Status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TravelStatusLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TravelStatusLog_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TravelStatusLog_TravelMaster_travelMasterId",
                        column: x => x.travelMasterId,
                        principalSchema: "HR",
                        principalTable: "TravelMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MessageBoxInfo",
                schema: "MBox",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    message = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    messageBoxId = table.Column<int>(nullable: true),
                    messageGroupId = table.Column<int>(nullable: true),
                    receiverId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageBoxInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MessageBoxInfo_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MessageBoxInfo_MessageBoxInfo_messageBoxId",
                        column: x => x.messageBoxId,
                        principalSchema: "MBox",
                        principalTable: "MessageBoxInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MessageBoxInfo_MessageGroup_messageGroupId",
                        column: x => x.messageGroupId,
                        principalSchema: "MBox",
                        principalTable: "MessageGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MessageBoxInfo_EmployeeInfo_receiverId",
                        column: x => x.receiverId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MessageGroupMember",
                schema: "MBox",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    messageGroupId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageGroupMember", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MessageGroupMember_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MessageGroupMember_MessageGroup_messageGroupId",
                        column: x => x.messageGroupId,
                        principalSchema: "MBox",
                        principalTable: "MessageGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingDocAttachment",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    docId = table.Column<int>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    title = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingDocAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingDocAttachment_MeetingDocument_docId",
                        column: x => x.docId,
                        principalSchema: "MMS",
                        principalTable: "MeetingDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingDocRoute",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    employeeReplaceId = table.Column<int>(nullable: true),
                    docId = table.Column<int>(nullable: true),
                    actionId = table.Column<int>(nullable: true),
                    order = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingDocRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingDocRoute_MeetingActionInfo_actionId",
                        column: x => x.actionId,
                        principalSchema: "MMS",
                        principalTable: "MeetingActionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDocRoute_MeetingDocument_docId",
                        column: x => x.docId,
                        principalSchema: "MMS",
                        principalTable: "MeetingDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDocRoute_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDocRoute_EmployeeInfo_employeeReplaceId",
                        column: x => x.employeeReplaceId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingAttendance",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    meetingInfoId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    isAttendance = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingAttendance_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingAttendance_MeetingInfo_meetingInfoId",
                        column: x => x.meetingInfoId,
                        principalSchema: "MMS",
                        principalTable: "MeetingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingDetail",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    meetingInfoId = table.Column<int>(nullable: true),
                    docId = table.Column<int>(nullable: true),
                    actionId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingDetail_MeetingActionInfo_actionId",
                        column: x => x.actionId,
                        principalSchema: "MMS",
                        principalTable: "MeetingActionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDetail_MeetingDocument_docId",
                        column: x => x.docId,
                        principalSchema: "MMS",
                        principalTable: "MeetingDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDetail_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDetail_MeetingInfo_meetingInfoId",
                        column: x => x.meetingInfoId,
                        principalSchema: "MMS",
                        principalTable: "MeetingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingDocs",
                schema: "MMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    meetingInfoId = table.Column<int>(nullable: true),
                    docId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingDocs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingDocs_MeetingDocument_docId",
                        column: x => x.docId,
                        principalSchema: "MMS",
                        principalTable: "MeetingDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingDocs_MeetingInfo_meetingInfoId",
                        column: x => x.meetingInfoId,
                        principalSchema: "MMS",
                        principalTable: "MeetingInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AdvanceAdjustmentDetail",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    advanceAdjustmentId = table.Column<int>(nullable: true),
                    scheduleDate = table.Column<DateTime>(nullable: true),
                    paidDate = table.Column<DateTime>(nullable: true),
                    scheduleAmount = table.Column<decimal>(nullable: true),
                    paidAmount = table.Column<decimal>(nullable: true),
                    isPaid = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AdvanceAdjustmentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AdvanceAdjustmentDetail_AdvanceAdjustment_advanceAdjustmentId",
                        column: x => x.advanceAdjustmentId,
                        principalSchema: "Payroll",
                        principalTable: "AdvanceAdjustment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AdvancePayment",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    advanceAdjustmentId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    adjustedAmount = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AdvancePayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AdvancePayment_AdvanceAdjustment_advanceAdjustmentId",
                        column: x => x.advanceAdjustmentId,
                        principalSchema: "Payroll",
                        principalTable: "AdvanceAdjustment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EmployeesArrearStructure",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    arrearMasterId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salarySlabId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    amount = table.Column<decimal>(nullable: false),
                    isActive = table.Column<string>(maxLength: 10, nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeesArrearStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeesArrearStructure_EmployeeArrearInfo_arrearMasterId",
                        column: x => x.arrearMasterId,
                        principalSchema: "Payroll",
                        principalTable: "EmployeeArrearInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeesArrearStructure_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeesArrearStructure_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_EmployeesArrearStructure_SalarySlab_salarySlabId",
                        column: x => x.salarySlabId,
                        principalSchema: "Payroll",
                        principalTable: "SalarySlab",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "LoanRoute",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    loanScheduleMasterId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    routeOrder = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LoanRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LoanRoute_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LoanRoute_LoanScheduleMaster_loanScheduleMasterId",
                        column: x => x.loanScheduleMasterId,
                        principalSchema: "Payroll",
                        principalTable: "LoanScheduleMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LoanScheduleDetail",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    loanScheduleMasterId = table.Column<int>(nullable: true),
                    scheduleDate = table.Column<DateTime>(nullable: true),
                    paidDate = table.Column<DateTime>(nullable: true),
                    scheduleAmount = table.Column<decimal>(nullable: true),
                    paidAmount = table.Column<decimal>(nullable: true),
                    isPaid = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LoanScheduleDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LoanScheduleDetail_LoanScheduleMaster_loanScheduleMasterId",
                        column: x => x.loanScheduleMasterId,
                        principalSchema: "Payroll",
                        principalTable: "LoanScheduleMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LoanLog",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    loanId = table.Column<int>(nullable: true),
                    nextapprover = table.Column<int>(nullable: true),
                    approveOrder = table.Column<int>(nullable: true),
                    ispassed = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LoanLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LoanLog_PFLoan_loanId",
                        column: x => x.loanId,
                        principalSchema: "Payroll",
                        principalTable: "PFLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFLoanPayment",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    pFLoanId = table.Column<int>(nullable: true),
                    paymentAmount = table.Column<decimal>(nullable: false),
                    paymentDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFLoanPayment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFLoanPayment_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PFLoanPayment_PFLoan_pFLoanId",
                        column: x => x.pFLoanId,
                        principalSchema: "Payroll",
                        principalTable: "PFLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StaffLoanLog",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    staffLoanId = table.Column<int>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    particular = table.Column<string>(nullable: true),
                    debit = table.Column<decimal>(nullable: true),
                    credit = table.Column<decimal>(nullable: true),
                    principal = table.Column<decimal>(nullable: true),
                    interest = table.Column<decimal>(nullable: true),
                    charge = table.Column<decimal>(nullable: true),
                    total = table.Column<decimal>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    interestProcessDate = table.Column<DateTime>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    trxNo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StaffLoanLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StaffLoanLog_StaffLoan_staffLoanId",
                        column: x => x.staffLoanId,
                        principalSchema: "Payroll",
                        principalTable: "StaffLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StaffLoanSchedule",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    staffLoanId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    installmentAmount = table.Column<decimal>(nullable: false),
                    restAmount = table.Column<decimal>(nullable: false),
                    noOfInstallment = table.Column<int>(nullable: false),
                    isComplete = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StaffLoanSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StaffLoanSchedule_StaffLoan_staffLoanId",
                        column: x => x.staffLoanId,
                        principalSchema: "Payroll",
                        principalTable: "StaffLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CSMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionId = table.Column<int>(nullable: true),
                    csNo = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    csDate = table.Column<DateTime>(nullable: true),
                    csStatus = table.Column<int>(nullable: true),
                    expectedDeliveryDate = table.Column<DateTime>(nullable: true),
                    rfqRefNo = table.Column<string>(maxLength: 200, nullable: true),
                    userId = table.Column<int>(nullable: true),
                    procurementTypeId = table.Column<int>(nullable: true),
                    procurementValueId = table.Column<int>(nullable: true),
                    rFQMasterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CSMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CSMaster_ProcurementType_procurementTypeId",
                        column: x => x.procurementTypeId,
                        principalSchema: "SCM",
                        principalTable: "ProcurementType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CSMaster_ProcurementValue_procurementValueId",
                        column: x => x.procurementValueId,
                        principalSchema: "SCM",
                        principalTable: "ProcurementValue",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CSMaster_RFQMaster_rFQMasterId",
                        column: x => x.rFQMasterId,
                        principalSchema: "SCM",
                        principalTable: "RFQMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CSMaster_RequisitionMasters_requisitionId",
                        column: x => x.requisitionId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "JobAssignMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionId = table.Column<int>(nullable: true),
                    teamId = table.Column<int>(nullable: true),
                    assignDate = table.Column<DateTime>(nullable: true),
                    statusId = table.Column<int>(nullable: true),
                    assignTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobAssignMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_JobAssignMaster_JobAssignType_assignTypeId",
                        column: x => x.assignTypeId,
                        principalSchema: "SCM",
                        principalTable: "JobAssignType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_JobAssignMaster_RequisitionMasters_requisitionId",
                        column: x => x.requisitionId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_JobAssignMaster_TeamMaster_teamId",
                        column: x => x.teamId,
                        principalSchema: "SCM",
                        principalTable: "TeamMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MatrixChangeHistory",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: false),
                    matrixTypeId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: false),
                    nextApproverId = table.Column<int>(nullable: true),
                    notes = table.Column<string>(type: "nvarchar(500)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MatrixChangeHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MatrixChangeHistory_MatrixType_matrixTypeId",
                        column: x => x.matrixTypeId,
                        principalSchema: "SCM",
                        principalTable: "MatrixType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MatrixChangeHistory_RequisitionMasters_requisitionMasterId",
                        column: x => x.requisitionMasterId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RequisitionDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: false),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    teamMemberId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    reqQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    reqRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    targetDate = table.Column<DateTime>(nullable: true),
                    justification = table.Column<string>(nullable: true),
                    budgetCode = table.Column<string>(nullable: true),
                    jobAssignDate = table.Column<DateTime>(nullable: true),
                    deliveryLocation = table.Column<string>(nullable: true),
                    purchaseType = table.Column<int>(nullable: true),
                    ProcessType = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequisitionDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RequisitionDetails_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionDetails_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionDetails_RequisitionMasters_requisitionMasterId",
                        column: x => x.requisitionMasterId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RequisitionDetails_TeamMember_teamMemberId",
                        column: x => x.teamMemberId,
                        principalSchema: "SCM",
                        principalTable: "TeamMember",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VisitorEntryDetails",
                schema: "Shagotom",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    visitorEntryMasterId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    company = table.Column<string>(nullable: true),
                    imgUrl = table.Column<string>(nullable: true),
                    cardNo = table.Column<string>(nullable: true),
                    date = table.Column<string>(nullable: true),
                    time = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VisitorEntryDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VisitorEntryDetails_VisitorEntryMaster_visitorEntryMasterId",
                        column: x => x.visitorEntryMasterId,
                        principalSchema: "Shagotom",
                        principalTable: "VisitorEntryMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskAttachment",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    fileTitle = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskAttachment_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskComment",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskComment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskComment_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskComment_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskFollower",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskFollower", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskFollower_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskFollower_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskFollowUp",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    name = table.Column<string>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    note = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    activityStatusId = table.Column<int>(nullable: true),
                    activityCategoryId = table.Column<int>(nullable: true),
                    activitySessionId = table.Column<int>(nullable: true),
                    activityTypeId = table.Column<int>(nullable: true),
                    targetDate = table.Column<DateTime>(nullable: true),
                    executionDate = table.Column<DateTime>(nullable: true),
                    reminderDate = table.Column<DateTime>(nullable: true),
                    remainderStatus = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskFollowUp", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskFollowUp_ActivityCategory_activityCategoryId",
                        column: x => x.activityCategoryId,
                        principalSchema: "CRM",
                        principalTable: "ActivityCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskFollowUp_ActivitySession_activitySessionId",
                        column: x => x.activitySessionId,
                        principalSchema: "CRM",
                        principalTable: "ActivitySession",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskFollowUp_ActivityStatus_activityStatusId",
                        column: x => x.activityStatusId,
                        principalSchema: "CRM",
                        principalTable: "ActivityStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskFollowUp_ActivityType_activityTypeId",
                        column: x => x.activityTypeId,
                        principalSchema: "CRM",
                        principalTable: "ActivityType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TaskFollowUp_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskHours",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    hours = table.Column<decimal>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskHours", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskHours_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskStatusList",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    status = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskStatusList", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskStatusList_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskSubtask",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    details = table.Column<string>(nullable: true),
                    satrtDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    statusDetails = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskSubtask", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskSubtask_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TaskTag",
                schema: "TMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    taskInformationId = table.Column<int>(nullable: true),
                    tag = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TaskTag", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TaskTag_TaskInformation_taskInformationId",
                        column: x => x.taskInformationId,
                        principalSchema: "TMS",
                        principalTable: "TaskInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocAttachment",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    docId = table.Column<int>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    title = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocAttachment_Doc_docId",
                        column: x => x.docId,
                        principalSchema: "WMS",
                        principalTable: "Doc",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocRoute",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    employeeReplaceId = table.Column<int>(nullable: true),
                    docId = table.Column<int>(nullable: true),
                    actionId = table.Column<int>(nullable: true),
                    order = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    status = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocRoute_ActionInfo_actionId",
                        column: x => x.actionId,
                        principalSchema: "WMS",
                        principalTable: "ActionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DocRoute_Doc_docId",
                        column: x => x.docId,
                        principalSchema: "WMS",
                        principalTable: "Doc",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DocRoute_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DocRoute_EmployeeInfo_employeeReplaceId",
                        column: x => x.employeeReplaceId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DraftDoc",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    number = table.Column<string>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    content = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    Date = table.Column<DateTime>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isInitial = table.Column<int>(nullable: true),
                    noteType = table.Column<string>(nullable: true),
                    docId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DraftDoc", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DraftDoc_Doc_docId",
                        column: x => x.docId,
                        principalSchema: "WMS",
                        principalTable: "Doc",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DraftDoc_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AcrRouteEvaluation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    acrRouteId = table.Column<int>(nullable: true),
                    acrEvaluationMasterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AcrRouteEvaluation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AcrRouteEvaluation_AcrEvaluationMaster_acrEvaluationMasterId",
                        column: x => x.acrEvaluationMasterId,
                        principalSchema: "HR",
                        principalTable: "AcrEvaluationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AcrRouteEvaluation_AcrRoute_acrRouteId",
                        column: x => x.acrRouteId,
                        principalSchema: "HR",
                        principalTable: "AcrRoute",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PosCollectionDetail",
                schema: "POS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    posCollectionMasterId = table.Column<int>(nullable: true),
                    posInvoiceMasterId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PosCollectionDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PosCollectionDetail_PosCollectionMaster_posCollectionMasterId",
                        column: x => x.posCollectionMasterId,
                        principalSchema: "POS",
                        principalTable: "PosCollectionMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PosCollectionDetail_PosInvoiceMaster_posInvoiceMasterId",
                        column: x => x.posInvoiceMasterId,
                        principalSchema: "POS",
                        principalTable: "PosInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CourseCoordinator",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoNewId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CourseCoordinator", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CourseCoordinator_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CourseCoordinator_TrainingInfoNew_trainingInfoNewId",
                        column: x => x.trainingInfoNewId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EnrolledTrainee",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    workingPlace = table.Column<string>(nullable: true),
                    address = table.Column<string>(nullable: true),
                    NID = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    trainingInfoNewId = table.Column<int>(nullable: true),
                    positon = table.Column<int>(nullable: false),
                    completionStatus = table.Column<string>(nullable: true),
                    result = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    isPresent = table.Column<int>(nullable: true),
                    marks = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EnrolledTrainee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EnrolledTrainee_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EnrolledTrainee_TrainingInfoNew_trainingInfoNewId",
                        column: x => x.trainingInfoNewId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingFeedback",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    feedback = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingFeedback", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingFeedback_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingFeedback_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingHonorarium",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    trainerId = table.Column<int>(nullable: true),
                    CoOrdinatorId = table.Column<int>(nullable: true),
                    coOrdinatorPayment = table.Column<decimal>(nullable: true),
                    receivedMoney = table.Column<decimal>(nullable: true),
                    taxPercentage = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    session = table.Column<int>(nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isPaid = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingHonorarium", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingHonorarium_EmployeeInfo_CoOrdinatorId",
                        column: x => x.CoOrdinatorId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingHonorarium_ResourcePerson_trainerId",
                        column: x => x.trainerId,
                        principalSchema: "HR",
                        principalTable: "ResourcePerson",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingHonorarium_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingPerticipants",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    traineeId = table.Column<int>(nullable: true),
                    attendance = table.Column<int>(nullable: true),
                    marking = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingPerticipants", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingPerticipants_EmployeeInfo_traineeId",
                        column: x => x.traineeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingPerticipants_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingResourcePerson",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoNewId = table.Column<int>(nullable: true),
                    resourcePersonId = table.Column<int>(nullable: true),
                    comments = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingResourcePerson", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingResourcePerson_ResourcePerson_resourcePersonId",
                        column: x => x.resourcePersonId,
                        principalSchema: "HR",
                        principalTable: "ResourcePerson",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingResourcePerson_TrainingInfoNew_trainingInfoNewId",
                        column: x => x.trainingInfoNewId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingSchedule",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    effectiveDate = table.Column<DateTime>(nullable: true),
                    startTime = table.Column<string>(nullable: true),
                    endTime = table.Column<string>(nullable: true),
                    topic = table.Column<string>(nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    trainers = table.Column<string>(nullable: true),
                    isBreak = table.Column<int>(nullable: true),
                    trainerId = table.Column<int>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingSchedule_ResourcePerson_trainerId",
                        column: x => x.trainerId,
                        principalSchema: "HR",
                        principalTable: "ResourcePerson",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingSchedule_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingTaDa",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    purpose = table.Column<string>(nullable: true),
                    cost = table.Column<decimal>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingTaDa", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingTaDa_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExamResult",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingExamId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    optainedMarks = table.Column<string>(nullable: true),
                    comment = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExamResult", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExamResult_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExamResult_TrainingExam_trainingExamId",
                        column: x => x.trainingExamId,
                        principalSchema: "HR",
                        principalTable: "TrainingExam",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SessionAttendance",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingInfoDetailsId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SessionAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SessionAttendance_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SessionAttendance_TrainingInfoDetails_trainingInfoDetailsId",
                        column: x => x.trainingInfoDetailsId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MessageBoxFile",
                schema: "MBox",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    messageBoxId = table.Column<int>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageBoxFile", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MessageBoxFile_MessageBoxInfo_messageBoxId",
                        column: x => x.messageBoxId,
                        principalSchema: "MBox",
                        principalTable: "MessageBoxInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CarLoanSchedule",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    carLoanID = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    restAmount = table.Column<decimal>(nullable: false),
                    installmentAmount = table.Column<decimal>(nullable: false),
                    noOfInstallment = table.Column<int>(nullable: false),
                    isComplete = table.Column<int>(nullable: true),
                    PFLoanPaymentId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CarLoanSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CarLoanSchedule_PFLoanPayment_PFLoanPaymentId",
                        column: x => x.PFLoanPaymentId,
                        principalSchema: "Payroll",
                        principalTable: "PFLoanPayment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CarLoanSchedule_CarLoan_carLoanID",
                        column: x => x.carLoanID,
                        principalSchema: "Payroll",
                        principalTable: "CarLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HomeLoanSchedule",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    homeLoanID = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    restAmount = table.Column<decimal>(nullable: false),
                    installmentAmount = table.Column<decimal>(nullable: false),
                    noOfInstallment = table.Column<int>(nullable: false),
                    isComplete = table.Column<int>(nullable: true),
                    PFLoanPaymentId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HomeLoanSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HomeLoanSchedule_PFLoanPayment_PFLoanPaymentId",
                        column: x => x.PFLoanPaymentId,
                        principalSchema: "Payroll",
                        principalTable: "PFLoanPayment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HomeLoanSchedule_HomeLoan_homeLoanID",
                        column: x => x.homeLoanID,
                        principalSchema: "Payroll",
                        principalTable: "HomeLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFLoanSchedule",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pFLoanId = table.Column<int>(nullable: true),
                    staffLoanId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    restAmount = table.Column<decimal>(nullable: false),
                    installmentAmount = table.Column<decimal>(nullable: false),
                    noOfInstallment = table.Column<int>(nullable: false),
                    isComplete = table.Column<int>(nullable: true),
                    PFLoanPaymentId = table.Column<int>(nullable: true),
                    loanType = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFLoanSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFLoanSchedule_PFLoanPayment_PFLoanPaymentId",
                        column: x => x.PFLoanPaymentId,
                        principalSchema: "Payroll",
                        principalTable: "PFLoanPayment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFLoanSchedule_PFLoan_pFLoanId",
                        column: x => x.pFLoanId,
                        principalSchema: "Payroll",
                        principalTable: "PFLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFLoanSchedule_StaffLoan_staffLoanId",
                        column: x => x.staffLoanId,
                        principalSchema: "Payroll",
                        principalTable: "StaffLoan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Justification",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    cSMasterId = table.Column<int>(nullable: true),
                    justificationTypeId = table.Column<int>(nullable: true),
                    isJustify = table.Column<int>(nullable: true),
                    justificationValue = table.Column<string>(type: "nvarchar(250)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Justification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Justification_CSMaster_cSMasterId",
                        column: x => x.cSMasterId,
                        principalSchema: "SCM",
                        principalTable: "CSMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Justification_JustificationType_justificationTypeId",
                        column: x => x.justificationTypeId,
                        principalSchema: "SCM",
                        principalTable: "JustificationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    poNo = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    poDate = table.Column<DateTime>(nullable: true),
                    csMasterId = table.Column<int>(nullable: true),
                    deliveryDate = table.Column<DateTime>(nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    poStatus = table.Column<int>(nullable: true),
                    deliveryModeId = table.Column<int>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    paymentTermsId = table.Column<int>(nullable: true),
                    billToLocation = table.Column<string>(type: "nvarchar(250)", nullable: true),
                    isCustomise = table.Column<int>(nullable: true),
                    receiveStatus = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    savingAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    savingPercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(300)", nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    rfqRef = table.Column<string>(maxLength: 150, nullable: true),
                    taxPercent = table.Column<decimal>(nullable: true),
                    vatPercent = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    netTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    poType = table.Column<string>(maxLength: 50, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderMaster_CSMaster_csMasterId",
                        column: x => x.csMasterId,
                        principalSchema: "SCM",
                        principalTable: "CSMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderMaster_DeliveryMode_deliveryModeId",
                        column: x => x.deliveryModeId,
                        principalSchema: "SCM",
                        principalTable: "DeliveryMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderMaster_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderMaster_PaymentTerms_paymentTermsId",
                        column: x => x.paymentTermsId,
                        principalSchema: "SCM",
                        principalTable: "PaymentTerms",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderMaster_Organization_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "JobAssignDetail",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobAssignId = table.Column<int>(nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: true),
                    teamMemberId = table.Column<int>(nullable: true),
                    assignDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobAssignDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_JobAssignDetail_JobAssignMaster_jobAssignId",
                        column: x => x.jobAssignId,
                        principalSchema: "SCM",
                        principalTable: "JobAssignMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_JobAssignDetail_TeamMember_teamMemberId",
                        column: x => x.teamMemberId,
                        principalSchema: "SCM",
                        principalTable: "TeamMember",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentAttachmentDetail",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    fileName = table.Column<string>(nullable: true),
                    fileType = table.Column<string>(nullable: true),
                    filePath = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentAttachmentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DocumentAttachmentDetail_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DocumentAttachmentDetail_RequisitionDetails_requisitionDetailId",
                        column: x => x.requisitionDetailId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    IOUId = table.Column<int>(nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: true),
                    rate = table.Column<decimal>(nullable: true),
                    qty = table.Column<decimal>(nullable: true),
                    vatPercent = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    currencyId = table.Column<int>(nullable: true),
                    currencyRate = table.Column<decimal>(nullable: true),
                    deliveryLocationId = table.Column<int>(nullable: true),
                    otherDeliveryLocation = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    description = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    iou_DStatus = table.Column<int>(nullable: true),
                    requisitionId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUDetails_IOUMaster_IOUId",
                        column: x => x.IOUId,
                        principalSchema: "SCM",
                        principalTable: "IOUMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUDetails_Currency_currencyId",
                        column: x => x.currencyId,
                        principalSchema: "SCM",
                        principalTable: "Currency",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUDetails_DeliveryLocation_deliveryLocationId",
                        column: x => x.deliveryLocationId,
                        principalSchema: "SCM",
                        principalTable: "DeliveryLocation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUDetails_RequisitionDetails_requisitionDetailId",
                        column: x => x.requisitionDetailId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PreferableVendors",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: false),
                    organizationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PreferableVendors", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PreferableVendors_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PreferableVendors_RequisitionDetails_requisitionDetailId",
                        column: x => x.requisitionDetailId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RequisitionAssignToTeamLeads",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: true),
                    assignDate = table.Column<DateTime>(nullable: false),
                    assignToUserId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequisitionAssignToTeamLeads", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RequisitionAssignToTeamLeads_RequisitionDetails_requisitionDetailId",
                        column: x => x.requisitionDetailId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionAssignToTeamLeads_RequisitionMasters_requisitionMasterId",
                        column: x => x.requisitionMasterId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RequisitionStatusLogs",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    naUserId = table.Column<int>(nullable: true),
                    nextApproverUserId = table.Column<int>(nullable: true),
                    Status = table.Column<string>(nullable: true),
                    StatusID = table.Column<int>(nullable: true),
                    CSMID = table.Column<int>(nullable: true),
                    PPID = table.Column<int>(nullable: true),
                    POID = table.Column<int>(nullable: true),
                    EntryDate = table.Column<string>(nullable: true),
                    Remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequisitionStatusLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RequisitionStatusLogs_RequisitionDetails_requisitionDetailId",
                        column: x => x.requisitionDetailId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionStatusLogs_RequisitionMasters_requisitionMasterId",
                        column: x => x.requisitionMasterId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RFQReqDetail",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rFQMasterId = table.Column<int>(nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: true),
                    LotNo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RFQReqDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RFQReqDetail_RFQMaster_rFQMasterId",
                        column: x => x.rFQMasterId,
                        principalSchema: "SCM",
                        principalTable: "RFQMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RFQReqDetail_RequisitionDetails_requisitionDetailId",
                        column: x => x.requisitionDetailId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RFQReqDetail_RequisitionMasters_requisitionMasterId",
                        column: x => x.requisitionMasterId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ReviewRoute",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    docRouteId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    actionId = table.Column<int>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReviewRoute", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReviewRoute_ActionInfo_actionId",
                        column: x => x.actionId,
                        principalSchema: "WMS",
                        principalTable: "ActionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReviewRoute_DocRoute_docRouteId",
                        column: x => x.docRouteId,
                        principalSchema: "WMS",
                        principalTable: "DocRoute",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReviewRoute_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DraftAttachment",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    draftDocId = table.Column<int>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    title = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DraftAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DraftAttachment_DraftDoc_draftDocId",
                        column: x => x.draftDocId,
                        principalSchema: "WMS",
                        principalTable: "DraftDoc",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DraftRouting",
                schema: "WMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    draftDocId = table.Column<int>(nullable: true),
                    order = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DraftRouting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DraftRouting_DraftDoc_draftDocId",
                        column: x => x.draftDocId,
                        principalSchema: "WMS",
                        principalTable: "DraftDoc",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DraftRouting_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingAttendance",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    traineeId = table.Column<int>(nullable: true),
                    isPresent = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingAttendance_EnrolledTrainee_traineeId",
                        column: x => x.traineeId,
                        principalSchema: "HR",
                        principalTable: "EnrolledTrainee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingAttendance_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingCertificate",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    traineeId = table.Column<int>(nullable: true),
                    certificateUrl = table.Column<string>(nullable: true),
                    generateDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingCertificate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingCertificate_EnrolledTrainee_traineeId",
                        column: x => x.traineeId,
                        principalSchema: "HR",
                        principalTable: "EnrolledTrainee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingCertificate_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingMarks",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingId = table.Column<int>(nullable: true),
                    traineeId = table.Column<int>(nullable: true),
                    totalMarks = table.Column<int>(nullable: true),
                    obtainedMarks = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingMarks", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingMarks_EnrolledTrainee_traineeId",
                        column: x => x.traineeId,
                        principalSchema: "HR",
                        principalTable: "EnrolledTrainee",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingMarks_TrainingInfoNew_trainingId",
                        column: x => x.trainingId,
                        principalSchema: "HR",
                        principalTable: "TrainingInfoNew",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingScheduleDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    startTime = table.Column<string>(nullable: true),
                    endTime = table.Column<string>(nullable: true),
                    trainingScheduleId = table.Column<int>(nullable: true),
                    isBreak = table.Column<int>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingScheduleDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingScheduleDetails_TrainingSchedule_trainingScheduleId",
                        column: x => x.trainingScheduleId,
                        principalSchema: "HR",
                        principalTable: "TrainingSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingScheduleTrainee",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingScheduleId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingScheduleTrainee", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingScheduleTrainee_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingScheduleTrainee_TrainingSchedule_trainingScheduleId",
                        column: x => x.trainingScheduleId,
                        principalSchema: "HR",
                        principalTable: "TrainingSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TrainingScheduleTrainer",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    trainingScheduleId = table.Column<int>(nullable: true),
                    resourcePersonId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TrainingScheduleTrainer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TrainingScheduleTrainer_ResourcePerson_resourcePersonId",
                        column: x => x.resourcePersonId,
                        principalSchema: "HR",
                        principalTable: "ResourcePerson",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TrainingScheduleTrainer_TrainingSchedule_trainingScheduleId",
                        column: x => x.trainingScheduleId,
                        principalSchema: "HR",
                        principalTable: "TrainingSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseInfo",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    purchaseDate = table.Column<DateTime>(nullable: true),
                    receiveDate = table.Column<DateTime>(nullable: true),
                    challanDate = table.Column<DateTime>(nullable: true),
                    challanNo = table.Column<string>(nullable: true),
                    purchaseOrderMasterId = table.Column<int>(nullable: true),
                    purchaseRate = table.Column<decimal>(nullable: false),
                    quantity = table.Column<decimal>(nullable: false),
                    carringCost = table.Column<decimal>(nullable: true),
                    additionalCost = table.Column<decimal>(nullable: true),
                    purchaseNo = table.Column<string>(nullable: true),
                    registrationTypeId = table.Column<int>(nullable: true),
                    procurementSourceId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseInfo_ProcurementSource_procurementSourceId",
                        column: x => x.procurementSourceId,
                        principalSchema: "FAMS",
                        principalTable: "ProcurementSource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseInfo_PurchaseOrderMaster_purchaseOrderMasterId",
                        column: x => x.purchaseOrderMasterId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseInfo_RegistrationType_registrationTypeId",
                        column: x => x.registrationTypeId,
                        principalSchema: "FAMS",
                        principalTable: "RegistrationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseInfo_Organization_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillReceiveInformation",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    purchaseOrderMasterId = table.Column<int>(nullable: true),
                    billPaymentDate = table.Column<DateTime>(nullable: true),
                    billPaymentNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    billPaymentBy = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    dueAmount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    ispaid = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillReceiveInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillReceiveInformation_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillReceiveInformation_PurchaseOrderMaster_purchaseOrderMasterId",
                        column: x => x.purchaseOrderMasterId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillReceiveInformation_Organization_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseReturnInfoMaster",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    purchaseOrdersMasterId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    isPayClose = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseReturnInfoMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnInfoMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnInfoMaster_PurchaseOrderMaster_purchaseOrdersMasterId",
                        column: x => x.purchaseOrdersMasterId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnInfoMaster_Organization_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnInfoMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PODismissMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    reviseNo = table.Column<string>(nullable: true),
                    purchaseId = table.Column<int>(nullable: true),
                    dismissStatus = table.Column<int>(nullable: true),
                    dismissDate = table.Column<DateTime>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PODismissMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PODismissMaster_PurchaseOrderMaster_purchaseId",
                        column: x => x.purchaseId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "POTermAndCondition",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    purchaseId = table.Column<int>(nullable: true),
                    tarmsType = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_POTermAndCondition", x => x.Id);
                    table.ForeignKey(
                        name: "FK_POTermAndCondition_PurchaseOrderMaster_purchaseId",
                        column: x => x.purchaseId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockMaster",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    StockDate = table.Column<DateTime>(nullable: true),
                    MRNO = table.Column<string>(nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    receiveNo = table.Column<string>(nullable: true),
                    receiveDate = table.Column<DateTime>(nullable: true),
                    receiveBy = table.Column<string>(nullable: true),
                    receiveType = table.Column<string>(nullable: true),
                    receiveMode = table.Column<string>(nullable: true),
                    purchaseId = table.Column<int>(nullable: true),
                    IOUId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    stockStatusId = table.Column<int>(nullable: true),
                    purchaseOrdersMasterId = table.Column<int>(nullable: true),
                    itemReqMasterId = table.Column<int>(nullable: true),
                    productionRequsitionId = table.Column<int>(nullable: true),
                    openingStockId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StockMaster_IOUMaster_IOUId",
                        column: x => x.IOUId,
                        principalSchema: "SCM",
                        principalTable: "IOUMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockMaster_ItemReqMaster_itemReqMasterId",
                        column: x => x.itemReqMasterId,
                        principalSchema: "SCM",
                        principalTable: "ItemReqMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockMaster_OpeningStock_openingStockId",
                        column: x => x.openingStockId,
                        principalSchema: "SCM",
                        principalTable: "OpeningStock",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockMaster_ProductionRequsitionMasters_productionRequsitionId",
                        column: x => x.productionRequsitionId,
                        principalSchema: "PROD",
                        principalTable: "ProductionRequsitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockMaster_PurchaseOrderMaster_purchaseId",
                        column: x => x.purchaseId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockMaster_PurchaseOrdersMasters_purchaseOrdersMasterId",
                        column: x => x.purchaseOrdersMasterId,
                        principalSchema: "Purchase",
                        principalTable: "PurchaseOrdersMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IOUAdjustmentDetaillog",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    iOUAdjustmentDetailId = table.Column<int>(nullable: true),
                    iOUDetailId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IOUAdjustmentDetaillog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentDetaillog_IOUAdjustmentDetail_iOUAdjustmentDetailId",
                        column: x => x.iOUAdjustmentDetailId,
                        principalSchema: "ACCOUNT",
                        principalTable: "IOUAdjustmentDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IOUAdjustmentDetaillog_IOUDetails_iOUDetailId",
                        column: x => x.iOUDetailId,
                        principalSchema: "SCM",
                        principalTable: "IOUDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RFQReqDetailPrice",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    rFQPriceMasterId = table.Column<int>(nullable: true),
                    rFQReqDetailId = table.Column<int>(nullable: true),
                    rate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RFQReqDetailPrice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RFQReqDetailPrice_RFQPriceMaster_rFQPriceMasterId",
                        column: x => x.rFQPriceMasterId,
                        principalSchema: "SCM",
                        principalTable: "RFQPriceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RFQReqDetailPrice_RFQReqDetail_rFQReqDetailId",
                        column: x => x.rFQReqDetailId,
                        principalSchema: "SCM",
                        principalTable: "RFQReqDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetRegistration",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    purchaseInfoId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    depriciationRateId = table.Column<int>(nullable: true),
                    assetNo = table.Column<string>(nullable: true),
                    assetValue = table.Column<decimal>(nullable: true),
                    unitPrice = table.Column<decimal>(nullable: true),
                    quantity = table.Column<decimal>(nullable: false),
                    carringCost = table.Column<decimal>(nullable: true),
                    additionalCost = table.Column<decimal>(nullable: true),
                    assetDescription = table.Column<string>(maxLength: 300, nullable: true),
                    assetSerialNo = table.Column<string>(maxLength: 30, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetRegistration", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetRegistration_DepriciationRate_depriciationRateId",
                        column: x => x.depriciationRateId,
                        principalSchema: "FAMS",
                        principalTable: "DepriciationRate",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetRegistration_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetRegistration_PurchaseInfo_purchaseInfoId",
                        column: x => x.purchaseInfoId,
                        principalSchema: "FAMS",
                        principalTable: "PurchaseInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillPaymentDetail",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    billPaymentMasterId = table.Column<int>(nullable: true),
                    billReceiveInformationId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillPaymentDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillPaymentDetail_BillPaymentMaster_billPaymentMasterId",
                        column: x => x.billPaymentMasterId,
                        principalSchema: "Purchase",
                        principalTable: "BillPaymentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillPaymentDetail_BillReceiveInformation_billReceiveInformationId",
                        column: x => x.billReceiveInformationId,
                        principalSchema: "Purchase",
                        principalTable: "BillReceiveInformation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CreateBillVoucherMaster",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    stockMasterId = table.Column<int>(nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true),
                    ledgerRelationId = table.Column<int>(nullable: true),
                    subledgerRelationId = table.Column<int>(nullable: true),
                    billNumber = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CreateBillVoucherMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherMaster_LedgerRelation_ledgerRelationId",
                        column: x => x.ledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherMaster_StockMaster_stockMasterId",
                        column: x => x.stockMasterId,
                        principalSchema: "SCM",
                        principalTable: "StockMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherMaster_LedgerRelation_subledgerRelationId",
                        column: x => x.subledgerRelationId,
                        principalSchema: "ACCOUNT",
                        principalTable: "LedgerRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherMaster_VoucherMaster_voucherMasterId",
                        column: x => x.voucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PrintHistory",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    matrixTypeId = table.Column<int>(nullable: true),
                    requisitionId = table.Column<int>(nullable: true),
                    cSMasterId = table.Column<int>(nullable: true),
                    purchaseId = table.Column<int>(nullable: true),
                    iOUId = table.Column<int>(nullable: true),
                    stockId = table.Column<int>(nullable: true),
                    iOUPaymentMasterId = table.Column<int>(nullable: true),
                    printStatus = table.Column<int>(nullable: true),
                    printDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PrintHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PrintHistory_CSMaster_cSMasterId",
                        column: x => x.cSMasterId,
                        principalSchema: "SCM",
                        principalTable: "CSMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PrintHistory_IOUMaster_iOUId",
                        column: x => x.iOUId,
                        principalSchema: "SCM",
                        principalTable: "IOUMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PrintHistory_IOUPaymentMaster_iOUPaymentMasterId",
                        column: x => x.iOUPaymentMasterId,
                        principalSchema: "SCM",
                        principalTable: "IOUPaymentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PrintHistory_MatrixType_matrixTypeId",
                        column: x => x.matrixTypeId,
                        principalSchema: "SCM",
                        principalTable: "MatrixType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PrintHistory_PurchaseOrderMaster_purchaseId",
                        column: x => x.purchaseId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PrintHistory_RequisitionMasters_requisitionId",
                        column: x => x.requisitionId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PrintHistory_StockMaster_stockId",
                        column: x => x.stockId,
                        principalSchema: "SCM",
                        principalTable: "StockMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StatusLog",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    matrixTypeId = table.Column<int>(nullable: true),
                    requisitionId = table.Column<int>(nullable: true),
                    cSMasterId = table.Column<int>(nullable: true),
                    purchaseId = table.Column<int>(nullable: true),
                    iOUId = table.Column<int>(nullable: true),
                    stockId = table.Column<int>(nullable: true),
                    iOUPaymentMasterId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(type: "nvarchar(500)", nullable: true),
                    statusInfoId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    empName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    nextEmpName = table.Column<string>(type: "nvarchar(200)", nullable: true),
                    Status = table.Column<string>(type: "nvarchar(200)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StatusLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StatusLog_CSMaster_cSMasterId",
                        column: x => x.cSMasterId,
                        principalSchema: "SCM",
                        principalTable: "CSMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_IOUMaster_iOUId",
                        column: x => x.iOUId,
                        principalSchema: "SCM",
                        principalTable: "IOUMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_IOUPaymentMaster_iOUPaymentMasterId",
                        column: x => x.iOUPaymentMasterId,
                        principalSchema: "SCM",
                        principalTable: "IOUPaymentMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_MatrixType_matrixTypeId",
                        column: x => x.matrixTypeId,
                        principalSchema: "SCM",
                        principalTable: "MatrixType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_PurchaseOrderMaster_purchaseId",
                        column: x => x.purchaseId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_RequisitionMasters_requisitionId",
                        column: x => x.requisitionId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionMasters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_StatusInfo_statusInfoId",
                        column: x => x.statusInfoId,
                        principalSchema: "SCM",
                        principalTable: "StatusInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_StockMaster_stockId",
                        column: x => x.stockId,
                        principalSchema: "SCM",
                        principalTable: "StockMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CSDetail",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    cSMasterId = table.Column<int>(nullable: true),
                    requisitionDetailId = table.Column<int>(nullable: true),
                    qty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    rate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    itemCategoryId = table.Column<int>(nullable: true),
                    rFQReqDetailPriceId = table.Column<int>(nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    currentStatus = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CSDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CSDetail_CSMaster_cSMasterId",
                        column: x => x.cSMasterId,
                        principalSchema: "SCM",
                        principalTable: "CSMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CSDetail_CSItemCategory_itemCategoryId",
                        column: x => x.itemCategoryId,
                        principalSchema: "SCM",
                        principalTable: "CSItemCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CSDetail_RFQReqDetailPrice_rFQReqDetailPriceId",
                        column: x => x.rFQReqDetailPriceId,
                        principalSchema: "SCM",
                        principalTable: "RFQReqDetailPrice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CSDetail_RequisitionDetails_requisitionDetailId",
                        column: x => x.requisitionDetailId,
                        principalSchema: "SCM",
                        principalTable: "RequisitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CSDetail_Organization_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetDepreciation",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    depriciationPeriodId = table.Column<int>(nullable: true),
                    depriciationRate = table.Column<decimal>(nullable: true),
                    depriciationValue = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetDepreciation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetDepreciation_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetDepreciation_DepriciationPeriod_depriciationPeriodId",
                        column: x => x.depriciationPeriodId,
                        principalSchema: "FAMS",
                        principalTable: "DepriciationPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetOverhauling",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    overhaulingDate = table.Column<DateTime>(nullable: true),
                    overhaulingCost = table.Column<decimal>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetOverhauling", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetOverhauling_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetReceives",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    receiveDate = table.Column<DateTime>(nullable: true),
                    receiveBy = table.Column<string>(nullable: true),
                    sendBy = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetReceives", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetReceives_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetRejects",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    rejectDate = table.Column<DateTime>(nullable: true),
                    rejectBy = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetRejects", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetRejects_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetRetirements",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    assetRetirementTypeId = table.Column<int>(nullable: true),
                    retirementDate = table.Column<DateTime>(nullable: true),
                    causeOfRetirement = table.Column<string>(nullable: true),
                    scrapValue = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetRetirements", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetRetirements_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetRetirements_AssetRetirementTypes_assetRetirementTypeId",
                        column: x => x.assetRetirementTypeId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRetirementTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetWarrenty",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    categoryHead = table.Column<string>(nullable: true),
                    warrentyDate = table.Column<DateTime>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetWarrenty", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetWarrenty_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DepriciationInfo",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    depriciationPeriodId = table.Column<int>(nullable: true),
                    depriciationRate = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DepriciationInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DepriciationInfo_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DepriciationInfo_DepriciationPeriod_depriciationPeriodId",
                        column: x => x.depriciationPeriodId,
                        principalSchema: "FAMS",
                        principalTable: "DepriciationPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ClaimRegister",
                schema: "REMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    claimDate = table.Column<DateTime>(nullable: true),
                    claimNumber = table.Column<string>(type: "nvarchar(120)", nullable: true),
                    claimDescription = table.Column<string>(nullable: true),
                    statusId = table.Column<int>(nullable: true),
                    userId = table.Column<int>(nullable: true),
                    isWarrenty = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClaimRegister", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ClaimRegister_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ClaimRegister_ClaimStatusInfo_statusId",
                        column: x => x.statusId,
                        principalSchema: "REMS",
                        principalTable: "ClaimStatusInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CreateBillVoucherAttachment",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    createBillVoucherMasterId = table.Column<int>(nullable: true),
                    fileName = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CreateBillVoucherAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherAttachment_CreateBillVoucherMaster_createBillVoucherMasterId",
                        column: x => x.createBillVoucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "CreateBillVoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DeliveryStructure",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    cSDetailId = table.Column<int>(nullable: true),
                    DeliveryDate = table.Column<string>(nullable: true),
                    LocationId = table.Column<int>(nullable: false),
                    Qty = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeliveryStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeliveryStructure_CSDetail_cSDetailId",
                        column: x => x.cSDetailId,
                        principalSchema: "SCM",
                        principalTable: "CSDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    purchaseId = table.Column<int>(nullable: true),
                    cSDetailId = table.Column<int>(nullable: true),
                    poQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    poRate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    grQty = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    vat = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    vatPercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    tax = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    taxPercent = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    currencyId = table.Column<int>(nullable: true),
                    deliveryLocationId = table.Column<int>(nullable: true),
                    otherDeliveryLocation = table.Column<string>(type: "nvarchar(300)", nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDetails_CSDetail_cSDetailId",
                        column: x => x.cSDetailId,
                        principalSchema: "SCM",
                        principalTable: "CSDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDetails_Currency_currencyId",
                        column: x => x.currencyId,
                        principalSchema: "SCM",
                        principalTable: "Currency",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDetails_DeliveryLocation_deliveryLocationId",
                        column: x => x.deliveryLocationId,
                        principalSchema: "SCM",
                        principalTable: "DeliveryLocation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDetails_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDetails_PurchaseOrderMaster_purchaseId",
                        column: x => x.purchaseId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ClaimAssign",
                schema: "REMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    claimId = table.Column<int>(nullable: true),
                    assignDate = table.Column<DateTime>(nullable: true),
                    problemDescription = table.Column<string>(nullable: true),
                    assignTypeId = table.Column<int>(nullable: true),
                    assignUserId = table.Column<int>(nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    deliveryMode = table.Column<string>(type: "nvarchar(100)", nullable: true),
                    secretCode = table.Column<string>(type: "nvarchar(100)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClaimAssign", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ClaimAssign_AssignType_assignTypeId",
                        column: x => x.assignTypeId,
                        principalSchema: "REMS",
                        principalTable: "AssignType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ClaimAssign_ClaimRegister_claimId",
                        column: x => x.claimId,
                        principalSchema: "REMS",
                        principalTable: "ClaimRegister",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ClaimAssign_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ClaimAttachment",
                schema: "REMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    claimId = table.Column<int>(nullable: true),
                    subject = table.Column<string>(maxLength: 150, nullable: true),
                    fileName = table.Column<string>(maxLength: 350, nullable: true),
                    fileType = table.Column<string>(maxLength: 250, nullable: true),
                    filePath = table.Column<string>(maxLength: 500, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClaimAttachment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ClaimAttachment_ClaimRegister_claimId",
                        column: x => x.claimId,
                        principalSchema: "REMS",
                        principalTable: "ClaimRegister",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ClaimBillInformation",
                schema: "REMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    claimId = table.Column<int>(nullable: true),
                    paymentHead = table.Column<string>(maxLength: 350, nullable: true),
                    amount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ClaimBillInformation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ClaimBillInformation_ClaimRegister_claimId",
                        column: x => x.claimId,
                        principalSchema: "REMS",
                        principalTable: "ClaimRegister",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RepairTransactionLog",
                schema: "REMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    claimId = table.Column<int>(nullable: true),
                    statusInfoId = table.Column<int>(nullable: true),
                    description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepairTransactionLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RepairTransactionLog_ClaimRegister_claimId",
                        column: x => x.claimId,
                        principalSchema: "REMS",
                        principalTable: "ClaimRegister",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepairTransactionLog_ClaimStatusInfo_statusInfoId",
                        column: x => x.statusInfoId,
                        principalSchema: "REMS",
                        principalTable: "ClaimStatusInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseReturnInfoDetail",
                schema: "Purchase",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    purchaseReturnInfoMasterId = table.Column<int>(nullable: true),
                    purchaseOrdersDetailId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseReturnInfoDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnInfoDetail_PurchaseOrderDetails_purchaseOrdersDetailId",
                        column: x => x.purchaseOrdersDetailId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseReturnInfoDetail_PurchaseReturnInfoMaster_purchaseReturnInfoMasterId",
                        column: x => x.purchaseReturnInfoMasterId,
                        principalSchema: "Purchase",
                        principalTable: "PurchaseReturnInfoMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PODismissDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pODismissId = table.Column<int>(nullable: true),
                    purchaseDetailsId = table.Column<int>(nullable: true),
                    poQty = table.Column<decimal>(nullable: true),
                    dismissQty = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PODismissDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PODismissDetails_PODismissMaster_pODismissId",
                        column: x => x.pODismissId,
                        principalSchema: "SCM",
                        principalTable: "PODismissMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PODismissDetails_PurchaseOrderDetails_purchaseDetailsId",
                        column: x => x.purchaseDetailsId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WagesEmployeeInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeCode = table.Column<string>(maxLength: 50, nullable: false),
                    nationalID = table.Column<string>(maxLength: 100, nullable: true),
                    birthIdentificationNo = table.Column<string>(maxLength: 100, nullable: true),
                    govtID = table.Column<string>(maxLength: 250, nullable: true),
                    gpfNomineeName = table.Column<string>(nullable: true),
                    gpfAcNo = table.Column<string>(nullable: true),
                    nameEnglish = table.Column<string>(nullable: true),
                    nameBangla = table.Column<string>(nullable: true),
                    motherNameEnglish = table.Column<string>(nullable: true),
                    motherNameBangla = table.Column<string>(nullable: true),
                    fatherNameEnglish = table.Column<string>(nullable: true),
                    fatherNameBangla = table.Column<string>(nullable: true),
                    nationality = table.Column<string>(nullable: true),
                    disability = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    joiningDatePresentWorkstation = table.Column<DateTime>(nullable: true),
                    joiningDateGovtService = table.Column<DateTime>(nullable: true),
                    dateofregularity = table.Column<DateTime>(nullable: true),
                    dateOfPermanent = table.Column<DateTime>(nullable: true),
                    LPRDate = table.Column<string>(nullable: true),
                    PRLStartDate = table.Column<string>(nullable: true),
                    PRLEndDate = table.Column<string>(nullable: true),
                    gender = table.Column<string>(nullable: true),
                    birthPlace = table.Column<string>(nullable: true),
                    maritalStatus = table.Column<string>(nullable: true),
                    religionId = table.Column<int>(nullable: true),
                    employeeTypeId = table.Column<int>(nullable: true),
                    activityStatus = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    tin = table.Column<string>(nullable: true),
                    batch = table.Column<string>(nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    freedomFighter = table.Column<bool>(nullable: false),
                    freedomFighterNo = table.Column<string>(nullable: true),
                    telephoneOffice = table.Column<string>(nullable: true),
                    telephoneResidence = table.Column<string>(nullable: true),
                    pabx = table.Column<string>(nullable: true),
                    emailAddress = table.Column<string>(nullable: true),
                    emailAddressPersonal = table.Column<string>(nullable: true),
                    mobileNumberOffice = table.Column<string>(maxLength: 50, nullable: true),
                    mobileNumberPersonal = table.Column<string>(maxLength: 50, nullable: true),
                    specialSkill = table.Column<string>(nullable: true),
                    seniorityNumber = table.Column<string>(maxLength: 50, nullable: true),
                    designation = table.Column<string>(nullable: true),
                    skypeId = table.Column<string>(nullable: true),
                    post = table.Column<int>(nullable: true),
                    designationCheck = table.Column<int>(nullable: false),
                    joiningDesignation = table.Column<string>(nullable: true),
                    natureOfRequitment = table.Column<string>(maxLength: 100, nullable: true),
                    homeDistrict = table.Column<string>(nullable: true),
                    branchId = table.Column<int>(nullable: true),
                    pNSId = table.Column<int>(nullable: true),
                    orgType = table.Column<string>(maxLength: 100, nullable: true),
                    ApplicationUserId = table.Column<string>(nullable: true),
                    isApproved = table.Column<int>(nullable: true),
                    shiftGroupId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesEmployeeInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesEmployeeInfo_AspNetUsers_ApplicationUserId",
                        column: x => x.ApplicationUserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesEmployeeInfo_SpecialBranchUnit_branchId",
                        column: x => x.branchId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesEmployeeInfo_EmployeeType_employeeTypeId",
                        column: x => x.employeeTypeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesEmployeeInfo_PNS_pNSId",
                        column: x => x.pNSId,
                        principalSchema: "HR",
                        principalTable: "PNS",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesEmployeeInfo_Religion_religionId",
                        column: x => x.religionId,
                        principalSchema: "HR",
                        principalTable: "Religion",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesEmployeeInfo_ShiftGroupMaster_shiftGroupId",
                        column: x => x.shiftGroupId,
                        principalSchema: "HR",
                        principalTable: "ShiftGroupMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OTProcessData",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    wageEmployeeInfoId = table.Column<int>(nullable: true),
                    date = table.Column<DateTime>(nullable: true),
                    OTMin = table.Column<decimal>(nullable: true),
                    OTAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OTProcessData", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OTProcessData_WagesEmployeeInfo_wageEmployeeInfoId",
                        column: x => x.wageEmployeeInfoId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WagesAddress",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    roadNumber = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesAddress_WagesEmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WagesAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WagesBankInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    bankName = table.Column<string>(nullable: true),
                    branchName = table.Column<string>(nullable: true),
                    accountNumber = table.Column<string>(nullable: true),
                    ibus = table.Column<string>(nullable: true),
                    basicSalary = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesBankInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesBankInfo_WagesEmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WagesEmergencyContact",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    name = table.Column<string>(nullable: true),
                    relation = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    contact = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesEmergencyContact", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesEmergencyContact_WagesEmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WagesLeaveRegister",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    substitutionUserId = table.Column<int>(nullable: true),
                    leaveTypeId = table.Column<int>(nullable: true),
                    whenLeave = table.Column<string>(nullable: true),
                    leaveFrom = table.Column<DateTime>(nullable: false),
                    leaveTo = table.Column<DateTime>(nullable: false),
                    daysLeave = table.Column<decimal>(nullable: true),
                    purposeOfLeave = table.Column<string>(nullable: true),
                    fileUrl = table.Column<string>(nullable: true),
                    emergencyContactNo = table.Column<string>(nullable: true),
                    leaveStatus = table.Column<int>(nullable: true),
                    address = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesLeaveRegister", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesLeaveRegister_WagesEmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesLeaveRegister_LeaveType_leaveTypeId",
                        column: x => x.leaveTypeId,
                        principalSchema: "HR",
                        principalTable: "LeaveType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesLeaveRegister_WagesEmployeeInfo_substitutionUserId",
                        column: x => x.substitutionUserId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WagesLeftDetails",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    reason = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesLeftDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesLeftDetails_WagesEmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WagesPhotograph",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    url = table.Column<string>(nullable: false),
                    remarks = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesPhotograph", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesPhotograph_WagesEmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WagesPriviousEmployment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    organizationTypeId = table.Column<int>(nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    position = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    companyBusiness = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    companyLocation = table.Column<string>(nullable: true),
                    responsibilities = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesPriviousEmployment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesPriviousEmployment_WagesEmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WagesPriviousEmployment_HRPMSOrganizationType_organizationTypeId",
                        column: x => x.organizationTypeId,
                        principalSchema: "HR",
                        principalTable: "HRPMSOrganizationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WagesPunchCardInfo",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    punchCardNo = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesPunchCardInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesPunchCardInfo_WagesEmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WagesReference",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeID = table.Column<int>(nullable: false),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    contact = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesReference", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesReference_WagesEmployeeInfo_employeeID",
                        column: x => x.employeeID,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "WagesSalaryStructure",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesSalaryStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesSalaryStructure_WagesEmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WagesSalaryStructure_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WagesProcessEmpSalaryMaster",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    netPayable = table.Column<decimal>(nullable: true),
                    walletPayable = table.Column<decimal>(nullable: true),
                    bankPayable = table.Column<decimal>(nullable: true),
                    bankName = table.Column<string>(nullable: true),
                    bankAccountNo = table.Column<string>(nullable: true),
                    walletNo = table.Column<string>(nullable: true),
                    division = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesProcessEmpSalaryMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesProcessEmpSalaryMaster_WagesEmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WagesProcessEmpSalaryMaster_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WagesProcessEmpSalaryStructure",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    amount = table.Column<decimal>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WagesProcessEmpSalaryStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WagesProcessEmpSalaryStructure_WagesEmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "WagesEmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WagesProcessEmpSalaryStructure_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WagesProcessEmpSalaryStructure_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BillReturnPaymentDetails",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    billReturnPaymentMasterId = table.Column<int>(nullable: true),
                    salesReturnInvoiceMasterId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    date = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillReturnPaymentDetails", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BillReturnPaymentMasters",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    billPaymentDate = table.Column<DateTime>(nullable: true),
                    billPaymentNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    billPaymentBy = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    billNumber = table.Column<string>(nullable: true),
                    receivedNotes = table.Column<string>(nullable: true),
                    isPartialReceived = table.Column<int>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillReturnPaymentMasters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillReturnPaymentMasters_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillReturnPaymentMasters_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillReturnPaymentMasters_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Location",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    branchUnitName = table.Column<string>(nullable: true),
                    branchUnitNameBN = table.Column<string>(nullable: true),
                    branchCode = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    shortOrder = table.Column<int>(nullable: true),
                    hrDepartmentId = table.Column<int>(nullable: true),
                    branchPlace = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Location", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Location_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HrBranch",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    branchCode = table.Column<string>(nullable: true),
                    branchName = table.Column<string>(nullable: true),
                    branchNameBn = table.Column<string>(nullable: true),
                    address = table.Column<string>(nullable: true),
                    locationId = table.Column<int>(nullable: true),
                    branchTypeId = table.Column<int>(nullable: true),
                    officeId = table.Column<int>(nullable: true),
                    branchPlace = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrBranch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrBranch_HrBranchType_branchTypeId",
                        column: x => x.branchTypeId,
                        principalSchema: "HR",
                        principalTable: "HrBranchType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HrBranch_Location_locationId",
                        column: x => x.locationId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HrBranch_FunctionInfo_officeId",
                        column: x => x.officeId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "salaryPostingLogs",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    periodId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    zoneId = table.Column<int>(nullable: true),
                    officeId = table.Column<int>(nullable: true),
                    code = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    key = table.Column<string>(nullable: true),
                    postingDate = table.Column<DateTime>(nullable: true),
                    successStatus = table.Column<string>(nullable: true),
                    refCode = table.Column<string>(nullable: true),
                    message = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_salaryPostingLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_salaryPostingLogs_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_salaryPostingLogs_FunctionInfo_officeId",
                        column: x => x.officeId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_salaryPostingLogs_SalaryPeriod_periodId",
                        column: x => x.periodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_salaryPostingLogs_Location_zoneId",
                        column: x => x.zoneId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApplicationForm",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    applicationNo = table.Column<string>(nullable: true),
                    nameEN = table.Column<string>(nullable: true),
                    nameBN = table.Column<string>(nullable: true),
                    nidNO = table.Column<string>(maxLength: 100, nullable: true),
                    binNO = table.Column<string>(maxLength: 100, nullable: true),
                    birthDate = table.Column<DateTime>(nullable: false),
                    birtPlace = table.Column<string>(maxLength: 100, nullable: true),
                    payRef = table.Column<string>(nullable: true),
                    payDoc = table.Column<string>(nullable: true),
                    fNmaeEN = table.Column<string>(nullable: true),
                    fNmaeBN = table.Column<string>(nullable: true),
                    mNmaeBN = table.Column<string>(nullable: true),
                    mNmaeEN = table.Column<string>(nullable: true),
                    sNameEN = table.Column<string>(nullable: true),
                    sNameBN = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(maxLength: 50, nullable: true),
                    email = table.Column<string>(maxLength: 250, nullable: true),
                    nationality = table.Column<string>(maxLength: 50, nullable: true),
                    religionId = table.Column<int>(nullable: true),
                    occupation = table.Column<string>(nullable: true),
                    gender = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    applicantPhoto = table.Column<string>(nullable: true),
                    applicantSignature = table.Column<string>(nullable: true),
                    JoiningLetter = table.Column<DateTime>(nullable: true),
                    attachmentUrl = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    writtenMarks = table.Column<int>(nullable: true),
                    vivaResult = table.Column<int>(nullable: true),
                    totalMarks = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    newDesignationId = table.Column<int>(nullable: true),
                    newBranchId = table.Column<int>(nullable: true),
                    joiningDate = table.Column<DateTime>(nullable: true),
                    addressBangla = table.Column<string>(nullable: true),
                    postBangla = table.Column<string>(nullable: true),
                    mailingAddress = table.Column<string>(nullable: true),
                    termsAndConditions = table.Column<string>(nullable: true),
                    salaryGradeId = table.Column<int>(nullable: true),
                    reportDateBn = table.Column<string>(nullable: true),
                    reportDateEn = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicationForm", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApplicationForm_HrBranch_newBranchId",
                        column: x => x.newBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApplicationForm_Designation_newDesignationId",
                        column: x => x.newDesignationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApplicationForm_Religion_religionId",
                        column: x => x.religionId,
                        principalSchema: "HR",
                        principalTable: "Religion",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApplicationForm_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HrDivision",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    divCode = table.Column<string>(nullable: true),
                    divName = table.Column<string>(nullable: false),
                    divNameBn = table.Column<string>(nullable: true),
                    functionId = table.Column<int>(nullable: true),
                    functionInfoId = table.Column<int>(nullable: true),
                    shortName = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrDivision", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrDivision_FunctionInfo_functionInfoId",
                        column: x => x.functionInfoId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HrDivision_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HrSubBranch",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    subbranchCode = table.Column<string>(nullable: true),
                    subbranchName = table.Column<string>(nullable: true),
                    subbranchNameBangla = table.Column<string>(nullable: true),
                    subaddress = table.Column<string>(nullable: true),
                    subbranchTypeId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrSubBranch", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrSubBranch_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HrSubBranch_HrBranchType_subbranchTypeId",
                        column: x => x.subbranchTypeId,
                        principalSchema: "HR",
                        principalTable: "HrBranchType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BranchWiseSalaryLock",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    periodId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    zoneId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BranchWiseSalaryLock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BranchWiseSalaryLock_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BranchWiseSalaryLock_SalaryPeriod_periodId",
                        column: x => x.periodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BranchWiseSalaryLock_Location_zoneId",
                        column: x => x.zoneId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SpecialBonusEmp",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    empName = table.Column<string>(nullable: true),
                    empCode = table.Column<string>(nullable: true),
                    branchId = table.Column<int>(nullable: true),
                    zoneId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    designationName = table.Column<string>(nullable: true),
                    accountNo = table.Column<string>(nullable: true),
                    EmpStatus = table.Column<string>(nullable: true),
                    Sundry = table.Column<string>(nullable: true),
                    basicSalary = table.Column<decimal>(nullable: true),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true),
                    totalDays = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SpecialBonusEmp", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SpecialBonusEmp_HrBranch_branchId",
                        column: x => x.branchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SpecialBonusEmp_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SpecialBonusEmp_Location_zoneId",
                        column: x => x.zoneId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApplicantAddress",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    roadNumber = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false),
                    applicationFormId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicantAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApplicantAddress_ApplicationForm_applicationFormId",
                        column: x => x.applicationFormId,
                        principalSchema: "HR",
                        principalTable: "ApplicationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ApplicantAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApplicantAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApplicantAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ApplicantAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApplicationEdu",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    applicationFormId = table.Column<int>(nullable: false),
                    degree = table.Column<string>(nullable: true),
                    institution = table.Column<string>(nullable: true),
                    boardUniversity = table.Column<string>(nullable: true),
                    rollNo = table.Column<string>(nullable: true),
                    country = table.Column<string>(nullable: true),
                    yearOfCertification = table.Column<string>(nullable: true),
                    mainSubject = table.Column<string>(nullable: true),
                    gpaDivision = table.Column<string>(nullable: true),
                    type = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicationEdu", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApplicationEdu_ApplicationForm_applicationFormId",
                        column: x => x.applicationFormId,
                        principalSchema: "HR",
                        principalTable: "ApplicationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ApplicationExp",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    officeName = table.Column<string>(nullable: true),
                    position = table.Column<string>(nullable: true),
                    from = table.Column<DateTime>(nullable: true),
                    to = table.Column<DateTime>(nullable: true),
                    applicationFormId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicationExp", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApplicationExp_ApplicationForm_applicationFormId",
                        column: x => x.applicationFormId,
                        principalSchema: "HR",
                        principalTable: "ApplicationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ApplicationQuota",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    isFredomFighter = table.Column<int>(nullable: true),
                    relation = table.Column<string>(nullable: true),
                    document = table.Column<string>(nullable: true),
                    isDisable = table.Column<int>(nullable: true),
                    isTrible = table.Column<int>(nullable: true),
                    isAnser = table.Column<int>(nullable: true),
                    isOther = table.Column<int>(nullable: true),
                    otherQuotaName = table.Column<string>(nullable: true),
                    otherQuotaDoc = table.Column<string>(nullable: true),
                    applicationFormId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicationQuota", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApplicationQuota_ApplicationForm_applicationFormId",
                        column: x => x.applicationFormId,
                        principalSchema: "HR",
                        principalTable: "ApplicationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CallForExam",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    applicationFormId = table.Column<int>(nullable: false),
                    applicationExamId = table.Column<int>(nullable: true),
                    obtainedMark = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CallForExam", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CallForExam_ApplicationExam_applicationExamId",
                        column: x => x.applicationExamId,
                        principalSchema: "HR",
                        principalTable: "ApplicationExam",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CallForExam_ApplicationForm_applicationFormId",
                        column: x => x.applicationFormId,
                        principalSchema: "HR",
                        principalTable: "ApplicationForm",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Department",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    deptCode = table.Column<string>(nullable: true),
                    deptName = table.Column<string>(nullable: false),
                    deptNameBn = table.Column<string>(nullable: true),
                    shortName = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    hrDivisionId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    type = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Department", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Department_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Department_HrDivision_hrDivisionId",
                        column: x => x.hrDivisionId,
                        principalSchema: "HR",
                        principalTable: "HrDivision",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HrAtmBooth",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    branchId = table.Column<int>(nullable: true),
                    subBranchId = table.Column<int>(nullable: true),
                    location = table.Column<string>(nullable: true),
                    noOfMachine = table.Column<int>(nullable: true),
                    contactPerson = table.Column<string>(nullable: true),
                    contactNo = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrAtmBooth", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrAtmBooth_HrBranch_branchId",
                        column: x => x.branchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HrAtmBooth_HrSubBranch_subBranchId",
                        column: x => x.subBranchId,
                        principalSchema: "HR",
                        principalTable: "HrSubBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "jDTypes",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    JDRoleName = table.Column<string>(nullable: true),
                    roleId = table.Column<int>(nullable: false),
                    departmentId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_jDTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_jDTypes_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_jDTypes_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_jDTypes_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Patients",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    resourceName = table.Column<string>(nullable: true),
                    phone = table.Column<string>(maxLength: 150, nullable: true),
                    mobile = table.Column<string>(maxLength: 150, nullable: true),
                    email = table.Column<string>(maxLength: 200, nullable: true),
                    otherPhone = table.Column<string>(maxLength: 150, nullable: true),
                    age = table.Column<int>(nullable: true),
                    gender = table.Column<string>(maxLength: 30, nullable: true),
                    fax = table.Column<string>(maxLength: 100, nullable: true),
                    departmentsId = table.Column<int>(nullable: true),
                    designationsId = table.Column<int>(nullable: true),
                    crmdepartmentsId = table.Column<int>(nullable: true),
                    crmdesignationsId = table.Column<int>(nullable: true),
                    imagePath = table.Column<string>(nullable: true),
                    skypeId = table.Column<string>(maxLength: 200, nullable: true),
                    linkedInId = table.Column<string>(maxLength: 200, nullable: true),
                    nameEnglish = table.Column<string>(maxLength: 500, nullable: true),
                    organizationName = table.Column<string>(maxLength: 500, nullable: true),
                    LicenseNumber = table.Column<string>(maxLength: 100, nullable: true),
                    eTinNumber = table.Column<string>(maxLength: 100, nullable: true),
                    binNumber = table.Column<string>(maxLength: 100, nullable: true),
                    VATNumber = table.Column<string>(maxLength: 100, nullable: true),
                    alternativeEmail = table.Column<string>(maxLength: 200, nullable: true),
                    ageInMonths = table.Column<int>(nullable: true),
                    ageInDays = table.Column<int>(nullable: true),
                    fatherName = table.Column<string>(maxLength: 200, nullable: true),
                    motherName = table.Column<string>(maxLength: 200, nullable: true),
                    bloodGroup = table.Column<string>(maxLength: 10, nullable: true),
                    nationalId = table.Column<string>(maxLength: 30, nullable: true),
                    maritalStatus = table.Column<string>(maxLength: 15, nullable: true),
                    contactRelation = table.Column<string>(maxLength: 50, nullable: true),
                    professionTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Patients", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Patients_CRMDepartment_crmdepartmentsId",
                        column: x => x.crmdepartmentsId,
                        principalSchema: "CRM",
                        principalTable: "CRMDepartment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Patients_CRMDesignation_crmdesignationsId",
                        column: x => x.crmdesignationsId,
                        principalSchema: "CRM",
                        principalTable: "CRMDesignation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Patients_Department_departmentsId",
                        column: x => x.departmentsId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Patients_Designation_designationsId",
                        column: x => x.designationsId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Patients_ProfessionType_professionTypeId",
                        column: x => x.professionTypeId,
                        principalSchema: "HOSPTL",
                        principalTable: "ProfessionType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DailyBillReceive",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    SLNo = table.Column<string>(nullable: true),
                    BillReceiveDate = table.Column<DateTime>(nullable: true),
                    ProcessNo = table.Column<string>(nullable: true),
                    supplierId = table.Column<int>(nullable: true),
                    InvoiceNo = table.Column<string>(nullable: true),
                    IsPo = table.Column<int>(nullable: true),
                    IsClaimed = table.Column<int>(nullable: true),
                    isClaimable = table.Column<int>(nullable: true),
                    ischallan = table.Column<int>(nullable: true),
                    GBamount = table.Column<decimal>(nullable: true),
                    ChalanDate = table.Column<DateTime>(nullable: true),
                    vatNumber = table.Column<string>(nullable: true),
                    Commission = table.Column<decimal>(nullable: true),
                    Vat = table.Column<decimal>(nullable: true),
                    Other = table.Column<decimal>(nullable: true),
                    Discount = table.Column<decimal>(nullable: true),
                    Total = table.Column<decimal>(nullable: true),
                    PaymentDate = table.Column<DateTime>(nullable: true),
                    PO = table.Column<string>(nullable: true),
                    Challan = table.Column<string>(nullable: true),
                    PoNo = table.Column<string>(nullable: true),
                    PoDate = table.Column<string>(nullable: true),
                    BillStatusId = table.Column<int>(nullable: true),
                    subid = table.Column<int>(nullable: true),
                    AccountID = table.Column<int>(nullable: true),
                    VoucherNo = table.Column<string>(nullable: true),
                    PaymentType = table.Column<string>(nullable: true),
                    ApvDate = table.Column<DateTime>(nullable: true),
                    POAMOUNT = table.Column<decimal>(nullable: true),
                    SentToDepDate = table.Column<DateTime>(nullable: true),
                    ReceiveDepDate = table.Column<DateTime>(nullable: true),
                    ResposneemployeeInfoId = table.Column<int>(nullable: true),
                    CheckReceiveDate = table.Column<DateTime>(nullable: true),
                    ChequeNo = table.Column<string>(nullable: true),
                    VendorPayReceiveDate = table.Column<DateTime>(nullable: true),
                    BillReturnDate = table.Column<DateTime>(nullable: true),
                    ReturnComments = table.Column<string>(nullable: true),
                    ReturnProcessNo = table.Column<string>(nullable: true),
                    VoucherAmount = table.Column<decimal>(nullable: true),
                    DivisionName = table.Column<string>(nullable: true),
                    ReqDept = table.Column<string>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    VoucherDate = table.Column<DateTime>(nullable: true),
                    paidStatus = table.Column<string>(nullable: true),
                    CreditPeriod = table.Column<int>(nullable: true),
                    ExpectedFindate = table.Column<string>(nullable: true),
                    UserDeptCode = table.Column<string>(nullable: true),
                    ItemId = table.Column<int>(nullable: true),
                    VATPayable = table.Column<decimal>(nullable: true),
                    TAXPayable = table.Column<decimal>(nullable: true),
                    VATCurrent = table.Column<decimal>(nullable: true),
                    vendorstatus = table.Column<string>(nullable: true),
                    NonDepartmentId = table.Column<int>(nullable: true),
                    NoVat = table.Column<int>(nullable: true),
                    NoReturn = table.Column<int>(nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DailyBillReceive", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DailyBillReceive_Item_ItemId",
                        column: x => x.ItemId,
                        principalSchema: "SCM",
                        principalTable: "Item",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DailyBillReceive_Department_NonDepartmentId",
                        column: x => x.NonDepartmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DailyBillReceive_EmployeeInfo_ResposneemployeeInfoId",
                        column: x => x.ResposneemployeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DailyBillReceive_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DailyBillReceive_Organization_supplierId",
                        column: x => x.supplierId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DailyBillReceive_VoucherMaster_voucherMasterId",
                        column: x => x.voucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssignmentTraining",
                schema: "ACR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assessmentId = table.Column<int>(nullable: true),
                    EmpCode = table.Column<string>(nullable: true),
                    Criteria = table.Column<int>(nullable: true),
                    EntryNo = table.Column<int>(nullable: true),
                    StartDate = table.Column<string>(nullable: true),
                    EndDate = table.Column<string>(nullable: true),
                    BranchCode = table.Column<string>(nullable: true),
                    sbuId = table.Column<int>(nullable: true),
                    branchId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    jobResponsibilityId = table.Column<int>(nullable: true),
                    Remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssignmentTraining", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssignmentTraining_Assessment_assessmentId",
                        column: x => x.assessmentId,
                        principalSchema: "HR",
                        principalTable: "Assessment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignmentTraining_HrBranch_branchId",
                        column: x => x.branchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignmentTraining_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignmentTraining_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignmentTraining_HrDivision_divisionId",
                        column: x => x.divisionId,
                        principalSchema: "HR",
                        principalTable: "HrDivision",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignmentTraining_JobResponsibility_jobResponsibilityId",
                        column: x => x.jobResponsibilityId,
                        principalSchema: "ACR",
                        principalTable: "JobResponsibility",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssignmentTraining_SpecialBranchUnit_sbuId",
                        column: x => x.sbuId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Resource",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    resourceName = table.Column<string>(nullable: true),
                    phone = table.Column<string>(maxLength: 150, nullable: true),
                    mobile = table.Column<string>(maxLength: 150, nullable: true),
                    email = table.Column<string>(maxLength: 200, nullable: true),
                    otherPhone = table.Column<string>(maxLength: 150, nullable: true),
                    age = table.Column<int>(nullable: true),
                    gender = table.Column<string>(maxLength: 30, nullable: true),
                    fax = table.Column<string>(maxLength: 100, nullable: true),
                    departmentsId = table.Column<int>(nullable: true),
                    designationsId = table.Column<int>(nullable: true),
                    crmdepartmentsId = table.Column<int>(nullable: true),
                    crmdesignationsId = table.Column<int>(nullable: true),
                    imagePath = table.Column<string>(nullable: true),
                    skypeId = table.Column<string>(maxLength: 200, nullable: true),
                    linkedInId = table.Column<string>(maxLength: 200, nullable: true),
                    nameEnglish = table.Column<string>(maxLength: 500, nullable: true),
                    organizationName = table.Column<string>(maxLength: 500, nullable: true),
                    LicenseNumber = table.Column<string>(maxLength: 100, nullable: true),
                    eTinNumber = table.Column<string>(maxLength: 100, nullable: true),
                    binNumber = table.Column<string>(maxLength: 100, nullable: true),
                    VATNumber = table.Column<string>(maxLength: 100, nullable: true),
                    alternativeEmail = table.Column<string>(maxLength: 200, nullable: true),
                    ageInMonths = table.Column<int>(nullable: true),
                    ageInDays = table.Column<int>(nullable: true),
                    fatherName = table.Column<string>(maxLength: 200, nullable: true),
                    motherName = table.Column<string>(maxLength: 200, nullable: true),
                    bloodGroup = table.Column<string>(maxLength: 10, nullable: true),
                    nationalId = table.Column<string>(maxLength: 30, nullable: true),
                    maritalStatus = table.Column<string>(maxLength: 15, nullable: true),
                    contactRelation = table.Column<string>(maxLength: 50, nullable: true),
                    professionTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Resource", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Resource_CRMDepartment_crmdepartmentsId",
                        column: x => x.crmdepartmentsId,
                        principalSchema: "CRM",
                        principalTable: "CRMDepartment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Resource_CRMDesignation_crmdesignationsId",
                        column: x => x.crmdesignationsId,
                        principalSchema: "CRM",
                        principalTable: "CRMDesignation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Resource_Department_departmentsId",
                        column: x => x.departmentsId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Resource_Designation_designationsId",
                        column: x => x.designationsId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Resource_ProfessionType_professionTypeId",
                        column: x => x.professionTypeId,
                        principalSchema: "HOSPTL",
                        principalTable: "ProfessionType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetAssign",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    assignDate = table.Column<DateTime>(nullable: true),
                    empId = table.Column<int>(nullable: true),
                    coordinatorempId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    deliveryLocationId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetAssign", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetAssign_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetAssign_DeliveryLocation_deliveryLocationId",
                        column: x => x.deliveryLocationId,
                        principalSchema: "SCM",
                        principalTable: "DeliveryLocation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetAssign_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetTransfer",
                schema: "FAMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    assetRegistrationId = table.Column<int>(nullable: true),
                    deliveryLocationId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    transferDate = table.Column<DateTime>(nullable: true),
                    currentEmpId = table.Column<int>(nullable: true),
                    previousEmpId = table.Column<int>(nullable: true),
                    currentCoordinatorId = table.Column<int>(nullable: true),
                    previousCoordinatorId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetTransfer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetTransfer_AssetRegistration_assetRegistrationId",
                        column: x => x.assetRegistrationId,
                        principalSchema: "FAMS",
                        principalTable: "AssetRegistration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetTransfer_DeliveryLocation_deliveryLocationId",
                        column: x => x.deliveryLocationId,
                        principalSchema: "SCM",
                        principalTable: "DeliveryLocation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetTransfer_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Assignment",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    assignmentTypeId = table.Column<int>(nullable: true),
                    EntryNo = table.Column<int>(nullable: true),
                    StartDate = table.Column<DateTime>(nullable: false),
                    EndDate = table.Column<DateTime>(nullable: false),
                    designationId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    Remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Assignment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Assignment_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Assignment_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Assignment_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HrBudgetDpt",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    departmentId = table.Column<int>(nullable: false),
                    designationId = table.Column<int>(nullable: false),
                    branchId = table.Column<int>(nullable: false),
                    person = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrBudgetDpt", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrBudgetDpt_HrBranch_branchId",
                        column: x => x.branchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HrBudgetDpt_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_HrBudgetDpt_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "HrUnit",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    unitName = table.Column<string>(maxLength: 250, nullable: true),
                    unitNameBn = table.Column<string>(maxLength: 250, nullable: true),
                    shortName = table.Column<string>(maxLength: 150, nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HrUnit", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HrUnit_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_HrUnit_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrganogramRelation",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    title = table.Column<string>(nullable: true),
                    officeId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    subTitle = table.Column<string>(nullable: true),
                    parentId = table.Column<int>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    headId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganogramRelation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrganogramRelation_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganogramRelation_HrDivision_divisionId",
                        column: x => x.divisionId,
                        principalSchema: "HR",
                        principalTable: "HrDivision",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganogramRelation_FunctionInfo_officeId",
                        column: x => x.officeId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFMemberInfo",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    employeeCode = table.Column<string>(nullable: true),
                    memberName = table.Column<string>(maxLength: 250, nullable: true),
                    email = table.Column<string>(maxLength: 100, nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    dateOfJoining = table.Column<DateTime>(nullable: true),
                    memberTypeId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    employeeStatusId = table.Column<int>(nullable: true),
                    mobile = table.Column<string>(maxLength: 50, nullable: true),
                    nid = table.Column<string>(maxLength: 100, nullable: true),
                    approveStatus = table.Column<int>(nullable: true),
                    note = table.Column<string>(nullable: true),
                    isActive = table.Column<int>(nullable: true),
                    isPfContinuing = table.Column<int>(nullable: true),
                    memberCode = table.Column<string>(nullable: true),
                    applicationDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFMemberInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFMemberInfo_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFMemberInfo_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFMemberInfo_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFMemberInfo_ServiceStatus_employeeStatusId",
                        column: x => x.employeeStatusId,
                        principalSchema: "HR",
                        principalTable: "ServiceStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFMemberInfo_EmployeeType_memberTypeId",
                        column: x => x.memberTypeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "JobRequisition",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobNo = table.Column<string>(nullable: true),
                    jobTitle = table.Column<string>(nullable: true),
                    requisitionDate = table.Column<DateTime>(nullable: true),
                    appointmentDate = table.Column<DateTime>(nullable: true),
                    justification = table.Column<string>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    jobSourceId = table.Column<int>(nullable: true),
                    vacancy = table.Column<int>(nullable: true),
                    jobLocation = table.Column<string>(nullable: true),
                    salary = table.Column<decimal>(nullable: true),
                    employmentStatus = table.Column<string>(nullable: true),
                    jobContext = table.Column<string>(nullable: true),
                    reqExperience = table.Column<string>(nullable: true),
                    reqEducationalQ = table.Column<string>(nullable: true),
                    jobResponsibility = table.Column<string>(nullable: true),
                    addRequirements = table.Column<string>(nullable: true),
                    compensationOthers = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobRequisition", x => x.Id);
                    table.ForeignKey(
                        name: "FK_JobRequisition_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_JobRequisition_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_JobRequisition_JobSource_jobSourceId",
                        column: x => x.jobSourceId,
                        principalSchema: "RCRT",
                        principalTable: "JobSource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VMSResource",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    resourceCode = table.Column<string>(maxLength: 50, nullable: true),
                    nationalID = table.Column<string>(maxLength: 100, nullable: true),
                    birthIdentificationNo = table.Column<string>(maxLength: 100, nullable: true),
                    nameEnglish = table.Column<string>(nullable: true),
                    nameBangla = table.Column<string>(nullable: true),
                    motherNameEnglish = table.Column<string>(nullable: true),
                    motherNameBangla = table.Column<string>(nullable: true),
                    fatherNameEnglish = table.Column<string>(nullable: true),
                    fatherNameBangla = table.Column<string>(nullable: true),
                    nationality = table.Column<string>(nullable: true),
                    disability = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    gender = table.Column<string>(nullable: true),
                    birthPlace = table.Column<string>(nullable: true),
                    maritalStatus = table.Column<string>(nullable: true),
                    religionId = table.Column<int>(nullable: true),
                    resourceTypeId = table.Column<int>(nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    freedomFighter = table.Column<bool>(nullable: false),
                    freedomFighterNo = table.Column<string>(nullable: true),
                    telephoneResidence = table.Column<string>(nullable: true),
                    pabx = table.Column<string>(nullable: true),
                    emailAddress = table.Column<string>(nullable: true),
                    emailAddressPersonal = table.Column<string>(nullable: true),
                    mobileNumberPersonal = table.Column<string>(maxLength: 50, nullable: true),
                    specialSkill = table.Column<string>(nullable: true),
                    homeDistrict = table.Column<string>(nullable: true),
                    phone = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    fax = table.Column<string>(nullable: true),
                    departmentID = table.Column<int>(nullable: false),
                    designationID = table.Column<int>(nullable: false),
                    imagePath = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VMSResource", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VMSResource_Department_departmentID",
                        column: x => x.departmentID,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_VMSResource_Designation_designationID",
                        column: x => x.designationID,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_VMSResource_Religion_religionId",
                        column: x => x.religionId,
                        principalSchema: "HR",
                        principalTable: "Religion",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VMSResource_VMSResourceType_resourceTypeId",
                        column: x => x.resourceTypeId,
                        principalSchema: "VMS",
                        principalTable: "VMSResourceType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "jDTaskTypes",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    AdditionalDescription = table.Column<string>(nullable: true),
                    jdTypeId = table.Column<int>(nullable: true),
                    jdTaskListId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_jDTaskTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_jDTaskTypes_jDTaskLists_jdTaskListId",
                        column: x => x.jdTaskListId,
                        principalTable: "jDTaskLists",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_jDTaskTypes_jDTypes_jdTypeId",
                        column: x => x.jdTypeId,
                        principalTable: "jDTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Contacts",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    contactOwner = table.Column<string>(nullable: true),
                    resourceId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    isLead = table.Column<int>(nullable: true),
                    departmentsName = table.Column<string>(maxLength: 400, nullable: true),
                    designationsName = table.Column<string>(maxLength: 400, nullable: true),
                    crmDepartmentsName = table.Column<string>(maxLength: 400, nullable: true),
                    crmDesignationsName = table.Column<string>(maxLength: 400, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contacts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Contacts_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Contacts_Resource_resourceId",
                        column: x => x.resourceId,
                        principalSchema: "CRM",
                        principalTable: "Resource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RelSupplierCustomerResourse",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    resourceId = table.Column<int>(nullable: true),
                    roleTypeId = table.Column<int>(nullable: true),
                    ledgerId = table.Column<int>(nullable: true),
                    distributorTypeId = table.Column<int>(nullable: true),
                    LeadsId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelSupplierCustomerResourse", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelSupplierCustomerResourse_Leads_LeadsId",
                        column: x => x.LeadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelSupplierCustomerResourse_DistributorType_distributorTypeId",
                        column: x => x.distributorTypeId,
                        principalSchema: "Distribution",
                        principalTable: "DistributorType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelSupplierCustomerResourse_Ledger_ledgerId",
                        column: x => x.ledgerId,
                        principalSchema: "ACCOUNT",
                        principalTable: "Ledger",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelSupplierCustomerResourse_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "HR",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelSupplierCustomerResourse_Resource_resourceId",
                        column: x => x.resourceId,
                        principalSchema: "CRM",
                        principalTable: "Resource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelSupplierCustomerResourse_RoleType_roleTypeId",
                        column: x => x.roleTypeId,
                        principalSchema: "OSales",
                        principalTable: "RoleType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Contact",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    Department = table.Column<string>(nullable: true),
                    Designation = table.Column<string>(nullable: true),
                    personName = table.Column<string>(nullable: true),
                    phoneNumber = table.Column<string>(nullable: true),
                    mobileNumber = table.Column<string>(nullable: true),
                    resourceId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contact", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Contact_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "SCM",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Contact_Resource_resourceId",
                        column: x => x.resourceId,
                        principalSchema: "CRM",
                        principalTable: "Resource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeePostingPlace",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    branchId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    hrDivisionId = table.Column<int>(nullable: true),
                    hrUnitId = table.Column<int>(nullable: true),
                    locationId = table.Column<int>(nullable: true),
                    officeId = table.Column<int>(nullable: true),
                    placeName = table.Column<string>(nullable: true),
                    placeNameBn = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    type = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    sortOrder = table.Column<int>(nullable: true),
                    responsibilityId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeePostingPlace", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_SpecialBranchUnit_branchId",
                        column: x => x.branchId,
                        principalSchema: "HR",
                        principalTable: "SpecialBranchUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_HrDivision_hrDivisionId",
                        column: x => x.hrDivisionId,
                        principalSchema: "HR",
                        principalTable: "HrDivision",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_HrUnit_hrUnitId",
                        column: x => x.hrUnitId,
                        principalSchema: "HR",
                        principalTable: "HrUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_Location_locationId",
                        column: x => x.locationId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_FunctionInfo_officeId",
                        column: x => x.officeId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeePostingPlace_JobResponsibility_responsibilityId",
                        column: x => x.responsibilityId,
                        principalSchema: "ACR",
                        principalTable: "JobResponsibility",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TransferLog",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: false),
                    workStation = table.Column<string>(nullable: true),
                    from = table.Column<DateTime>(nullable: true),
                    to = table.Column<DateTime>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    designatioId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    salaryGradeId = table.Column<int>(nullable: true),
                    toBranchId = table.Column<int>(nullable: true),
                    zoneId = table.Column<int>(nullable: true),
                    officeId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    hrUnitId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    substitutionEmp = table.Column<string>(nullable: true),
                    clearenceUrl = table.Column<string>(nullable: true),
                    url = table.Column<string>(nullable: true),
                    reportDateBn = table.Column<string>(nullable: true),
                    reportDateEn = table.Column<DateTime>(nullable: true),
                    orderDate = table.Column<DateTime>(nullable: true),
                    orderNo = table.Column<string>(nullable: true),
                    releaseSignatory = table.Column<string>(nullable: true),
                    signatoryCode = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransferLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransferLog_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferLog_Designation_designatioId",
                        column: x => x.designatioId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferLog_HrDivision_divisionId",
                        column: x => x.divisionId,
                        principalSchema: "HR",
                        principalTable: "HrDivision",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferLog_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_TransferLog_HrUnit_hrUnitId",
                        column: x => x.hrUnitId,
                        principalSchema: "HR",
                        principalTable: "HrUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferLog_FunctionInfo_officeId",
                        column: x => x.officeId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferLog_SalaryGrade_salaryGradeId",
                        column: x => x.salaryGradeId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryGrade",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferLog_HrBranch_toBranchId",
                        column: x => x.toBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TransferLog_Location_zoneId",
                        column: x => x.zoneId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProcessEmpSalaryStructure",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: false),
                    employeeCode = table.Column<string>(nullable: true),
                    employeeName = table.Column<string>(nullable: true),
                    seniorityLevel = table.Column<int>(nullable: true),
                    joiningDateGovtService = table.Column<DateTime>(nullable: true),
                    sbuId = table.Column<int>(nullable: true),
                    employeeTypeId = table.Column<int>(nullable: true),
                    branchType = table.Column<string>(nullable: true),
                    postingPlaceName = table.Column<string>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: false),
                    salaryHeadId = table.Column<int>(nullable: false),
                    desiCode = table.Column<string>(nullable: true),
                    accountNo = table.Column<string>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    hrDivisionId = table.Column<int>(nullable: true),
                    hrUnitId = table.Column<int>(nullable: true),
                    officeId = table.Column<int>(nullable: true),
                    zoneId = table.Column<int>(nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    amount = table.Column<decimal>(nullable: false),
                    pfType = table.Column<string>(nullable: true),
                    pfPercentage = table.Column<int>(nullable: true),
                    days = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProcessEmpSalaryStructure", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_HrDivision_hrDivisionId",
                        column: x => x.hrDivisionId,
                        principalSchema: "HR",
                        principalTable: "HrDivision",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_HrUnit_hrUnitId",
                        column: x => x.hrUnitId,
                        principalSchema: "HR",
                        principalTable: "HrUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_FunctionInfo_officeId",
                        column: x => x.officeId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ProcessEmpSalaryStructure_Location_zoneId",
                        column: x => x.zoneId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalaryVoucherMaster",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    particular = table.Column<string>(nullable: true),
                    accountCode = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    hrBranchId = table.Column<int>(nullable: true),
                    departmentId = table.Column<int>(nullable: true),
                    hrUnitId = table.Column<int>(nullable: true),
                    zoneId = table.Column<int>(nullable: true),
                    officeId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    uniqueId = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryVoucherMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherMaster_Department_departmentId",
                        column: x => x.departmentId,
                        principalSchema: "HR",
                        principalTable: "Department",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherMaster_HrDivision_divisionId",
                        column: x => x.divisionId,
                        principalSchema: "HR",
                        principalTable: "HrDivision",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherMaster_HrBranch_hrBranchId",
                        column: x => x.hrBranchId,
                        principalSchema: "HR",
                        principalTable: "HrBranch",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherMaster_HrUnit_hrUnitId",
                        column: x => x.hrUnitId,
                        principalSchema: "HR",
                        principalTable: "HrUnit",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherMaster_FunctionInfo_officeId",
                        column: x => x.officeId,
                        principalSchema: "HR",
                        principalTable: "FunctionInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherMaster_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherMaster_Location_zoneId",
                        column: x => x.zoneId,
                        principalSchema: "HR",
                        principalTable: "Location",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrganogramChild",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    designationId = table.Column<int>(nullable: true),
                    memberCount = table.Column<int>(nullable: true),
                    OrgRelationId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganogramChild", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrganogramChild_OrganogramRelation_OrgRelationId",
                        column: x => x.OrgRelationId,
                        principalSchema: "HR",
                        principalTable: "OrganogramRelation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganogramChild_Designation_designationId",
                        column: x => x.designationId,
                        principalSchema: "HR",
                        principalTable: "Designation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeAccounts",
                schema: "HR",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    pfMemberInfoId = table.Column<int>(nullable: true),
                    accountType = table.Column<string>(nullable: true),
                    bankId = table.Column<int>(nullable: true),
                    accountNumber = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeAccounts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeAccounts_Bank_bankId",
                        column: x => x.bankId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeAccounts_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeAccounts_PFMemberInfo_pfMemberInfoId",
                        column: x => x.pfMemberInfoId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ForfeitAccount",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    pfId = table.Column<int>(nullable: true),
                    forfeitDate = table.Column<DateTime>(nullable: true),
                    reason = table.Column<string>(nullable: true),
                    pfOwn = table.Column<decimal>(nullable: true),
                    pfCompany = table.Column<decimal>(nullable: true),
                    loan = table.Column<decimal>(nullable: true),
                    outstandingLoan = table.Column<decimal>(nullable: true),
                    balance = table.Column<decimal>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ForfeitAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ForfeitAccount_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ForfeitAccount_PFMemberInfo_pfId",
                        column: x => x.pfId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PfAccountDetails",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pfMemberCode = table.Column<string>(nullable: true),
                    pfId = table.Column<int>(nullable: true),
                    employeeCode = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    nameEnglish = table.Column<string>(nullable: true),
                    TrDate = table.Column<DateTime>(nullable: true),
                    pfOwn = table.Column<decimal>(nullable: true),
                    pfBank = table.Column<decimal>(nullable: true),
                    pfLoan = table.Column<decimal>(nullable: true),
                    pfInterest = table.Column<decimal>(nullable: true),
                    pfInterestBank = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PfAccountDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PfAccountDetails_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PfAccountDetails_PFMemberInfo_pfId",
                        column: x => x.pfId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PfAccountsSchedule",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pfMemberId = table.Column<int>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    year = table.Column<string>(nullable: true),
                    openingBalance = table.Column<decimal>(nullable: true),
                    januaryOwn = table.Column<decimal>(nullable: true),
                    januaryBank = table.Column<decimal>(nullable: true),
                    january = table.Column<decimal>(nullable: true),
                    februaryOwn = table.Column<decimal>(nullable: true),
                    februaryBank = table.Column<decimal>(nullable: true),
                    february = table.Column<decimal>(nullable: true),
                    marchOwn = table.Column<decimal>(nullable: true),
                    marchBank = table.Column<decimal>(nullable: true),
                    march = table.Column<decimal>(nullable: true),
                    aprilOwn = table.Column<decimal>(nullable: true),
                    aprilBank = table.Column<decimal>(nullable: true),
                    april = table.Column<decimal>(nullable: true),
                    mayOwn = table.Column<decimal>(nullable: true),
                    mayBank = table.Column<decimal>(nullable: true),
                    may = table.Column<decimal>(nullable: true),
                    juneOwn = table.Column<decimal>(nullable: true),
                    juneBank = table.Column<decimal>(nullable: true),
                    june = table.Column<decimal>(nullable: true),
                    julyOwn = table.Column<decimal>(nullable: true),
                    julyBank = table.Column<decimal>(nullable: true),
                    july = table.Column<decimal>(nullable: true),
                    augustOwn = table.Column<decimal>(nullable: true),
                    augustBank = table.Column<decimal>(nullable: true),
                    august = table.Column<decimal>(nullable: true),
                    septemberOwn = table.Column<decimal>(nullable: true),
                    septemberBank = table.Column<decimal>(nullable: true),
                    september = table.Column<decimal>(nullable: true),
                    octoberOwn = table.Column<decimal>(nullable: true),
                    octoberBank = table.Column<decimal>(nullable: true),
                    october = table.Column<decimal>(nullable: true),
                    novemberOwn = table.Column<decimal>(nullable: true),
                    novemberBank = table.Column<decimal>(nullable: true),
                    november = table.Column<decimal>(nullable: true),
                    decemberOwn = table.Column<decimal>(nullable: true),
                    decemberBank = table.Column<decimal>(nullable: true),
                    december = table.Column<decimal>(nullable: true),
                    interest = table.Column<decimal>(nullable: true),
                    total = table.Column<decimal>(nullable: true),
                    loan = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PfAccountsSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PfAccountsSchedule_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PfAccountsSchedule_PFMemberInfo_pfMemberId",
                        column: x => x.pfMemberId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFContribution",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pfmemberId = table.Column<int>(nullable: true),
                    transectionDate = table.Column<DateTime>(nullable: true),
                    contributionMonth = table.Column<DateTime>(nullable: true),
                    companyContribution = table.Column<decimal>(nullable: true),
                    employeeContribution = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFContribution", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFContribution_PFMemberInfo_pfmemberId",
                        column: x => x.pfmemberId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PfFinalSettlement",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pfMemberId = table.Column<int>(nullable: true),
                    pfMemberCode = table.Column<string>(nullable: true),
                    pfTotalOwn = table.Column<decimal>(nullable: true),
                    pfTotalBank = table.Column<decimal>(nullable: true),
                    pfTotalInterest = table.Column<decimal>(nullable: true),
                    pfTotalLoan = table.Column<decimal>(nullable: true),
                    pfTotal = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PfFinalSettlement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PfFinalSettlement_PFMemberInfo_pfMemberId",
                        column: x => x.pfMemberId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFLoanManagement",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pfmemberId = table.Column<int>(nullable: true),
                    loanAmount = table.Column<decimal>(nullable: true),
                    installmentAmount = table.Column<decimal>(nullable: true),
                    interestRate = table.Column<int>(nullable: true),
                    installmentPeriod = table.Column<int>(nullable: true),
                    note = table.Column<string>(nullable: true),
                    expectedSettlementDate = table.Column<DateTime>(nullable: true),
                    expectedDate = table.Column<DateTime>(nullable: true),
                    applicationDate = table.Column<DateTime>(nullable: true),
                    approveStatus = table.Column<int>(nullable: true),
                    isActive = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFLoanManagement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFLoanManagement_PFMemberInfo_pfmemberId",
                        column: x => x.pfmemberId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PfTransaction",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    pfMemberId = table.Column<int>(nullable: true),
                    yearId = table.Column<int>(nullable: true),
                    salaryPeriodId = table.Column<int>(nullable: true),
                    month = table.Column<string>(nullable: true),
                    pfOwn = table.Column<decimal>(nullable: true),
                    pfCompany = table.Column<decimal>(nullable: true),
                    pfLoanAmount = table.Column<decimal>(nullable: true),
                    installmentPay = table.Column<decimal>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PfTransaction", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PfTransaction_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PfTransaction_PFMemberInfo_pfMemberId",
                        column: x => x.pfMemberId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PfTransaction_SalaryPeriod_salaryPeriodId",
                        column: x => x.salaryPeriodId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryPeriod",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PfTransaction_SalaryYear_yearId",
                        column: x => x.yearId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PFVoucherDetails",
                schema: "PF",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    pfMemberCode = table.Column<string>(nullable: true),
                    pfMemberId = table.Column<int>(nullable: true),
                    employeeCode = table.Column<string>(nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    nameEnglish = table.Column<string>(nullable: true),
                    transactionDate = table.Column<DateTime>(nullable: true),
                    credit = table.Column<decimal>(nullable: true),
                    debit = table.Column<decimal>(nullable: true),
                    pfVoucherTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PFVoucherDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PFVoucherDetails_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFVoucherDetails_PFMemberInfo_pfMemberId",
                        column: x => x.pfMemberId,
                        principalSchema: "PF",
                        principalTable: "PFMemberInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PFVoucherDetails_PFVoucherType_pfVoucherTypeId",
                        column: x => x.pfVoucherTypeId,
                        principalSchema: "PF",
                        principalTable: "PFVoucherType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CandidateInfo",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobReqId = table.Column<int>(nullable: true),
                    candidateCode = table.Column<string>(maxLength: 30, nullable: true),
                    nationalID = table.Column<string>(nullable: true),
                    candidateName = table.Column<string>(nullable: true),
                    nationality = table.Column<string>(nullable: true),
                    dateOfBirth = table.Column<DateTime>(nullable: true),
                    gender = table.Column<string>(nullable: true),
                    placeOfBirth = table.Column<string>(nullable: true),
                    maritalStatus = table.Column<string>(nullable: true),
                    religion = table.Column<string>(nullable: true),
                    department = table.Column<int>(nullable: true),
                    bloodGroup = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true),
                    mobile = table.Column<string>(nullable: true),
                    homeDistrict = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CandidateInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CandidateInfo_JobRequisition_jobReqId",
                        column: x => x.jobReqId,
                        principalSchema: "RCRT",
                        principalTable: "JobRequisition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "JobPost",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobReqId = table.Column<int>(nullable: true),
                    media = table.Column<string>(nullable: true),
                    postDate = table.Column<DateTime>(nullable: true),
                    deadline = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_JobPost", x => x.Id);
                    table.ForeignKey(
                        name: "FK_JobPost_JobRequisition_jobReqId",
                        column: x => x.jobReqId,
                        principalSchema: "RCRT",
                        principalTable: "JobRequisition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "VMSContact",
                schema: "VMS",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    fuelStationInfoId = table.Column<int>(nullable: true),
                    resourceID = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_VMSContact", x => x.Id);
                    table.ForeignKey(
                        name: "FK_VMSContact_FuelStationInfo_fuelStationInfoId",
                        column: x => x.fuelStationInfoId,
                        principalSchema: "VMS",
                        principalTable: "FuelStationInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_VMSContact_VMSResource_resourceID",
                        column: x => x.resourceID,
                        principalSchema: "VMS",
                        principalTable: "VMSResource",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Agreement",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementOwner = table.Column<string>(maxLength: 300, nullable: true),
                    agreementNo = table.Column<string>(maxLength: 50, nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    agreementTypeId = table.Column<int>(nullable: true),
                    agreementCategoryId = table.Column<int>(nullable: true),
                    ratingCategoryId = table.Column<int>(nullable: true),
                    contactSignatoryId = table.Column<int>(nullable: true),
                    contactWitnessId = table.Column<int>(nullable: true),
                    agreementStatusId = table.Column<int>(nullable: true),
                    agreementDate = table.Column<DateTime>(nullable: true),
                    sendingDate = table.Column<DateTime>(nullable: true),
                    signingDate = table.Column<DateTime>(nullable: true),
                    expiredDate = table.Column<DateTime>(nullable: true),
                    expectedReportDate = table.Column<DateTime>(nullable: true),
                    noOfReports = table.Column<int>(nullable: true),
                    loanLimitAmount = table.Column<decimal>(nullable: true),
                    loanLimitUnit = table.Column<string>(maxLength: 10, nullable: true),
                    priority = table.Column<string>(maxLength: 10, nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    reviewremarks = table.Column<string>(nullable: true),
                    companySignatory = table.Column<string>(maxLength: 200, nullable: true),
                    companyWitness = table.Column<string>(maxLength: 200, nullable: true),
                    isPrint = table.Column<int>(nullable: true),
                    printDate = table.Column<DateTime>(nullable: true),
                    companySignatoryDesignation = table.Column<string>(maxLength: 400, nullable: true),
                    companyWitnessDesignation = table.Column<string>(maxLength: 400, nullable: true),
                    contactSignatoryName = table.Column<string>(maxLength: 400, nullable: true),
                    contactWitnessName = table.Column<string>(maxLength: 400, nullable: true),
                    contactSignatoryDesignation = table.Column<string>(maxLength: 400, nullable: true),
                    contactWitnessDesignation = table.Column<string>(maxLength: 400, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Agreement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Agreement_AgreementCategory_agreementCategoryId",
                        column: x => x.agreementCategoryId,
                        principalSchema: "CRM",
                        principalTable: "AgreementCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Agreement_AgreementStatus_agreementStatusId",
                        column: x => x.agreementStatusId,
                        principalSchema: "CRM",
                        principalTable: "AgreementStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Agreement_AgreementType_agreementTypeId",
                        column: x => x.agreementTypeId,
                        principalSchema: "CRM",
                        principalTable: "AgreementType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Agreement_Contacts_contactSignatoryId",
                        column: x => x.contactSignatoryId,
                        principalSchema: "CRM",
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Agreement_Contacts_contactWitnessId",
                        column: x => x.contactWitnessId,
                        principalSchema: "CRM",
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Agreement_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Agreement_RatingCategory_ratingCategoryId",
                        column: x => x.ratingCategoryId,
                        principalSchema: "CRM",
                        principalTable: "RatingCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Document",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    contactsId = table.Column<int>(nullable: true),
                    DocSubjectId = table.Column<int>(nullable: true),
                    FileLocation = table.Column<string>(nullable: true),
                    FileName = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Document", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Document_Contacts_contactsId",
                        column: x => x.contactsId,
                        principalSchema: "CRM",
                        principalTable: "Contacts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RelCustomerArea",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    areaId = table.Column<int>(nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelCustomerArea", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelCustomerArea_Area_areaId",
                        column: x => x.areaId,
                        principalSchema: "CRM",
                        principalTable: "Area",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelCustomerArea_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RelCustomerSalesTeamDeployment",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    nsmsalesTeamDeploymentId = table.Column<int>(nullable: true),
                    rsmsalesTeamDeploymentId = table.Column<int>(nullable: true),
                    tsmsalesTeamDeploymentId = table.Column<int>(nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    areaId = table.Column<int>(nullable: true),
                    salesLevelId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelCustomerSalesTeamDeployment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelCustomerSalesTeamDeployment_Area_areaId",
                        column: x => x.areaId,
                        principalSchema: "CRM",
                        principalTable: "Area",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelCustomerSalesTeamDeployment_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelCustomerSalesTeamDeployment_SalesTeamDeployment_nsmsalesTeamDeploymentId",
                        column: x => x.nsmsalesTeamDeploymentId,
                        principalSchema: "Distribution",
                        principalTable: "SalesTeamDeployment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelCustomerSalesTeamDeployment_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelCustomerSalesTeamDeployment_SalesTeamDeployment_rsmsalesTeamDeploymentId",
                        column: x => x.rsmsalesTeamDeploymentId,
                        principalSchema: "Distribution",
                        principalTable: "SalesTeamDeployment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelCustomerSalesTeamDeployment_SalesLevel_salesLevelId",
                        column: x => x.salesLevelId,
                        principalSchema: "Distribution",
                        principalTable: "SalesLevel",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelCustomerSalesTeamDeployment_SalesTeamDeployment_tsmsalesTeamDeploymentId",
                        column: x => x.tsmsalesTeamDeploymentId,
                        principalSchema: "Distribution",
                        principalTable: "SalesTeamDeployment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RequisitionMaster",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    requisitionDate = table.Column<DateTime>(nullable: true),
                    requisitionNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    TAXOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    apptotalAmount = table.Column<decimal>(nullable: true),
                    appVATOnTotal = table.Column<decimal>(nullable: true),
                    appTAXOnTotal = table.Column<decimal>(nullable: true),
                    appDiscountOnTotal = table.Column<decimal>(nullable: true),
                    appNetTotal = table.Column<decimal>(nullable: true),
                    isApproved = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequisitionMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RequisitionMaster_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesInvoiceMaster",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    shippingAddress = table.Column<string>(nullable: true),
                    alternateMobile = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    TAXOnTotal = table.Column<decimal>(nullable: true),
                    SDOnTotal = table.Column<decimal>(nullable: true),
                    CDOnTotal = table.Column<decimal>(nullable: true),
                    ATOnTotal = table.Column<decimal>(nullable: true),
                    RDOnTotal = table.Column<decimal>(nullable: true),
                    shippingCost = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    lcNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    lcDate = table.Column<DateTime>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    salesType = table.Column<int>(nullable: true),
                    exportType = table.Column<int>(nullable: true),
                    vds = table.Column<decimal>(nullable: true),
                    givenAmount = table.Column<decimal>(nullable: true),
                    change = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceMaster_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceMaster_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesReturnInvoiceMaster",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    isPayClose = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesReturnInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesReturnInvoiceMaster_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesReturnInvoiceMaster_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesReturnInvoiceMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RentInvoiceMaster",
                schema: "Rental",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    leadsId = table.Column<int>(nullable: true),
                    invoiceDate = table.Column<DateTime>(nullable: true),
                    paymentDate = table.Column<DateTime>(nullable: true),
                    invoiceNumber = table.Column<string>(nullable: true),
                    totalAmount = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    VATOnTotal = table.Column<decimal>(nullable: true),
                    DiscountOnTotal = table.Column<decimal>(nullable: true),
                    TAXOnTotal = table.Column<decimal>(nullable: true),
                    SDOnTotal = table.Column<decimal>(nullable: true),
                    CDOnTotal = table.Column<decimal>(nullable: true),
                    ATOnTotal = table.Column<decimal>(nullable: true),
                    RDOnTotal = table.Column<decimal>(nullable: true),
                    NetTotal = table.Column<decimal>(nullable: true),
                    isClose = table.Column<int>(nullable: true),
                    isStockClose = table.Column<int>(nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    lcNo = table.Column<string>(type: "nvarchar(150)", nullable: true),
                    lcDate = table.Column<DateTime>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    salesType = table.Column<int>(nullable: true),
                    exportType = table.Column<int>(nullable: true),
                    vds = table.Column<decimal>(nullable: true),
                    isreceive = table.Column<int>(nullable: true),
                    receiveDate = table.Column<DateTime>(nullable: true),
                    rentInvoiceMasterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RentInvoiceMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RentInvoiceMaster_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RentInvoiceMaster_Leads_leadsId",
                        column: x => x.leadsId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RentInvoiceMaster_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RentInvoiceMaster_RentInvoiceMaster_rentInvoiceMasterId",
                        column: x => x.rentInvoiceMasterId,
                        principalSchema: "Rental",
                        principalTable: "RentInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RentInvoiceMaster_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalaryVoucherDetails",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    particular = table.Column<string>(nullable: true),
                    accountCode = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    voucherMasterId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalaryVoucherDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalaryVoucherDetails_SalaryVoucherMaster_voucherMasterId",
                        column: x => x.voucherMasterId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryVoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RcrtEmpMemberships",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    nameOrganization = table.Column<string>(nullable: true),
                    membershipNo = table.Column<string>(nullable: true),
                    membershipId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RcrtEmpMemberships", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RcrtEmpMemberships_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RcrtEmpMemberships_Membership_membershipId",
                        column: x => x.membershipId,
                        principalSchema: "HR",
                        principalTable: "Membership",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RcrtReferences",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    name = table.Column<string>(nullable: true),
                    designation = table.Column<string>(nullable: true),
                    organization = table.Column<string>(nullable: true),
                    contact = table.Column<string>(nullable: true),
                    email = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RcrtReferences", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RcrtReferences_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "CandidatePhoto",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    url = table.Column<string>(nullable: false),
                    remarks = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CandidatePhoto", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CandidatePhoto_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RCRTAddress",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    countryId = table.Column<int>(nullable: true),
                    divisionId = table.Column<int>(nullable: true),
                    districtId = table.Column<int>(nullable: true),
                    thanaId = table.Column<int>(nullable: true),
                    union = table.Column<string>(nullable: true),
                    postOffice = table.Column<string>(nullable: true),
                    postCode = table.Column<string>(nullable: true),
                    blockSector = table.Column<string>(nullable: true),
                    houseVillage = table.Column<string>(nullable: true),
                    roadNumber = table.Column<string>(nullable: true),
                    type = table.Column<string>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RCRTAddress", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RCRTAddress_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RCRTAddress_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTAddress_Districts_districtId",
                        column: x => x.districtId,
                        principalTable: "Districts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTAddress_Divisions_divisionId",
                        column: x => x.divisionId,
                        principalTable: "Divisions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTAddress_Thanas_thanaId",
                        column: x => x.thanaId,
                        principalTable: "Thanas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RCRTEducation",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    institution = table.Column<string>(nullable: true),
                    resultId = table.Column<int>(nullable: true),
                    majorGroup = table.Column<string>(nullable: true),
                    grade = table.Column<string>(nullable: true),
                    passingYear = table.Column<int>(nullable: true),
                    degreeId = table.Column<int>(nullable: true),
                    organizationId = table.Column<int>(nullable: true),
                    reldegreesubjectId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RCRTEducation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RCRTEducation_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RCRTEducation_Degree_degreeId",
                        column: x => x.degreeId,
                        principalSchema: "HR",
                        principalTable: "Degree",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTEducation_Organization_organizationId",
                        column: x => x.organizationId,
                        principalSchema: "HR",
                        principalTable: "Organization",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTEducation_RelDegreeSubject_reldegreesubjectId",
                        column: x => x.reldegreesubjectId,
                        principalSchema: "HR",
                        principalTable: "RelDegreeSubject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTEducation_Result_resultId",
                        column: x => x.resultId,
                        principalSchema: "HR",
                        principalTable: "Result",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RCRTOtherQualification",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    otherQualificationHeadId = table.Column<int>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    resultId = table.Column<int>(nullable: true),
                    instituteName = table.Column<string>(nullable: true),
                    passingYear = table.Column<string>(nullable: true),
                    markGrade = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RCRTOtherQualification", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RCRTOtherQualification_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RCRTOtherQualification_OtherQualificationHead_otherQualificationHeadId",
                        column: x => x.otherQualificationHeadId,
                        principalSchema: "HR",
                        principalTable: "OtherQualificationHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTOtherQualification_Result_resultId",
                        column: x => x.resultId,
                        principalSchema: "HR",
                        principalTable: "Result",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RcrtPreviousEmployment",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    organizationTypeId = table.Column<int>(nullable: true),
                    companyName = table.Column<string>(nullable: true),
                    position = table.Column<string>(nullable: true),
                    department = table.Column<string>(nullable: true),
                    companyBusiness = table.Column<string>(nullable: true),
                    startDate = table.Column<DateTime>(nullable: true),
                    endDate = table.Column<DateTime>(nullable: true),
                    companyLocation = table.Column<string>(nullable: true),
                    responsibilities = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RcrtPreviousEmployment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RcrtPreviousEmployment_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RcrtPreviousEmployment_HRPMSOrganizationType_organizationTypeId",
                        column: x => x.organizationTypeId,
                        principalSchema: "HR",
                        principalTable: "HRPMSOrganizationType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RCRTProfessionalQualifications",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    qualificationHeadId = table.Column<int>(nullable: true),
                    subject = table.Column<string>(nullable: true),
                    resultId = table.Column<int>(nullable: true),
                    instituteName = table.Column<string>(nullable: true),
                    passingYear = table.Column<string>(nullable: true),
                    markGrade = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RCRTProfessionalQualifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RCRTProfessionalQualifications_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RCRTProfessionalQualifications_QualificationHead_qualificationHeadId",
                        column: x => x.qualificationHeadId,
                        principalSchema: "HR",
                        principalTable: "QualificationHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTProfessionalQualifications_Result_resultId",
                        column: x => x.resultId,
                        principalSchema: "HR",
                        principalTable: "Result",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RcrtPublication",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    publicationName = table.Column<string>(nullable: true),
                    publicationType = table.Column<string>(nullable: true),
                    publicationPlace = table.Column<string>(nullable: true),
                    publicationDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RcrtPublication", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RcrtPublication_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RCRTTrainingLog",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateId = table.Column<int>(nullable: false),
                    fromDate = table.Column<DateTime>(nullable: true),
                    toDate = table.Column<DateTime>(nullable: true),
                    countryId = table.Column<int>(nullable: true),
                    trainingCategoryId = table.Column<int>(nullable: true),
                    trainingInstituteId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    trainingTitle = table.Column<string>(nullable: true),
                    sponsoringAgency = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RCRTTrainingLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RCRTTrainingLog_CandidateInfo_candidateId",
                        column: x => x.candidateId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RCRTTrainingLog_Countries_countryId",
                        column: x => x.countryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTTrainingLog_TrainingCategory_trainingCategoryId",
                        column: x => x.trainingCategoryId,
                        principalSchema: "HR",
                        principalTable: "TrainingCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RCRTTrainingLog_TrainingInstitute_trainingInstituteId",
                        column: x => x.trainingInstituteId,
                        principalSchema: "HR",
                        principalTable: "TrainingInstitute",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ResultMaster",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    candidateInfoId = table.Column<int>(nullable: false),
                    jobRequisitionId = table.Column<int>(nullable: false),
                    examNumber = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResultMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ResultMaster_CandidateInfo_candidateInfoId",
                        column: x => x.candidateInfoId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ResultMaster_JobRequisition_jobRequisitionId",
                        column: x => x.jobRequisitionId,
                        principalSchema: "RCRT",
                        principalTable: "JobRequisition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InterviewCalling",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    jobRequisitionId = table.Column<int>(nullable: true),
                    jobPostId = table.Column<int>(nullable: true),
                    candidateInfoId = table.Column<int>(nullable: true),
                    interviewDate = table.Column<DateTime>(nullable: true),
                    interviewTime = table.Column<string>(nullable: true),
                    venue = table.Column<string>(nullable: true),
                    interviewType = table.Column<string>(nullable: true),
                    communicationType = table.Column<string>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InterviewCalling", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InterviewCalling_CandidateInfo_candidateInfoId",
                        column: x => x.candidateInfoId,
                        principalSchema: "RCRT",
                        principalTable: "CandidateInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_InterviewCalling_JobPost_jobPostId",
                        column: x => x.jobPostId,
                        principalSchema: "RCRT",
                        principalTable: "JobPost",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_InterviewCalling_JobRequisition_jobRequisitionId",
                        column: x => x.jobRequisitionId,
                        principalSchema: "RCRT",
                        principalTable: "JobRequisition",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AgreementDetails",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementId = table.Column<int>(nullable: true),
                    ratingYearId = table.Column<int>(nullable: true),
                    vatCategoryId = table.Column<int>(nullable: true),
                    taxCategoryId = table.Column<int>(nullable: true),
                    ratingDate = table.Column<DateTime>(nullable: true),
                    agreementAmount = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    ratingAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    isProposed = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    revremarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AgreementDetails_Agreement_agreementId",
                        column: x => x.agreementId,
                        principalSchema: "CRM",
                        principalTable: "Agreement",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AgreementDetails_RatingYear_ratingYearId",
                        column: x => x.ratingYearId,
                        principalSchema: "CRM",
                        principalTable: "RatingYear",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AgreementDetails_TaxCategory_taxCategoryId",
                        column: x => x.taxCategoryId,
                        principalSchema: "CRM",
                        principalTable: "TaxCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AgreementDetails_VatCategory_vatCategoryId",
                        column: x => x.vatCategoryId,
                        principalSchema: "CRM",
                        principalTable: "VatCategory",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AgreementDetailsHistory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementId = table.Column<int>(nullable: true),
                    agreementDetailsId = table.Column<int>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    ratingAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AgreementDetailsHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AgreementDetailsHistory_Agreement_agreementId",
                        column: x => x.agreementId,
                        principalSchema: "CRM",
                        principalTable: "Agreement",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RelProductAgreement",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    productId = table.Column<int>(nullable: true),
                    agreementId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelProductAgreement", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelProductAgreement_Agreement_agreementId",
                        column: x => x.agreementId,
                        principalSchema: "CRM",
                        principalTable: "Agreement",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RelProductAgreement_Product_productId",
                        column: x => x.productId,
                        principalSchema: "CRM",
                        principalTable: "Product",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RequisitionDetail",
                schema: "Distribution",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    requisitionMasterId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    disItemPriceFixingId = table.Column<int>(nullable: true),
                    rate = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    sdAmount = table.Column<decimal>(nullable: true),
                    cdAmount = table.Column<decimal>(nullable: true),
                    atAmount = table.Column<decimal>(nullable: true),
                    rdAmount = table.Column<decimal>(nullable: true),
                    lineTotal = table.Column<decimal>(nullable: true),
                    discountAmount = table.Column<decimal>(nullable: true),
                    appvatAmount = table.Column<decimal>(nullable: true),
                    apptaxAmount = table.Column<decimal>(nullable: true),
                    appsdAmount = table.Column<decimal>(nullable: true),
                    appcdAmount = table.Column<decimal>(nullable: true),
                    appatAmount = table.Column<decimal>(nullable: true),
                    apprdAmount = table.Column<decimal>(nullable: true),
                    applineTotal = table.Column<decimal>(nullable: true),
                    appdiscountAmount = table.Column<decimal>(nullable: true),
                    packageDetailId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RequisitionDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RequisitionDetail_DisItemPriceFixing_disItemPriceFixingId",
                        column: x => x.disItemPriceFixingId,
                        principalSchema: "Distribution",
                        principalTable: "DisItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionDetail_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionDetail_PackageDetail_packageDetailId",
                        column: x => x.packageDetailId,
                        principalSchema: "Distribution",
                        principalTable: "PackageDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RequisitionDetail_RequisitionMaster_requisitionMasterId",
                        column: x => x.requisitionMasterId,
                        principalSchema: "Distribution",
                        principalTable: "RequisitionMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesCollection",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    companyId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    collectionAmount = table.Column<decimal>(nullable: true),
                    collectionNumber = table.Column<string>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    bankName = table.Column<string>(nullable: true),
                    checqueNo = table.Column<string>(nullable: true),
                    trxNo = table.Column<string>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    storeId = table.Column<int>(nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    cardAmount = table.Column<decimal>(nullable: true),
                    mobileAmount = table.Column<decimal>(nullable: true),
                    bankInfoId = table.Column<int>(nullable: true),
                    cardTypeId = table.Column<int>(nullable: true),
                    walletTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesCollection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesCollection_Bank_bankInfoId",
                        column: x => x.bankInfoId,
                        principalSchema: "CRM",
                        principalTable: "Bank",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_CardType_cardTypeId",
                        column: x => x.cardTypeId,
                        principalSchema: "POS",
                        principalTable: "CardType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_Companies_companyId",
                        column: x => x.companyId,
                        principalTable: "Companies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "OSales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_Store_storeId",
                        column: x => x.storeId,
                        principalSchema: "POS",
                        principalTable: "Store",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollection_WalletType_walletTypeId",
                        column: x => x.walletTypeId,
                        principalSchema: "Payroll",
                        principalTable: "WalletType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesCollectionBillInfo",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    relSupplierCustomerResourseId = table.Column<int>(nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    billPaymentNo = table.Column<string>(nullable: true),
                    billPaymentDate = table.Column<DateTime>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    dueAmount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    ispaid = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesCollectionBillInfo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesCollectionBillInfo_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                        column: x => x.relSupplierCustomerResourseId,
                        principalSchema: "OSales",
                        principalTable: "RelSupplierCustomerResourse",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollectionBillInfo_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "OSales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesTermsConditions",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    termtext = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesTermsConditions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesTermsConditions_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "OSales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RentInvoiceDetail",
                schema: "Rental",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceFixingId = table.Column<int>(nullable: true),
                    itemSpecicationId = table.Column<int>(nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    rate = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    sdAmount = table.Column<decimal>(nullable: true),
                    cdAmount = table.Column<decimal>(nullable: true),
                    atAmount = table.Column<decimal>(nullable: true),
                    rdAmount = table.Column<decimal>(nullable: true),
                    disAmount = table.Column<decimal>(nullable: true),
                    lineTotal = table.Column<decimal>(nullable: true),
                    StartDate = table.Column<DateTime>(nullable: true),
                    EndDate = table.Column<DateTime>(nullable: true),
                    StartTime = table.Column<string>(maxLength: 20, nullable: true),
                    EndTime = table.Column<string>(maxLength: 20, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RentInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RentInvoiceDetail_ItemPriceFixing_itemPriceFixingId",
                        column: x => x.itemPriceFixingId,
                        principalSchema: "POS",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RentInvoiceDetail_ItemSpecification_itemSpecicationId",
                        column: x => x.itemSpecicationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RentInvoiceDetail_RentInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "Rental",
                        principalTable: "RentInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RentTermsConditions",
                schema: "Rental",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    termtext = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RentTermsConditions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RentTermsConditions_RentInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "Rental",
                        principalTable: "RentInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeSalaryPosting",
                schema: "Payroll",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    employeeId = table.Column<int>(nullable: true),
                    salaryHeadId = table.Column<int>(nullable: true),
                    accountNo = table.Column<string>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    salaryVoucherDetailsId = table.Column<int>(nullable: true),
                    status = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeSalaryPosting", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeSalaryPosting_EmployeeInfo_employeeId",
                        column: x => x.employeeId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeSalaryPosting_SalaryHead_salaryHeadId",
                        column: x => x.salaryHeadId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryHead",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeSalaryPosting_SalaryVoucherDetails_salaryVoucherDetailsId",
                        column: x => x.salaryVoucherDetailsId,
                        principalSchema: "Payroll",
                        principalTable: "SalaryVoucherDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ResultDetails",
                schema: "RCRT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    resultId = table.Column<int>(nullable: false),
                    ResultMasterId = table.Column<int>(nullable: true),
                    examTypeId = table.Column<int>(nullable: false),
                    marks = table.Column<int>(nullable: true),
                    percentage = table.Column<int>(nullable: true),
                    status = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResultDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ResultDetails_ResultMaster_ResultMasterId",
                        column: x => x.ResultMasterId,
                        principalSchema: "RCRT",
                        principalTable: "ResultMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ResultDetails_ExamType_examTypeId",
                        column: x => x.examTypeId,
                        principalSchema: "RCRT",
                        principalTable: "ExamType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ApprovedforCro",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementDetailsId = table.Column<int>(nullable: true),
                    approvedDate = table.Column<DateTime>(nullable: true),
                    isRated = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApprovedforCro", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApprovedforCro_AgreementDetails_agreementDetailsId",
                        column: x => x.agreementDetailsId,
                        principalSchema: "CRM",
                        principalTable: "AgreementDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RatingReview",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementDetailsId = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RatingReview", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RatingReview_AgreementDetails_agreementDetailsId",
                        column: x => x.agreementDetailsId,
                        principalSchema: "CRM",
                        principalTable: "AgreementDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesInvoiceDetail",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementDetailsId = table.Column<int>(nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    unitPrice = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    discountAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceDetail_AgreementDetails_agreementDetailsId",
                        column: x => x.agreementDetailsId,
                        principalSchema: "CRM",
                        principalTable: "AgreementDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceDetail_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "Sales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesCollectionDetail",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    salesCollectionId = table.Column<int>(nullable: true),
                    salesCollectionBillInfoId = table.Column<int>(nullable: true),
                    collectionDate = table.Column<DateTime>(nullable: true),
                    Amount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesCollectionDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesCollectionDetail_SalesCollectionBillInfo_salesCollectionBillInfoId",
                        column: x => x.salesCollectionBillInfoId,
                        principalSchema: "OSales",
                        principalTable: "SalesCollectionBillInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesCollectionDetail_SalesCollection_salesCollectionId",
                        column: x => x.salesCollectionId,
                        principalSchema: "OSales",
                        principalTable: "SalesCollection",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesInvoiceDetail",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceFixingId = table.Column<int>(nullable: true),
                    itemSpecicationId = table.Column<int>(nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    rate = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    sdAmount = table.Column<decimal>(nullable: true),
                    cdAmount = table.Column<decimal>(nullable: true),
                    atAmount = table.Column<decimal>(nullable: true),
                    rdAmount = table.Column<decimal>(nullable: true),
                    disAmount = table.Column<decimal>(nullable: true),
                    lineTotal = table.Column<decimal>(nullable: true),
                    rentInvoiceDetailId = table.Column<int>(nullable: true),
                    patientServiceDetailsId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceDetail_ItemPriceFixing_itemPriceFixingId",
                        column: x => x.itemPriceFixingId,
                        principalSchema: "OSales",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceDetail_ItemSpecification_itemSpecicationId",
                        column: x => x.itemSpecicationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceDetail_PatientServiceDetail_patientServiceDetailsId",
                        column: x => x.patientServiceDetailsId,
                        principalSchema: "HOSPTL",
                        principalTable: "PatientServiceDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceDetail_RentInvoiceDetail_rentInvoiceDetailId",
                        column: x => x.rentInvoiceDetailId,
                        principalSchema: "Rental",
                        principalTable: "RentInvoiceDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesInvoiceDetail_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "OSales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillGenerate",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    approvedforCroId = table.Column<int>(nullable: true),
                    bankBranchDetailsId = table.Column<int>(nullable: true),
                    billNo = table.Column<string>(maxLength: 250, nullable: true),
                    invoiceNo = table.Column<string>(maxLength: 30, nullable: true),
                    billDate = table.Column<DateTime>(nullable: true),
                    ratingAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    advanceAmount = table.Column<decimal>(nullable: true),
                    remarks = table.Column<string>(nullable: true),
                    invoiceOrder = table.Column<string>(nullable: true),
                    invoiceAmount = table.Column<decimal>(nullable: true),
                    salesInvoiceMasterId = table.Column<int>(nullable: true),
                    leadssId = table.Column<int>(nullable: true),
                    agreementDetailssId = table.Column<int>(nullable: true),
                    agreementtId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillGenerate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillGenerate_AgreementDetails_agreementDetailssId",
                        column: x => x.agreementDetailssId,
                        principalSchema: "CRM",
                        principalTable: "AgreementDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillGenerate_Agreement_agreementtId",
                        column: x => x.agreementtId,
                        principalSchema: "CRM",
                        principalTable: "Agreement",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillGenerate_ApprovedforCro_approvedforCroId",
                        column: x => x.approvedforCroId,
                        principalSchema: "CRM",
                        principalTable: "ApprovedforCro",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillGenerate_BankBranchDetails_bankBranchDetailsId",
                        column: x => x.bankBranchDetailsId,
                        principalSchema: "CRM",
                        principalTable: "BankBranchDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillGenerate_Leads_leadssId",
                        column: x => x.leadssId,
                        principalSchema: "CRM",
                        principalTable: "Leads",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillGenerate_SalesInvoiceMaster_salesInvoiceMasterId",
                        column: x => x.salesInvoiceMasterId,
                        principalSchema: "OSales",
                        principalTable: "SalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OperationMaster",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementId = table.Column<int>(nullable: true),
                    approvedforCroId = table.Column<int>(nullable: true),
                    assignTeam = table.Column<string>(maxLength: 150, nullable: true),
                    assignTeamLeader = table.Column<string>(maxLength: 150, nullable: true),
                    assignTeamDate = table.Column<DateTime>(nullable: true),
                    assignCoHeadDate = table.Column<DateTime>(nullable: true),
                    assignCoHead = table.Column<string>(maxLength: 150, nullable: true),
                    assignDate = table.Column<DateTime>(nullable: true),
                    assignTo = table.Column<string>(maxLength: 150, nullable: true),
                    tLDeclarationDate = table.Column<DateTime>(nullable: true),
                    declaration = table.Column<int>(nullable: true),
                    jobStatusId = table.Column<int>(nullable: true),
                    reportNo = table.Column<string>(maxLength: 100, nullable: true),
                    reportDate = table.Column<DateTime>(nullable: true),
                    comments = table.Column<string>(maxLength: 550, nullable: true),
                    assignDateReview = table.Column<DateTime>(nullable: true),
                    assignDateConversion = table.Column<DateTime>(nullable: true),
                    assignToReviewer = table.Column<string>(maxLength: 150, nullable: true),
                    assignToConverter = table.Column<string>(maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationMaster", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationMaster_Agreement_agreementId",
                        column: x => x.agreementId,
                        principalSchema: "CRM",
                        principalTable: "Agreement",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OperationMaster_ApprovedforCro_approvedforCroId",
                        column: x => x.approvedforCroId,
                        principalSchema: "CRM",
                        principalTable: "ApprovedforCro",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OperationMaster_JobStatus_jobStatusId",
                        column: x => x.jobStatusId,
                        principalSchema: "CRO",
                        principalTable: "JobStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RepSalesInvoiceDetail",
                schema: "Sales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    agreementDetailsId = table.Column<int>(nullable: true),
                    repSalesInvoiceMasterId = table.Column<int>(nullable: true),
                    salesInvoiceDetailId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true),
                    unitPrice = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    taxAmount = table.Column<decimal>(nullable: true),
                    discountAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepSalesInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RepSalesInvoiceDetail_AgreementDetails_agreementDetailsId",
                        column: x => x.agreementDetailsId,
                        principalSchema: "CRM",
                        principalTable: "AgreementDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepSalesInvoiceDetail_RepSalesInvoiceMaster_repSalesInvoiceMasterId",
                        column: x => x.repSalesInvoiceMasterId,
                        principalSchema: "Sales",
                        principalTable: "RepSalesInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepSalesInvoiceDetail_SalesInvoiceDetail_salesInvoiceDetailId",
                        column: x => x.salesInvoiceDetailId,
                        principalSchema: "Sales",
                        principalTable: "SalesInvoiceDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SalesReturnInvoiceDetail",
                schema: "OSales",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    itemPriceFixingId = table.Column<int>(nullable: true),
                    salesReturnInvoiceMasterId = table.Column<int>(nullable: true),
                    salesInvoiceDetailId = table.Column<int>(nullable: true),
                    quantity = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SalesReturnInvoiceDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SalesReturnInvoiceDetail_ItemPriceFixing_itemPriceFixingId",
                        column: x => x.itemPriceFixingId,
                        principalSchema: "OSales",
                        principalTable: "ItemPriceFixing",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesReturnInvoiceDetail_SalesInvoiceDetail_salesInvoiceDetailId",
                        column: x => x.salesInvoiceDetailId,
                        principalSchema: "OSales",
                        principalTable: "SalesInvoiceDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SalesReturnInvoiceDetail_SalesReturnInvoiceMaster_salesReturnInvoiceMasterId",
                        column: x => x.salesReturnInvoiceMasterId,
                        principalSchema: "OSales",
                        principalTable: "SalesReturnInvoiceMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockDetails",
                schema: "SCM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    stockMasterId = table.Column<int>(nullable: true),
                    orderDetailsId = table.Column<int>(nullable: true),
                    transferDetailId = table.Column<int>(nullable: true),
                    iOUDetailsId = table.Column<int>(nullable: true),
                    rate = table.Column<decimal>(type: "decimal(18,2)", nullable: true),
                    grQty = table.Column<decimal>(nullable: true),
                    poQty = table.Column<decimal>(nullable: true),
                    qty = table.Column<decimal>(nullable: true),
                    purchaseRate = table.Column<decimal>(nullable: true),
                    purchaseOrdersDetailId = table.Column<int>(nullable: true),
                    itemSpecificationId = table.Column<int>(nullable: true),
                    salesInvoiceDetailId = table.Column<int>(nullable: true),
                    itemReqDetailsId = table.Column<int>(nullable: true),
                    productionRequsitionDetailsId = table.Column<int>(nullable: true),
                    storeDepartmentTypeId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StockDetails_IOUDetails_iOUDetailsId",
                        column: x => x.iOUDetailsId,
                        principalSchema: "SCM",
                        principalTable: "IOUDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_ItemReqDetails_itemReqDetailsId",
                        column: x => x.itemReqDetailsId,
                        principalSchema: "SCM",
                        principalTable: "ItemReqDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_ItemSpecification_itemSpecificationId",
                        column: x => x.itemSpecificationId,
                        principalSchema: "SCM",
                        principalTable: "ItemSpecification",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_PurchaseOrderDetails_orderDetailsId",
                        column: x => x.orderDetailsId,
                        principalSchema: "SCM",
                        principalTable: "PurchaseOrderDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_ProductionRequsitionDetails_productionRequsitionDetailsId",
                        column: x => x.productionRequsitionDetailsId,
                        principalSchema: "PROD",
                        principalTable: "ProductionRequsitionDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_PurchaseOrdersDetails_purchaseOrdersDetailId",
                        column: x => x.purchaseOrdersDetailId,
                        principalSchema: "Purchase",
                        principalTable: "PurchaseOrdersDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_SalesInvoiceDetail_salesInvoiceDetailId",
                        column: x => x.salesInvoiceDetailId,
                        principalSchema: "OSales",
                        principalTable: "SalesInvoiceDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_StockMaster_stockMasterId",
                        column: x => x.stockMasterId,
                        principalSchema: "SCM",
                        principalTable: "StockMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_StoreDepartmentTypes_storeDepartmentTypeId",
                        column: x => x.storeDepartmentTypeId,
                        principalSchema: "SCM",
                        principalTable: "StoreDepartmentTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockDetails_TransferDetail_transferDetailId",
                        column: x => x.transferDetailId,
                        principalSchema: "Purchase",
                        principalTable: "TransferDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillCollection",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    billGenerateId = table.Column<int>(nullable: true),
                    paymentModeId = table.Column<int>(nullable: true),
                    bankBranchDetailsId = table.Column<int>(nullable: true),
                    chequeNo = table.Column<string>(maxLength: 250, nullable: true),
                    receivedDate = table.Column<DateTime>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    mobileBankAmount = table.Column<decimal>(nullable: true),
                    payOrderAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    discount = table.Column<decimal>(nullable: true),
                    moneyReceipt = table.Column<string>(nullable: true),
                    challanReceiptVat = table.Column<decimal>(nullable: true),
                    challanReceiptTax = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillCollection", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillCollection_BankBranchDetails_bankBranchDetailsId",
                        column: x => x.bankBranchDetailsId,
                        principalSchema: "CRM",
                        principalTable: "BankBranchDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillCollection_BillGenerate_billGenerateId",
                        column: x => x.billGenerateId,
                        principalSchema: "CRM",
                        principalTable: "BillGenerate",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillCollection_PaymentMode_paymentModeId",
                        column: x => x.paymentModeId,
                        principalSchema: "SCM",
                        principalTable: "PaymentMode",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillGenerateHistory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    billGenerateId = table.Column<int>(nullable: true),
                    billNo = table.Column<string>(maxLength: 250, nullable: true),
                    invoiceNo = table.Column<string>(maxLength: 30, nullable: true),
                    billDate = table.Column<DateTime>(nullable: true),
                    ratingAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillGenerateHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillGenerateHistory_BillGenerate_billGenerateId",
                        column: x => x.billGenerateId,
                        principalSchema: "CRM",
                        principalTable: "BillGenerate",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Archive",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: false),
                    convertDate = table.Column<DateTime>(nullable: true),
                    archiveDate = table.Column<DateTime>(nullable: true),
                    reportPrintDate = table.Column<DateTime>(nullable: true),
                    ratingDate = table.Column<DateTime>(nullable: true),
                    ratingValidTillDate = table.Column<DateTime>(nullable: true),
                    ratingValidDays = table.Column<string>(maxLength: 150, nullable: true),
                    archiveLocationSoftcopy = table.Column<string>(maxLength: 300, nullable: true),
                    archiveShelfId = table.Column<int>(nullable: true),
                    hardCopyNewFileNo = table.Column<string>(maxLength: 300, nullable: true),
                    hardCopyOldFileNo = table.Column<string>(maxLength: 300, nullable: true),
                    hardWorkingFile = table.Column<int>(nullable: true),
                    softWorkingFile = table.Column<int>(nullable: true),
                    archiveFloorId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Archive", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Archive_ArchiveShelf_archiveShelfId",
                        column: x => x.archiveShelfId,
                        principalSchema: "CRO",
                        principalTable: "ArchiveShelf",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Archive_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AttachmentStatus",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: true),
                    attachmentTypeId = table.Column<int>(nullable: true),
                    fileTypeName = table.Column<string>(maxLength: 250, nullable: true),
                    subjectName = table.Column<string>(maxLength: 250, nullable: true),
                    archieveId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AttachmentStatus", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AttachmentStatus_AttachmentType_attachmentTypeId",
                        column: x => x.attachmentTypeId,
                        principalSchema: "CRO",
                        principalTable: "AttachmentType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AttachmentStatus_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IRCMeetingAttendance",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IRCMeetingAttendance", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IRCMeetingAttendance_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IRCMeetingAttendance_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IRCMemberComments",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: true),
                    employeeInfoId = table.Column<int>(nullable: true),
                    comments = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IRCMemberComments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IRCMemberComments_EmployeeInfo_employeeInfoId",
                        column: x => x.employeeInfoId,
                        principalSchema: "HR",
                        principalTable: "EmployeeInfo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IRCMemberComments_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IRCRating",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: false),
                    ircDate = table.Column<DateTime>(nullable: true),
                    ratingTypeName = table.Column<string>(maxLength: 150, nullable: true),
                    ratingValue = table.Column<string>(maxLength: 150, nullable: true),
                    shortRatingName = table.Column<string>(maxLength: 150, nullable: true),
                    outlook = table.Column<string>(maxLength: 150, nullable: true),
                    entityRatingName = table.Column<string>(maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IRCRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IRCRating_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ProposedRating",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: false),
                    proposedIRCRatingTypeName = table.Column<string>(maxLength: 150, nullable: true),
                    proposedIRCRatingValue = table.Column<string>(maxLength: 150, nullable: true),
                    proposedIRCShortRatingName = table.Column<string>(maxLength: 150, nullable: true),
                    proposedIRCOutlook = table.Column<string>(maxLength: 150, nullable: true),
                    proposedEntityRatingName = table.Column<string>(maxLength: 150, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposedRating", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProposedRating_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ReceiveDocument",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: true),
                    documentChartId = table.Column<int>(nullable: true),
                    archieveId = table.Column<int>(nullable: true),
                    description = table.Column<string>(nullable: true),
                    receiveDate = table.Column<DateTime>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReceiveDocument", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReceiveDocument_DocumentChart_documentChartId",
                        column: x => x.documentChartId,
                        principalSchema: "CRO",
                        principalTable: "DocumentChart",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReceiveDocument_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StatusLog",
                schema: "CRO",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    operationMasterId = table.Column<int>(nullable: true),
                    jobStatusId = table.Column<int>(nullable: true),
                    currentUser = table.Column<string>(maxLength: 250, nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StatusLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StatusLog_JobStatus_jobStatusId",
                        column: x => x.jobStatusId,
                        principalSchema: "CRO",
                        principalTable: "JobStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StatusLog_OperationMaster_operationMasterId",
                        column: x => x.operationMasterId,
                        principalSchema: "CRO",
                        principalTable: "OperationMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CreateBillVoucherDetail",
                schema: "ACCOUNT",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    createBillVoucherMasterId = table.Column<int>(nullable: true),
                    stockDetailsId = table.Column<int>(nullable: true),
                    voucherDetailId = table.Column<int>(nullable: true),
                    qty = table.Column<decimal>(nullable: true),
                    rate = table.Column<decimal>(nullable: true),
                    amount = table.Column<decimal>(nullable: true),
                    vatAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    status = table.Column<int>(nullable: true),
                    remarks = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CreateBillVoucherDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherDetail_CreateBillVoucherMaster_createBillVoucherMasterId",
                        column: x => x.createBillVoucherMasterId,
                        principalSchema: "ACCOUNT",
                        principalTable: "CreateBillVoucherMaster",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherDetail_StockDetails_stockDetailsId",
                        column: x => x.stockDetailsId,
                        principalSchema: "SCM",
                        principalTable: "StockDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CreateBillVoucherDetail_VoucherDetail_voucherDetailId",
                        column: x => x.voucherDetailId,
                        principalSchema: "ACCOUNT",
                        principalTable: "VoucherDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillCollectionHistory",
                schema: "CRM",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
                    isDelete = table.Column<int>(nullable: true),
                    createdAt = table.Column<DateTime>(nullable: true),
                    updatedAt = table.Column<DateTime>(nullable: true),
                    createdBy = table.Column<string>(maxLength: 250, nullable: true),
                    updatedBy = table.Column<string>(maxLength: 250, nullable: true),
                    billCollectionId = table.Column<int>(nullable: true),
                    chequeNo = table.Column<string>(maxLength: 250, nullable: true),
                    receivedDate = table.Column<DateTime>(nullable: true),
                    bankAmount = table.Column<decimal>(nullable: true),
                    cashAmount = table.Column<decimal>(nullable: true),
                    mobileBankAmount = table.Column<decimal>(nullable: true),
                    totalAmount = table.Column<decimal>(nullable: true),
                    discount = table.Column<decimal>(nullable: true),
                    moneyReceipt = table.Column<string>(nullable: true),
                    challanReceiptVat = table.Column<decimal>(nullable: true),
                    challanReceiptTax = table.Column<decimal>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillCollectionHistory", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillCollectionHistory_BillCollection_billCollectionId",
                        column: x => x.billCollectionId,
                        principalSchema: "CRM",
                        principalTable: "BillCollection",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUsers_companyId",
                table: "AspNetUsers",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUsers_specialBranchUnitId",
                table: "AspNetUsers",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUsers_userTypeId",
                table: "AspNetUsers",
                column: "userTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_belongingItems_itemId",
                table: "belongingItems",
                column: "itemId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReturnPaymentDetails_billReturnPaymentMasterId",
                table: "BillReturnPaymentDetails",
                column: "billReturnPaymentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReturnPaymentDetails_salesReturnInvoiceMasterId",
                table: "BillReturnPaymentDetails",
                column: "salesReturnInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReturnPaymentMasters_companyId",
                table: "BillReturnPaymentMasters",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReturnPaymentMasters_paymentModeId",
                table: "BillReturnPaymentMasters",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReturnPaymentMasters_relSupplierCustomerResourseId",
                table: "BillReturnPaymentMasters",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReturnPaymentMasters_storeId",
                table: "BillReturnPaymentMasters",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_moduleId",
                table: "Comments",
                column: "moduleId");

            migrationBuilder.CreateIndex(
                name: "IX_Companies_bankBranchDetailsId",
                table: "Companies",
                column: "bankBranchDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyAddresses_addressTypeId",
                table: "CompanyAddresses",
                column: "addressTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyAddresses_countryId",
                table: "CompanyAddresses",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyAddresses_districtId",
                table: "CompanyAddresses",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyAddresses_divisionId",
                table: "CompanyAddresses",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyAddresses_thanaId",
                table: "CompanyAddresses",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyGroups_companyId",
                table: "CompanyGroups",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_Districts_divisionId",
                table: "Districts",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_Divisions_countryId",
                table: "Divisions",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentPhotoAttachments_moduleId",
                table: "DocumentPhotoAttachments",
                column: "moduleId");

            migrationBuilder.CreateIndex(
                name: "IX_ERPModuleAssigns_companyId",
                table: "ERPModuleAssigns",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_hallRentalApplicationInfos_hallInfoId",
                table: "hallRentalApplicationInfos",
                column: "hallInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_hallRentalApplicationInfos_hallRentalShiftId",
                table: "hallRentalApplicationInfos",
                column: "hallRentalShiftId");

            migrationBuilder.CreateIndex(
                name: "IX_hallRentalPayments_hallRentalApplicationInfoId",
                table: "hallRentalPayments",
                column: "hallRentalApplicationInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_jDTaskTypes_jdTaskListId",
                table: "jDTaskTypes",
                column: "jdTaskListId");

            migrationBuilder.CreateIndex(
                name: "IX_jDTaskTypes_jdTypeId",
                table: "jDTaskTypes",
                column: "jdTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_jDTypes_departmentId",
                table: "jDTypes",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_jDTypes_designationId",
                table: "jDTypes",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_jDTypes_divisionId",
                table: "jDTypes",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_loanPolicyDetails_designationId",
                table: "loanPolicyDetails",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_loanPolicyDetails_loanPolicyId",
                table: "loanPolicyDetails",
                column: "loanPolicyId");

            migrationBuilder.CreateIndex(
                name: "IX_loanPolicyNews_designationId",
                table: "loanPolicyNews",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_loanPolicyNews_employeeInfoId",
                table: "loanPolicyNews",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ModuleAccessPages_applicationRoleId",
                table: "ModuleAccessPages",
                column: "applicationRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_ModuleAccessPages_eRPModuleId",
                table: "ModuleAccessPages",
                column: "eRPModuleId");

            migrationBuilder.CreateIndex(
                name: "IX_Navbars_moduleId",
                table: "Navbars",
                column: "moduleId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_receiverId",
                table: "Notifications",
                column: "receiverId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_senderId",
                table: "Notifications",
                column: "senderId");

            migrationBuilder.CreateIndex(
                name: "IX_Patients_crmdepartmentsId",
                table: "Patients",
                column: "crmdepartmentsId");

            migrationBuilder.CreateIndex(
                name: "IX_Patients_crmdesignationsId",
                table: "Patients",
                column: "crmdesignationsId");

            migrationBuilder.CreateIndex(
                name: "IX_Patients_departmentsId",
                table: "Patients",
                column: "departmentsId");

            migrationBuilder.CreateIndex(
                name: "IX_Patients_designationsId",
                table: "Patients",
                column: "designationsId");

            migrationBuilder.CreateIndex(
                name: "IX_Patients_professionTypeId",
                table: "Patients",
                column: "professionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PostOffices_districtId",
                table: "PostOffices",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_RcrtEmpMemberships_candidateId",
                table: "RcrtEmpMemberships",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RcrtEmpMemberships_membershipId",
                table: "RcrtEmpMemberships",
                column: "membershipId");

            migrationBuilder.CreateIndex(
                name: "IX_RcrtReferences_candidateId",
                table: "RcrtReferences",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_salaryPostingLogs_hrBranchId",
                table: "salaryPostingLogs",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_salaryPostingLogs_officeId",
                table: "salaryPostingLogs",
                column: "officeId");

            migrationBuilder.CreateIndex(
                name: "IX_salaryPostingLogs_periodId",
                table: "salaryPostingLogs",
                column: "periodId");

            migrationBuilder.CreateIndex(
                name: "IX_salaryPostingLogs_zoneId",
                table: "salaryPostingLogs",
                column: "zoneId");

            migrationBuilder.CreateIndex(
                name: "IX_SendEmailLogStatus_employeeId",
                table: "SendEmailLogStatus",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Teams_areaId",
                table: "Teams",
                column: "areaId");

            migrationBuilder.CreateIndex(
                name: "IX_Teams_aspnetuserId",
                table: "Teams",
                column: "aspnetuserId");

            migrationBuilder.CreateIndex(
                name: "IX_Teams_moduleId",
                table: "Teams",
                column: "moduleId");

            migrationBuilder.CreateIndex(
                name: "IX_Teams_teamId",
                table: "Teams",
                column: "teamId");

            migrationBuilder.CreateIndex(
                name: "IX_Thanas_districtId",
                table: "Thanas",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAccessPages_applicationRoleId",
                table: "UserAccessPages",
                column: "applicationRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_UserAccessPages_navbarId",
                table: "UserAccessPages",
                column: "navbarId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTypes_groupId",
                table: "UserTypes",
                column: "groupId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountGroup_natureId",
                schema: "ACCOUNT",
                table: "AccountGroup",
                column: "natureId");

            migrationBuilder.CreateIndex(
                name: "IX_AccountGroup_parentGroupId",
                schema: "ACCOUNT",
                table: "AccountGroup",
                column: "parentGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_AutoVoucherDetail_autoVoucherMasterId",
                schema: "ACCOUNT",
                table: "AutoVoucherDetail",
                column: "autoVoucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_AutoVoucherDetail_ledgerRelationId",
                schema: "ACCOUNT",
                table: "AutoVoucherDetail",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_AutoVoucherDetail_transectionModeId",
                schema: "ACCOUNT",
                table: "AutoVoucherDetail",
                column: "transectionModeId");

            migrationBuilder.CreateIndex(
                name: "IX_AutoVoucherMaster_autoVoucherNameId",
                schema: "ACCOUNT",
                table: "AutoVoucherMaster",
                column: "autoVoucherNameId");

            migrationBuilder.CreateIndex(
                name: "IX_AutoVoucherMaster_projectId",
                schema: "ACCOUNT",
                table: "AutoVoucherMaster",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_AutoVoucherMaster_voucherTypeId",
                schema: "ACCOUNT",
                table: "AutoVoucherMaster",
                column: "voucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BalanceSheetDetails_ledgerId",
                schema: "ACCOUNT",
                table: "BalanceSheetDetails",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_BalanceSheetDetails_noteMasterId",
                schema: "ACCOUNT",
                table: "BalanceSheetDetails",
                column: "noteMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BalanceSheetMaster_accountGroupId",
                schema: "ACCOUNT",
                table: "BalanceSheetMaster",
                column: "accountGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_BalanceSheetProcess_balanceSheetDetailsId",
                schema: "ACCOUNT",
                table: "BalanceSheetProcess",
                column: "balanceSheetDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_BankChargeMaster_bankBranchDetailsId",
                schema: "ACCOUNT",
                table: "BankChargeMaster",
                column: "bankBranchDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_BankChargeMaster_ledgerRelationId",
                schema: "ACCOUNT",
                table: "BankChargeMaster",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconcileDetail_bankReconcileMasterId",
                schema: "ACCOUNT",
                table: "BankReconcileDetail",
                column: "bankReconcileMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconcileDetail_specialBranchUnitId",
                schema: "ACCOUNT",
                table: "BankReconcileDetail",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconcileDetail_voucherDetailId",
                schema: "ACCOUNT",
                table: "BankReconcileDetail",
                column: "voucherDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconcileDetail_voucherMasterId",
                schema: "ACCOUNT",
                table: "BankReconcileDetail",
                column: "voucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconciliationMaster_fiscalYearId",
                schema: "ACCOUNT",
                table: "BankReconciliationMaster",
                column: "fiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconciliationMaster_fundSourceId",
                schema: "ACCOUNT",
                table: "BankReconciliationMaster",
                column: "fundSourceId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconciliationMaster_ledgerId",
                schema: "ACCOUNT",
                table: "BankReconciliationMaster",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconciliationMaster_ledgerRelationId",
                schema: "ACCOUNT",
                table: "BankReconciliationMaster",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_BankReconciliationMaster_taxYearId",
                schema: "ACCOUNT",
                table: "BankReconciliationMaster",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCentreAllocation_costCentreId",
                schema: "ACCOUNT",
                table: "CostCentreAllocation",
                column: "costCentreId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCentreAllocation_voucherDetailId",
                schema: "ACCOUNT",
                table: "CostCentreAllocation",
                column: "voucherDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherAttachment_createBillVoucherMasterId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherAttachment",
                column: "createBillVoucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherDetail_createBillVoucherMasterId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherDetail",
                column: "createBillVoucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherDetail_stockDetailsId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherDetail",
                column: "stockDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherDetail_voucherDetailId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherDetail",
                column: "voucherDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherMaster_ledgerRelationId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherMaster",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherMaster_stockMasterId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherMaster",
                column: "stockMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherMaster_subledgerRelationId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherMaster",
                column: "subledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_CreateBillVoucherMaster_voucherMasterId",
                schema: "ACCOUNT",
                table: "CreateBillVoucherMaster",
                column: "voucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyBillReceive_ItemId",
                schema: "ACCOUNT",
                table: "DailyBillReceive",
                column: "ItemId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyBillReceive_NonDepartmentId",
                schema: "ACCOUNT",
                table: "DailyBillReceive",
                column: "NonDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyBillReceive_ResposneemployeeInfoId",
                schema: "ACCOUNT",
                table: "DailyBillReceive",
                column: "ResposneemployeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyBillReceive_employeeInfoId",
                schema: "ACCOUNT",
                table: "DailyBillReceive",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyBillReceive_supplierId",
                schema: "ACCOUNT",
                table: "DailyBillReceive",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyBillReceive_voucherMasterId",
                schema: "ACCOUNT",
                table: "DailyBillReceive",
                column: "voucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_DeleteVoucherMaster_voucherTypeId",
                schema: "ACCOUNT",
                table: "DeleteVoucherMaster",
                column: "voucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_FDREncashment_fDRInvestmentDetailId",
                schema: "ACCOUNT",
                table: "FDREncashment",
                column: "fDRInvestmentDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_FDREncashment_interestBankId",
                schema: "ACCOUNT",
                table: "FDREncashment",
                column: "interestBankId");

            migrationBuilder.CreateIndex(
                name: "IX_FDREncashment_principleBankId",
                schema: "ACCOUNT",
                table: "FDREncashment",
                column: "principleBankId");

            migrationBuilder.CreateIndex(
                name: "IX_FDRInvesment_bankId",
                schema: "ACCOUNT",
                table: "FDRInvesment",
                column: "bankId");

            migrationBuilder.CreateIndex(
                name: "IX_FDRInvestmentDetail_LinkledgerRelationId",
                schema: "ACCOUNT",
                table: "FDRInvestmentDetail",
                column: "LinkledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_FDRInvestmentDetail_ReceiveLinkLedgerId",
                schema: "ACCOUNT",
                table: "FDRInvestmentDetail",
                column: "ReceiveLinkLedgerId");

            migrationBuilder.CreateIndex(
                name: "IX_FDRInvestmentDetail_bankId",
                schema: "ACCOUNT",
                table: "FDRInvestmentDetail",
                column: "bankId");

            migrationBuilder.CreateIndex(
                name: "IX_FDRInvestmentDetail_encashRecLedgerRelId",
                schema: "ACCOUNT",
                table: "FDRInvestmentDetail",
                column: "encashRecLedgerRelId");

            migrationBuilder.CreateIndex(
                name: "IX_FDRInvestmentDetail_fDRInvesmentMasterId",
                schema: "ACCOUNT",
                table: "FDRInvestmentDetail",
                column: "fDRInvesmentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentDetail_iOUAdjustmentMasterId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentDetail",
                column: "iOUAdjustmentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentDetail_itemSpecificationId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentDetail",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentDetail_ledgerRelationId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentDetail",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentDetail_voucherDetailId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentDetail",
                column: "voucherDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentDetaillog_iOUAdjustmentDetailId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentDetaillog",
                column: "iOUAdjustmentDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentDetaillog_iOUDetailId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentDetaillog",
                column: "iOUDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentlog_iOUAdjustmentMasterId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentlog",
                column: "iOUAdjustmentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentlog_iOUVoucherMasterId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentlog",
                column: "iOUVoucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentMaster_advLedgerRelationId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentMaster",
                column: "advLedgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentMaster_voucherMasterId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentMaster",
                column: "voucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentSpend_iOUAdjustmentMasterId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentSpend",
                column: "iOUAdjustmentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUAdjustmentSpend_voucherMasterId",
                schema: "ACCOUNT",
                table: "IOUAdjustmentSpend",
                column: "voucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUVoucherLog_IOUId",
                schema: "ACCOUNT",
                table: "IOUVoucherLog",
                column: "IOUId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUVoucherLog_IOUVoucherMasterId",
                schema: "ACCOUNT",
                table: "IOUVoucherLog",
                column: "IOUVoucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUVoucherMaster_autoVoucherNameId",
                schema: "ACCOUNT",
                table: "IOUVoucherMaster",
                column: "autoVoucherNameId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUVoucherMaster_ledgerRelationId",
                schema: "ACCOUNT",
                table: "IOUVoucherMaster",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUVoucherMaster_subLedgerRelationId",
                schema: "ACCOUNT",
                table: "IOUVoucherMaster",
                column: "subLedgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUVoucherMaster_voucherMasterId",
                schema: "ACCOUNT",
                table: "IOUVoucherMaster",
                column: "voucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Ledger_currencyId",
                schema: "ACCOUNT",
                table: "Ledger",
                column: "currencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Ledger_groupId",
                schema: "ACCOUNT",
                table: "Ledger",
                column: "groupId");

            migrationBuilder.CreateIndex(
                name: "IX_Ledger_specialBranchUnitId",
                schema: "ACCOUNT",
                table: "Ledger",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_LedgerRelation_ledgerId",
                schema: "ACCOUNT",
                table: "LedgerRelation",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_LedgerRelation_subLedgerId",
                schema: "ACCOUNT",
                table: "LedgerRelation",
                column: "subLedgerId");

            migrationBuilder.CreateIndex(
                name: "IX_NoteMaster_balanceSheetMasterId",
                schema: "ACCOUNT",
                table: "NoteMaster",
                column: "balanceSheetMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_NoteMaster_specialBranchUnitId",
                schema: "ACCOUNT",
                table: "NoteMaster",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_OpeningBalance_ledgerRelationId",
                schema: "ACCOUNT",
                table: "OpeningBalance",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_OpeningBalance_transectionModeId",
                schema: "ACCOUNT",
                table: "OpeningBalance",
                column: "transectionModeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProfitAndLossAccountDetails_ledgerId",
                schema: "ACCOUNT",
                table: "ProfitAndLossAccountDetails",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_ProfitAndLossAccountDetails_profitAndLossAccountMasterId",
                schema: "ACCOUNT",
                table: "ProfitAndLossAccountDetails",
                column: "profitAndLossAccountMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProfitAndLossAccountMaster_accountGroupId",
                schema: "ACCOUNT",
                table: "ProfitAndLossAccountMaster",
                column: "accountGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ProfitAndLossAccountProcess_profitAndLossAccountDetailsId",
                schema: "ACCOUNT",
                table: "ProfitAndLossAccountProcess",
                column: "profitAndLossAccountDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_Signature_employeeInfoId",
                schema: "ACCOUNT",
                table: "Signature",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Signature_signatureTypeId",
                schema: "ACCOUNT",
                table: "Signature",
                column: "signatureTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SubLedger_ledgerId",
                schema: "ACCOUNT",
                table: "SubLedger",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_fiscalYearId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "fiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_fundSourceId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "fundSourceId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_ledgerRelationId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_projectId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_specialBranchUnitId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_taxYearId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_transectionModeId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "transectionModeId");

            migrationBuilder.CreateIndex(
                name: "IX_UploadedVoucherData_voucherTypeId",
                schema: "ACCOUNT",
                table: "UploadedVoucherData",
                column: "voucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VatTaxRate_rateTypeId",
                schema: "ACCOUNT",
                table: "VatTaxRate",
                column: "rateTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VatTaxRate_taxYearId",
                schema: "ACCOUNT",
                table: "VatTaxRate",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherDetail_ledgerRelationId",
                schema: "ACCOUNT",
                table: "VoucherDetail",
                column: "ledgerRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherDetail_specialBranchUnitId",
                schema: "ACCOUNT",
                table: "VoucherDetail",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherDetail_transectionModeId",
                schema: "ACCOUNT",
                table: "VoucherDetail",
                column: "transectionModeId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherDetail_voucherId",
                schema: "ACCOUNT",
                table: "VoucherDetail",
                column: "voucherId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherMaster_autoVoucherNameId",
                schema: "ACCOUNT",
                table: "VoucherMaster",
                column: "autoVoucherNameId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherMaster_fiscalYearId",
                schema: "ACCOUNT",
                table: "VoucherMaster",
                column: "fiscalYearId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherMaster_fundSourceId",
                schema: "ACCOUNT",
                table: "VoucherMaster",
                column: "fundSourceId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherMaster_projectId",
                schema: "ACCOUNT",
                table: "VoucherMaster",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherMaster_taxYearId",
                schema: "ACCOUNT",
                table: "VoucherMaster",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherMaster_voucherTypeId",
                schema: "ACCOUNT",
                table: "VoucherMaster",
                column: "voucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherSetting_bankAccountLedgerId",
                schema: "ACCOUNT",
                table: "VoucherSetting",
                column: "bankAccountLedgerId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherSetting_cashAccountLedgerId",
                schema: "ACCOUNT",
                table: "VoucherSetting",
                column: "cashAccountLedgerId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherSetting_companyId",
                schema: "ACCOUNT",
                table: "VoucherSetting",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_VoucherSetting_paymentModeId",
                schema: "ACCOUNT",
                table: "VoucherSetting",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRComments_assessmentId",
                schema: "ACR",
                table: "ACRComments",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrEmployeeInfo_assessmentId",
                schema: "ACR",
                table: "AcrEmployeeInfo",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ACROtherTables_assessmentId",
                schema: "ACR",
                table: "ACROtherTables",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRPrevJobHistory_assessmentId",
                schema: "ACR",
                table: "ACRPrevJobHistory",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRPrevJobHistory_employeeId",
                schema: "ACR",
                table: "ACRPrevJobHistory",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrProfessionalQualification_assessmentId",
                schema: "ACR",
                table: "AcrProfessionalQualification",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrPromotion_assessmentId",
                schema: "ACR",
                table: "AcrPromotion",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRRecommendations_assessmentId",
                schema: "ACR",
                table: "ACRRecommendations",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRSignatories_assessmentId",
                schema: "ACR",
                table: "ACRSignatories",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrTrainingInfo_assessmentId",
                schema: "ACR",
                table: "AcrTrainingInfo",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignmentTraining_assessmentId",
                schema: "ACR",
                table: "AssignmentTraining",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignmentTraining_branchId",
                schema: "ACR",
                table: "AssignmentTraining",
                column: "branchId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignmentTraining_departmentId",
                schema: "ACR",
                table: "AssignmentTraining",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignmentTraining_designationId",
                schema: "ACR",
                table: "AssignmentTraining",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignmentTraining_divisionId",
                schema: "ACR",
                table: "AssignmentTraining",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignmentTraining_jobResponsibilityId",
                schema: "ACR",
                table: "AssignmentTraining",
                column: "jobResponsibilityId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignmentTraining_sbuId",
                schema: "ACR",
                table: "AssignmentTraining",
                column: "sbuId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEducation_assessmentId",
                schema: "ACR",
                table: "EmployeeEducation",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveDetail_assessmentId",
                schema: "ACR",
                table: "LeaveDetail",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveDetail_leaveTypeId",
                schema: "ACR",
                table: "LeaveDetail",
                column: "leaveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_QuantitativeEvaluationComments_assessmentId",
                schema: "ACR",
                table: "QuantitativeEvaluationComments",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_QuantitativeEvaluationComments_evaluationCommentsHeadId",
                schema: "ACR",
                table: "QuantitativeEvaluationComments",
                column: "evaluationCommentsHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_BudgetBranchAddress_addressTypeId",
                schema: "Budget",
                table: "BudgetBranchAddress",
                column: "addressTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BudgetBranchAddress_budgetBranchId",
                schema: "Budget",
                table: "BudgetBranchAddress",
                column: "budgetBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_BudgetBranchAddress_countryId",
                schema: "Budget",
                table: "BudgetBranchAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_BudgetBranchAddress_districtId",
                schema: "Budget",
                table: "BudgetBranchAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_BudgetBranchAddress_divisionId",
                schema: "Budget",
                table: "BudgetBranchAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_BudgetBranchAddress_thanaId",
                schema: "Budget",
                table: "BudgetBranchAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_Balance_employeeId",
                schema: "Club",
                table: "Balance",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Balance_paymentHeadId",
                schema: "Club",
                table: "Balance",
                column: "paymentHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_Collection_employeeId",
                schema: "Club",
                table: "Collection",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Collection_paymentHeadId",
                schema: "Club",
                table: "Collection",
                column: "paymentHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_Collection_trMasterId",
                schema: "Club",
                table: "Collection",
                column: "trMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_EventInformation_eventCategoryId",
                schema: "Club",
                table: "EventInformation",
                column: "eventCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_EventInformation_paymentHeadId",
                schema: "Club",
                table: "EventInformation",
                column: "paymentHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_EventParticipantType_eventInformationId",
                schema: "Club",
                table: "EventParticipantType",
                column: "eventInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_EventParticipantType_participantTypeId",
                schema: "Club",
                table: "EventParticipantType",
                column: "participantTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_EventPerticipantHead_eventInformationId",
                schema: "Club",
                table: "EventPerticipantHead",
                column: "eventInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_EventPerticipantHead_participantHeadId",
                schema: "Club",
                table: "EventPerticipantHead",
                column: "participantHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_EventRegister_employeeId",
                schema: "Club",
                table: "EventRegister",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EventRegister_eventInformationId",
                schema: "Club",
                table: "EventRegister",
                column: "eventInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_EventRegister_eventPerticipantHeadId",
                schema: "Club",
                table: "EventRegister",
                column: "eventPerticipantHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_GalleryContent_galleryTitleId",
                schema: "Club",
                table: "GalleryContent",
                column: "galleryTitleId");

            migrationBuilder.CreateIndex(
                name: "IX_Invoice_employeeId",
                schema: "Club",
                table: "Invoice",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Invoice_paymentHeadId",
                schema: "Club",
                table: "Invoice",
                column: "paymentHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberAddress_countryId",
                schema: "Club",
                table: "MemberAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberAddress_districtId",
                schema: "Club",
                table: "MemberAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberAddress_divisionId",
                schema: "Club",
                table: "MemberAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberAddress_employeeId",
                schema: "Club",
                table: "MemberAddress",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberAddress_thanaId",
                schema: "Club",
                table: "MemberAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberAward_employeeId",
                schema: "Club",
                table: "MemberAward",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberChildren_employeeId",
                schema: "Club",
                table: "MemberChildren",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberComment_memberId",
                schema: "Club",
                table: "MemberComment",
                column: "memberId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberComment_topicId",
                schema: "Club",
                table: "MemberComment",
                column: "topicId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberDrivingLicense_employeeId",
                schema: "Club",
                table: "MemberDrivingLicense",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberEducationalQualification_degreeId",
                schema: "Club",
                table: "MemberEducationalQualification",
                column: "degreeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberEducationalQualification_employeeId",
                schema: "Club",
                table: "MemberEducationalQualification",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberEducationalQualification_organizationId",
                schema: "Club",
                table: "MemberEducationalQualification",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberEducationalQualification_reldegreesubjectId",
                schema: "Club",
                table: "MemberEducationalQualification",
                column: "reldegreesubjectId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberEducationalQualification_resultId",
                schema: "Club",
                table: "MemberEducationalQualification",
                column: "resultId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberInfo_memberTypeId",
                schema: "Club",
                table: "MemberInfo",
                column: "memberTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberInfo_religionId",
                schema: "Club",
                table: "MemberInfo",
                column: "religionId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberLanguage_employeeId",
                schema: "Club",
                table: "MemberLanguage",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberLanguage_languageId",
                schema: "Club",
                table: "MemberLanguage",
                column: "languageId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberOtherInfo_employeeId",
                schema: "Club",
                table: "MemberOtherInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberPassportDetails_employeeId",
                schema: "Club",
                table: "MemberPassportDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberPhotograph_employeeId",
                schema: "Club",
                table: "MemberPhotograph",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberPublication_employeeId",
                schema: "Club",
                table: "MemberPublication",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberSpouse_employeeId",
                schema: "Club",
                table: "MemberSpouse",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberTraningLog_countryId",
                schema: "Club",
                table: "MemberTraningLog",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberTraningLog_employeeId",
                schema: "Club",
                table: "MemberTraningLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberTraningLog_trainingCategoryId",
                schema: "Club",
                table: "MemberTraningLog",
                column: "trainingCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberTraningLog_trainingInstituteId",
                schema: "Club",
                table: "MemberTraningLog",
                column: "trainingInstituteId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberTransferLog_employeeId",
                schema: "Club",
                table: "MemberTransferLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberTransferLog_salaryGradeId",
                schema: "Club",
                table: "MemberTransferLog",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_OtherMembership_employeeId",
                schema: "Club",
                table: "OtherMembership",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_OtherMembership_membershipId",
                schema: "Club",
                table: "OtherMembership",
                column: "membershipId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentLog_employeeId",
                schema: "Club",
                table: "PaymentLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnMemberGroup_employeeId",
                schema: "Club",
                table: "RlnMemberGroup",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnMemberGroup_memberGroupId",
                schema: "Club",
                table: "RlnMemberGroup",
                column: "memberGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnNoticeAuthor_noticeAuthorId",
                schema: "Club",
                table: "RlnNoticeAuthor",
                column: "noticeAuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnNoticeAuthor_noticeInfoId",
                schema: "Club",
                table: "RlnNoticeAuthor",
                column: "noticeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Topic_memberId",
                schema: "Club",
                table: "Topic",
                column: "memberId");

            migrationBuilder.CreateIndex(
                name: "IX_TrMaster_employeeId",
                schema: "Club",
                table: "TrMaster",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityDetails_activityMasterId",
                schema: "CRM",
                table: "ActivityDetails",
                column: "activityMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityMaster_activityCategoryId",
                schema: "CRM",
                table: "ActivityMaster",
                column: "activityCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityMaster_activityMasterId",
                schema: "CRM",
                table: "ActivityMaster",
                column: "activityMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityMaster_activitySessionId",
                schema: "CRM",
                table: "ActivityMaster",
                column: "activitySessionId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityMaster_activityStatusId",
                schema: "CRM",
                table: "ActivityMaster",
                column: "activityStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityMaster_activityTypeId",
                schema: "CRM",
                table: "ActivityMaster",
                column: "activityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityMaster_leadsId",
                schema: "CRM",
                table: "ActivityMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityMaster_taskSectionId",
                schema: "CRM",
                table: "ActivityMaster",
                column: "taskSectionId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityStatusProgress_activityMasterId",
                schema: "CRM",
                table: "ActivityStatusProgress",
                column: "activityMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityStatusProgress_activityStatusId",
                schema: "CRM",
                table: "ActivityStatusProgress",
                column: "activityStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityTeam_activityMasterId",
                schema: "CRM",
                table: "ActivityTeam",
                column: "activityMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityTeam_teamId",
                schema: "CRM",
                table: "ActivityTeam",
                column: "teamId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_addressCategoryId",
                schema: "CRM",
                table: "Address",
                column: "addressCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_addressTypeId",
                schema: "CRM",
                table: "Address",
                column: "addressTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_companyId",
                schema: "CRM",
                table: "Address",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_countryId",
                schema: "CRM",
                table: "Address",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_districtId",
                schema: "CRM",
                table: "Address",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_divisionId",
                schema: "CRM",
                table: "Address",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_organizationId",
                schema: "CRM",
                table: "Address",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_postOfficeId",
                schema: "CRM",
                table: "Address",
                column: "postOfficeId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_resourceId",
                schema: "CRM",
                table: "Address",
                column: "resourceId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_thanaId",
                schema: "CRM",
                table: "Address",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_Agreement_agreementCategoryId",
                schema: "CRM",
                table: "Agreement",
                column: "agreementCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Agreement_agreementStatusId",
                schema: "CRM",
                table: "Agreement",
                column: "agreementStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Agreement_agreementTypeId",
                schema: "CRM",
                table: "Agreement",
                column: "agreementTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Agreement_contactSignatoryId",
                schema: "CRM",
                table: "Agreement",
                column: "contactSignatoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Agreement_contactWitnessId",
                schema: "CRM",
                table: "Agreement",
                column: "contactWitnessId");

            migrationBuilder.CreateIndex(
                name: "IX_Agreement_leadsId",
                schema: "CRM",
                table: "Agreement",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_Agreement_ratingCategoryId",
                schema: "CRM",
                table: "Agreement",
                column: "ratingCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementDetails_agreementId",
                schema: "CRM",
                table: "AgreementDetails",
                column: "agreementId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementDetails_ratingYearId",
                schema: "CRM",
                table: "AgreementDetails",
                column: "ratingYearId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementDetails_taxCategoryId",
                schema: "CRM",
                table: "AgreementDetails",
                column: "taxCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementDetails_vatCategoryId",
                schema: "CRM",
                table: "AgreementDetails",
                column: "vatCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementDetailsHistory_agreementId",
                schema: "CRM",
                table: "AgreementDetailsHistory",
                column: "agreementId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovedforCro_agreementDetailsId",
                schema: "CRM",
                table: "ApprovedforCro",
                column: "agreementDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_Area_areaId",
                schema: "CRM",
                table: "Area",
                column: "areaId");

            migrationBuilder.CreateIndex(
                name: "IX_Area_salesLevelId",
                schema: "CRM",
                table: "Area",
                column: "salesLevelId");

            migrationBuilder.CreateIndex(
                name: "IX_Bank_fiTypeId",
                schema: "CRM",
                table: "Bank",
                column: "fiTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BankBranchDetails_bankBranchId",
                schema: "CRM",
                table: "BankBranchDetails",
                column: "bankBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_BankBranchDetails_bankId",
                schema: "CRM",
                table: "BankBranchDetails",
                column: "bankId");

            migrationBuilder.CreateIndex(
                name: "IX_BankBranchDetails_thanaId",
                schema: "CRM",
                table: "BankBranchDetails",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_BillCollection_bankBranchDetailsId",
                schema: "CRM",
                table: "BillCollection",
                column: "bankBranchDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_BillCollection_billGenerateId",
                schema: "CRM",
                table: "BillCollection",
                column: "billGenerateId");

            migrationBuilder.CreateIndex(
                name: "IX_BillCollection_paymentModeId",
                schema: "CRM",
                table: "BillCollection",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_BillCollectionHistory_billCollectionId",
                schema: "CRM",
                table: "BillCollectionHistory",
                column: "billCollectionId");

            migrationBuilder.CreateIndex(
                name: "IX_BillGenerate_agreementDetailssId",
                schema: "CRM",
                table: "BillGenerate",
                column: "agreementDetailssId");

            migrationBuilder.CreateIndex(
                name: "IX_BillGenerate_agreementtId",
                schema: "CRM",
                table: "BillGenerate",
                column: "agreementtId");

            migrationBuilder.CreateIndex(
                name: "IX_BillGenerate_approvedforCroId",
                schema: "CRM",
                table: "BillGenerate",
                column: "approvedforCroId");

            migrationBuilder.CreateIndex(
                name: "IX_BillGenerate_bankBranchDetailsId",
                schema: "CRM",
                table: "BillGenerate",
                column: "bankBranchDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_BillGenerate_leadssId",
                schema: "CRM",
                table: "BillGenerate",
                column: "leadssId");

            migrationBuilder.CreateIndex(
                name: "IX_BillGenerate_salesInvoiceMasterId",
                schema: "CRM",
                table: "BillGenerate",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BillGenerateHistory_billGenerateId",
                schema: "CRM",
                table: "BillGenerateHistory",
                column: "billGenerateId");

            migrationBuilder.CreateIndex(
                name: "IX_Clients_leadsId",
                schema: "CRM",
                table: "Clients",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityDetails_coldActivityMastersId",
                schema: "CRM",
                table: "ColdActivityDetails",
                column: "coldActivityMastersId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityDiscussion_coldActivityMastersId",
                schema: "CRM",
                table: "ColdActivityDiscussion",
                column: "coldActivityMastersId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityMasters_activityCategoryId",
                schema: "CRM",
                table: "ColdActivityMasters",
                column: "activityCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityMasters_activitySessionId",
                schema: "CRM",
                table: "ColdActivityMasters",
                column: "activitySessionId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityMasters_activityStatusId",
                schema: "CRM",
                table: "ColdActivityMasters",
                column: "activityStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityMasters_activityTypeId",
                schema: "CRM",
                table: "ColdActivityMasters",
                column: "activityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityMasters_coldActivityMastersId",
                schema: "CRM",
                table: "ColdActivityMasters",
                column: "coldActivityMastersId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityTeams_coldActivityMastersId",
                schema: "CRM",
                table: "ColdActivityTeams",
                column: "coldActivityMastersId");

            migrationBuilder.CreateIndex(
                name: "IX_ColdActivityTeams_teamId",
                schema: "CRM",
                table: "ColdActivityTeams",
                column: "teamId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyBudgets_companyId",
                schema: "CRM",
                table: "CompanyBudgets",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyBudgets_yearId",
                schema: "CRM",
                table: "CompanyBudgets",
                column: "yearId");

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_leadsId",
                schema: "CRM",
                table: "Contacts",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_resourceId",
                schema: "CRM",
                table: "Contacts",
                column: "resourceId");

            migrationBuilder.CreateIndex(
                name: "IX_CRMNoteMaster_leadsId",
                schema: "CRM",
                table: "CRMNoteMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_CRMTeamMember_cRMTeamMasterId",
                schema: "CRM",
                table: "CRMTeamMember",
                column: "cRMTeamMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Document_contactsId",
                schema: "CRM",
                table: "Document",
                column: "contactsId");

            migrationBuilder.CreateIndex(
                name: "IX_Leads_companyGroupId",
                schema: "CRM",
                table: "Leads",
                column: "companyGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Leads_fITypeId",
                schema: "CRM",
                table: "Leads",
                column: "fITypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Leads_leadProgressStatusId",
                schema: "CRM",
                table: "Leads",
                column: "leadProgressStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Leads_ownerShipTypeId",
                schema: "CRM",
                table: "Leads",
                column: "ownerShipTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Leads_sectorId",
                schema: "CRM",
                table: "Leads",
                column: "sectorId");

            migrationBuilder.CreateIndex(
                name: "IX_Leads_sourceId",
                schema: "CRM",
                table: "Leads",
                column: "sourceId");

            migrationBuilder.CreateIndex(
                name: "IX_LeadsBankInfo_bankBranchDetailsId",
                schema: "CRM",
                table: "LeadsBankInfo",
                column: "bankBranchDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_LeadsBankInfo_crmdepartmentsId",
                schema: "CRM",
                table: "LeadsBankInfo",
                column: "crmdepartmentsId");

            migrationBuilder.CreateIndex(
                name: "IX_LeadsBankInfo_crmdesignationsId",
                schema: "CRM",
                table: "LeadsBankInfo",
                column: "crmdesignationsId");

            migrationBuilder.CreateIndex(
                name: "IX_LeadsBankInfo_leadsId",
                schema: "CRM",
                table: "LeadsBankInfo",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_LeadsHistory_leadsId",
                schema: "CRM",
                table: "LeadsHistory",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberBudgets_teamBudgetsId",
                schema: "CRM",
                table: "MemberBudgets",
                column: "teamBudgetsId");

            migrationBuilder.CreateIndex(
                name: "IX_MemberBudgets_teamId",
                schema: "CRM",
                table: "MemberBudgets",
                column: "teamId");

            migrationBuilder.CreateIndex(
                name: "IX_OwnerChangeHistory_leadsId",
                schema: "CRM",
                table: "OwnerChangeHistory",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalDetail_proposalMasterId",
                schema: "CRM",
                table: "ProposalDetail",
                column: "proposalMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalDetail_proposalParticularsId",
                schema: "CRM",
                table: "ProposalDetail",
                column: "proposalParticularsId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalMaster_leadsId",
                schema: "CRM",
                table: "ProposalMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalMaster_proposalStatusId",
                schema: "CRM",
                table: "ProposalMaster",
                column: "proposalStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalMaster_proposalTypeId",
                schema: "CRM",
                table: "ProposalMaster",
                column: "proposalTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_RatingReview_agreementDetailsId",
                schema: "CRM",
                table: "RatingReview",
                column: "agreementDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_RelProductAgreement_agreementId",
                schema: "CRM",
                table: "RelProductAgreement",
                column: "agreementId");

            migrationBuilder.CreateIndex(
                name: "IX_RelProductAgreement_productId",
                schema: "CRM",
                table: "RelProductAgreement",
                column: "productId");

            migrationBuilder.CreateIndex(
                name: "IX_RelProductProposal_productId",
                schema: "CRM",
                table: "RelProductProposal",
                column: "productId");

            migrationBuilder.CreateIndex(
                name: "IX_RelProductProposal_proposalMasterId",
                schema: "CRM",
                table: "RelProductProposal",
                column: "proposalMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Resource_crmdepartmentsId",
                schema: "CRM",
                table: "Resource",
                column: "crmdepartmentsId");

            migrationBuilder.CreateIndex(
                name: "IX_Resource_crmdesignationsId",
                schema: "CRM",
                table: "Resource",
                column: "crmdesignationsId");

            migrationBuilder.CreateIndex(
                name: "IX_Resource_departmentsId",
                schema: "CRM",
                table: "Resource",
                column: "departmentsId");

            migrationBuilder.CreateIndex(
                name: "IX_Resource_designationsId",
                schema: "CRM",
                table: "Resource",
                column: "designationsId");

            migrationBuilder.CreateIndex(
                name: "IX_Resource_professionTypeId",
                schema: "CRM",
                table: "Resource",
                column: "professionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Sector_sectorId",
                schema: "CRM",
                table: "Sector",
                column: "sectorId");

            migrationBuilder.CreateIndex(
                name: "IX_TeamBudgets_companyBudgetsId",
                schema: "CRM",
                table: "TeamBudgets",
                column: "companyBudgetsId");

            migrationBuilder.CreateIndex(
                name: "IX_TeamBudgets_teamId",
                schema: "CRM",
                table: "TeamBudgets",
                column: "teamId");

            migrationBuilder.CreateIndex(
                name: "IX_Archive_archiveShelfId",
                schema: "CRO",
                table: "Archive",
                column: "archiveShelfId");

            migrationBuilder.CreateIndex(
                name: "IX_Archive_operationMasterId",
                schema: "CRO",
                table: "Archive",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ArchiveShelf_archiveFloorId",
                schema: "CRO",
                table: "ArchiveShelf",
                column: "archiveFloorId");

            migrationBuilder.CreateIndex(
                name: "IX_AttachmentStatus_attachmentTypeId",
                schema: "CRO",
                table: "AttachmentStatus",
                column: "attachmentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AttachmentStatus_operationMasterId",
                schema: "CRO",
                table: "AttachmentStatus",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IRCMeetingAttendance_employeeInfoId",
                schema: "CRO",
                table: "IRCMeetingAttendance",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_IRCMeetingAttendance_operationMasterId",
                schema: "CRO",
                table: "IRCMeetingAttendance",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IRCMemberComments_employeeInfoId",
                schema: "CRO",
                table: "IRCMemberComments",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_IRCMemberComments_operationMasterId",
                schema: "CRO",
                table: "IRCMemberComments",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IRCRating_operationMasterId",
                schema: "CRO",
                table: "IRCRating",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IRCSignatory_employeeInfoId",
                schema: "CRO",
                table: "IRCSignatory",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationMaster_agreementId",
                schema: "CRO",
                table: "OperationMaster",
                column: "agreementId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationMaster_approvedforCroId",
                schema: "CRO",
                table: "OperationMaster",
                column: "approvedforCroId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationMaster_jobStatusId",
                schema: "CRO",
                table: "OperationMaster",
                column: "jobStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposedRating_operationMasterId",
                schema: "CRO",
                table: "ProposedRating",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RatingValue_ratingCategoryId",
                schema: "CRO",
                table: "RatingValue",
                column: "ratingCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RatingValue_ratingTypeId",
                schema: "CRO",
                table: "RatingValue",
                column: "ratingTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ReceiveDocument_documentChartId",
                schema: "CRO",
                table: "ReceiveDocument",
                column: "documentChartId");

            migrationBuilder.CreateIndex(
                name: "IX_ReceiveDocument_operationMasterId",
                schema: "CRO",
                table: "ReceiveDocument",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_jobStatusId",
                schema: "CRO",
                table: "StatusLog",
                column: "jobStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_operationMasterId",
                schema: "CRO",
                table: "StatusLog",
                column: "operationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_DisItemPriceFixing_itemSpecificationId",
                schema: "Distribution",
                table: "DisItemPriceFixing",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_DisItemPriceFixingDetails_disItemPriceFixingId",
                schema: "Distribution",
                table: "DisItemPriceFixingDetails",
                column: "disItemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_DisItemPriceFixingDetails_distributorTypeId",
                schema: "Distribution",
                table: "DisItemPriceFixingDetails",
                column: "distributorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PackageDetail_itemSpecificationId",
                schema: "Distribution",
                table: "PackageDetail",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_PackageDetail_packageMasterId",
                schema: "Distribution",
                table: "PackageDetail",
                column: "packageMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PackageMaster_distributorTypeId",
                schema: "Distribution",
                table: "PackageMaster",
                column: "distributorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerArea_areaId",
                schema: "Distribution",
                table: "RelCustomerArea",
                column: "areaId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerArea_relSupplierCustomerResourseId",
                schema: "Distribution",
                table: "RelCustomerArea",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerSalesTeamDeployment_areaId",
                schema: "Distribution",
                table: "RelCustomerSalesTeamDeployment",
                column: "areaId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerSalesTeamDeployment_employeeInfoId",
                schema: "Distribution",
                table: "RelCustomerSalesTeamDeployment",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerSalesTeamDeployment_nsmsalesTeamDeploymentId",
                schema: "Distribution",
                table: "RelCustomerSalesTeamDeployment",
                column: "nsmsalesTeamDeploymentId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerSalesTeamDeployment_relSupplierCustomerResourseId",
                schema: "Distribution",
                table: "RelCustomerSalesTeamDeployment",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerSalesTeamDeployment_rsmsalesTeamDeploymentId",
                schema: "Distribution",
                table: "RelCustomerSalesTeamDeployment",
                column: "rsmsalesTeamDeploymentId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerSalesTeamDeployment_salesLevelId",
                schema: "Distribution",
                table: "RelCustomerSalesTeamDeployment",
                column: "salesLevelId");

            migrationBuilder.CreateIndex(
                name: "IX_RelCustomerSalesTeamDeployment_tsmsalesTeamDeploymentId",
                schema: "Distribution",
                table: "RelCustomerSalesTeamDeployment",
                column: "tsmsalesTeamDeploymentId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetail_disItemPriceFixingId",
                schema: "Distribution",
                table: "RequisitionDetail",
                column: "disItemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetail_itemSpecificationId",
                schema: "Distribution",
                table: "RequisitionDetail",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetail_packageDetailId",
                schema: "Distribution",
                table: "RequisitionDetail",
                column: "packageDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetail_requisitionMasterId",
                schema: "Distribution",
                table: "RequisitionDetail",
                column: "requisitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionMaster_relSupplierCustomerResourseId",
                schema: "Distribution",
                table: "RequisitionMaster",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesLevel_salesLevelId",
                schema: "Distribution",
                table: "SalesLevel",
                column: "salesLevelId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTeamDeployment_areaId",
                schema: "Distribution",
                table: "SalesTeamDeployment",
                column: "areaId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTeamDeployment_employeeInfoId",
                schema: "Distribution",
                table: "SalesTeamDeployment",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTeamDeployment_salesLevelId",
                schema: "Distribution",
                table: "SalesTeamDeployment",
                column: "salesLevelId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTeamDeployment_salesTeamDeploymentId",
                schema: "Distribution",
                table: "SalesTeamDeployment",
                column: "salesTeamDeploymentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignDocument_documentMasterId",
                schema: "Doc",
                table: "AssignDocument",
                column: "documentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignDocument_documentPhotoAttachmentId",
                schema: "Doc",
                table: "AssignDocument",
                column: "documentPhotoAttachmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignDocument_employeeInfoId",
                schema: "Doc",
                table: "AssignDocument",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignDocumentMaster_documentMasterId",
                schema: "Doc",
                table: "AssignDocumentMaster",
                column: "documentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_AssignDocumentMaster_employeeInfoId",
                schema: "Doc",
                table: "AssignDocumentMaster",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentDetail_documentMasterId",
                schema: "Doc",
                table: "DocumentDetail",
                column: "documentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentDetail_fieldSettingId",
                schema: "Doc",
                table: "DocumentDetail",
                column: "fieldSettingId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentMaster_documentCategoryId",
                schema: "Doc",
                table: "DocumentMaster",
                column: "documentCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentMaster_employeeInfoId",
                schema: "Doc",
                table: "DocumentMaster",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentMaster_leadsId",
                schema: "Doc",
                table: "DocumentMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentStatusLog_documentMasterId",
                schema: "Doc",
                table: "DocumentStatusLog",
                column: "documentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_FieldSettings_documentCategoryId",
                schema: "Doc",
                table: "FieldSettings",
                column: "documentCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_FieldSettings_fieldTypeId",
                schema: "Doc",
                table: "FieldSettings",
                column: "fieldTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetAssign_assetRegistrationId",
                schema: "FAMS",
                table: "AssetAssign",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetAssign_deliveryLocationId",
                schema: "FAMS",
                table: "AssetAssign",
                column: "deliveryLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetAssign_departmentId",
                schema: "FAMS",
                table: "AssetAssign",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetDepreciation_assetRegistrationId",
                schema: "FAMS",
                table: "AssetDepreciation",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetDepreciation_depriciationPeriodId",
                schema: "FAMS",
                table: "AssetDepreciation",
                column: "depriciationPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetOverhauling_assetRegistrationId",
                schema: "FAMS",
                table: "AssetOverhauling",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetReceives_assetRegistrationId",
                schema: "FAMS",
                table: "AssetReceives",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetRegistration_depriciationRateId",
                schema: "FAMS",
                table: "AssetRegistration",
                column: "depriciationRateId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetRegistration_itemSpecificationId",
                schema: "FAMS",
                table: "AssetRegistration",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetRegistration_purchaseInfoId",
                schema: "FAMS",
                table: "AssetRegistration",
                column: "purchaseInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetRejects_assetRegistrationId",
                schema: "FAMS",
                table: "AssetRejects",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetRetirements_assetRegistrationId",
                schema: "FAMS",
                table: "AssetRetirements",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetRetirements_assetRetirementTypeId",
                schema: "FAMS",
                table: "AssetRetirements",
                column: "assetRetirementTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransfer_assetRegistrationId",
                schema: "FAMS",
                table: "AssetTransfer",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransfer_deliveryLocationId",
                schema: "FAMS",
                table: "AssetTransfer",
                column: "deliveryLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransfer_departmentId",
                schema: "FAMS",
                table: "AssetTransfer",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetWarrenty_assetRegistrationId",
                schema: "FAMS",
                table: "AssetWarrenty",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_DepriciationInfo_assetRegistrationId",
                schema: "FAMS",
                table: "DepriciationInfo",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_DepriciationInfo_depriciationPeriodId",
                schema: "FAMS",
                table: "DepriciationInfo",
                column: "depriciationPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_DepriciationPeriod_YearID",
                schema: "FAMS",
                table: "DepriciationPeriod",
                column: "YearID");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseInfo_procurementSourceId",
                schema: "FAMS",
                table: "PurchaseInfo",
                column: "procurementSourceId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseInfo_purchaseOrderMasterId",
                schema: "FAMS",
                table: "PurchaseInfo",
                column: "purchaseOrderMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseInfo_registrationTypeId",
                schema: "FAMS",
                table: "PurchaseInfo",
                column: "registrationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseInfo_supplierId",
                schema: "FAMS",
                table: "PurchaseInfo",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_FixationIntegration_employeeId",
                schema: "Fixation",
                table: "FixationIntegration",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_FixationIntegration_fixaTypeId",
                schema: "Fixation",
                table: "FixationIntegration",
                column: "fixaTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_FixationIntegration_fixationGradeId",
                schema: "Fixation",
                table: "FixationIntegration",
                column: "fixationGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_FixationIntegration_lastDesignationId",
                schema: "Fixation",
                table: "FixationIntegration",
                column: "lastDesignationId");

            migrationBuilder.CreateIndex(
                name: "IX_IncrementHeld_employeeId",
                schema: "Fixation",
                table: "IncrementHeld",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientHistory_diseaseInfoId",
                schema: "HOSPTL",
                table: "PatientHistory",
                column: "diseaseInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientHistory_leadsId",
                schema: "HOSPTL",
                table: "PatientHistory",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientRepresentative_employeeInfoId",
                schema: "HOSPTL",
                table: "PatientRepresentative",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientRepresentative_leadsId",
                schema: "HOSPTL",
                table: "PatientRepresentative",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientService_itemCategoryId",
                schema: "HOSPTL",
                table: "PatientService",
                column: "itemCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientService_leadsId",
                schema: "HOSPTL",
                table: "PatientService",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientServiceDetail_itemSpecificationId",
                schema: "HOSPTL",
                table: "PatientServiceDetail",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_PatientServiceDetail_patientServiceId",
                schema: "HOSPTL",
                table: "PatientServiceDetail",
                column: "patientServiceId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrEvaluationDetail_acrEvaluationMasterId",
                schema: "HR",
                table: "AcrEvaluationDetail",
                column: "acrEvaluationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrEvaluationName_acrForId",
                schema: "HR",
                table: "AcrEvaluationName",
                column: "acrForId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrEvaluationName_acrTypeId",
                schema: "HR",
                table: "AcrEvaluationName",
                column: "acrTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrEvaluationValue_acrEvaluationDetailId",
                schema: "HR",
                table: "AcrEvaluationValue",
                column: "acrEvaluationDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrEvaluationValue_acrInitiateId",
                schema: "HR",
                table: "AcrEvaluationValue",
                column: "acrInitiateId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrHealthInfo_acrInitiateId",
                schema: "HR",
                table: "AcrHealthInfo",
                column: "acrInitiateId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRIndicator_headId",
                schema: "HR",
                table: "ACRIndicator",
                column: "headId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrInfo_employeeId",
                schema: "HR",
                table: "AcrInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrInitiate_employeeId",
                schema: "HR",
                table: "AcrInitiate",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrPersonalWorkDescription_acrInitiateId",
                schema: "HR",
                table: "AcrPersonalWorkDescription",
                column: "acrInitiateId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRProcess_aCRScheduleId",
                schema: "HR",
                table: "ACRProcess",
                column: "aCRScheduleId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRProcess_employeeInfoId",
                schema: "HR",
                table: "ACRProcess",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrRoute_acrInitiateId",
                schema: "HR",
                table: "AcrRoute",
                column: "acrInitiateId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrRoute_supervisorId",
                schema: "HR",
                table: "AcrRoute",
                column: "supervisorId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrRouteEvaluation_acrEvaluationMasterId",
                schema: "HR",
                table: "AcrRouteEvaluation",
                column: "acrEvaluationMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_AcrRouteEvaluation_acrRouteId",
                schema: "HR",
                table: "AcrRouteEvaluation",
                column: "acrRouteId");

            migrationBuilder.CreateIndex(
                name: "IX_ACRSchedule_employeeInfoId",
                schema: "HR",
                table: "ACRSchedule",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityName_activityTypeId",
                schema: "HR",
                table: "ActivityName",
                column: "activityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_countryId",
                schema: "HR",
                table: "Address",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_districtId",
                schema: "HR",
                table: "Address",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_divisionId",
                schema: "HR",
                table: "Address",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_employeeId",
                schema: "HR",
                table: "Address",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_thanaId",
                schema: "HR",
                table: "Address",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_Allegation_employeeId",
                schema: "HR",
                table: "Allegation",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicantAddress_applicationFormId",
                schema: "HR",
                table: "ApplicantAddress",
                column: "applicationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicantAddress_countryId",
                schema: "HR",
                table: "ApplicantAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicantAddress_districtId",
                schema: "HR",
                table: "ApplicantAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicantAddress_divisionId",
                schema: "HR",
                table: "ApplicantAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicantAddress_thanaId",
                schema: "HR",
                table: "ApplicantAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationEdu_applicationFormId",
                schema: "HR",
                table: "ApplicationEdu",
                column: "applicationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationExp_applicationFormId",
                schema: "HR",
                table: "ApplicationExp",
                column: "applicationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationForm_newBranchId",
                schema: "HR",
                table: "ApplicationForm",
                column: "newBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationForm_newDesignationId",
                schema: "HR",
                table: "ApplicationForm",
                column: "newDesignationId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationForm_religionId",
                schema: "HR",
                table: "ApplicationForm",
                column: "religionId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationForm_salaryGradeId",
                schema: "HR",
                table: "ApplicationForm",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationQuota_applicationFormId",
                schema: "HR",
                table: "ApplicationQuota",
                column: "applicationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_AppreciationLetter_employeeId",
                schema: "HR",
                table: "AppreciationLetter",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalDetail_approvalMasterId",
                schema: "HR",
                table: "ApprovalDetail",
                column: "approvalMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalDetail_approverId",
                schema: "HR",
                table: "ApprovalDetail",
                column: "approverId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMaster_approvalTypeId",
                schema: "HR",
                table: "ApprovalMaster",
                column: "approvalTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMaster_employeeInfoId",
                schema: "HR",
                table: "ApprovalMaster",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Assessment_statusInfoId",
                schema: "HR",
                table: "Assessment",
                column: "statusInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Assignment_departmentId",
                schema: "HR",
                table: "Assignment",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Assignment_designationId",
                schema: "HR",
                table: "Assignment",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_Assignment_employeeId",
                schema: "HR",
                table: "Assignment",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AttendanceRoute_attendanceUpdateApplyId",
                schema: "HR",
                table: "AttendanceRoute",
                column: "attendanceUpdateApplyId");

            migrationBuilder.CreateIndex(
                name: "IX_AttendanceRoute_employeeId",
                schema: "HR",
                table: "AttendanceRoute",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AttendanceUpdateApply_employeeInfoId",
                schema: "HR",
                table: "AttendanceUpdateApply",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_AtttachmentCategory_atttachmentGroupId",
                schema: "HR",
                table: "AtttachmentCategory",
                column: "atttachmentGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_AwardAttachment_awardId",
                schema: "HR",
                table: "AwardAttachment",
                column: "awardId");

            migrationBuilder.CreateIndex(
                name: "IX_AwardEntry_employeeId",
                schema: "HR",
                table: "AwardEntry",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BankInfo_bankId",
                schema: "HR",
                table: "BankInfo",
                column: "bankId");

            migrationBuilder.CreateIndex(
                name: "IX_BankInfo_employeeId",
                schema: "HR",
                table: "BankInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BankInfo_walletTypeId",
                schema: "HR",
                table: "BankInfo",
                column: "walletTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BankingDiploma_employeeId",
                schema: "HR",
                table: "BankingDiploma",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Belongings_belongingItemId",
                schema: "HR",
                table: "Belongings",
                column: "belongingItemId");

            migrationBuilder.CreateIndex(
                name: "IX_Belongings_employeeId",
                schema: "HR",
                table: "Belongings",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Belongings_itemSpecificationId",
                schema: "HR",
                table: "Belongings",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_BoardOfDirector_companyId",
                schema: "HR",
                table: "BoardOfDirector",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_BondLetter_employeeId",
                schema: "HR",
                table: "BondLetter",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BookEntry_bookCategoryId",
                schema: "HR",
                table: "BookEntry",
                column: "bookCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BorrowerInfo_bookEntryId",
                schema: "HR",
                table: "BorrowerInfo",
                column: "bookEntryId");

            migrationBuilder.CreateIndex(
                name: "IX_BorrowerInfo_borrowerId",
                schema: "HR",
                table: "BorrowerInfo",
                column: "borrowerId");

            migrationBuilder.CreateIndex(
                name: "IX_CallForExam_applicationExamId",
                schema: "HR",
                table: "CallForExam",
                column: "applicationExamId");

            migrationBuilder.CreateIndex(
                name: "IX_CallForExam_applicationFormId",
                schema: "HR",
                table: "CallForExam",
                column: "applicationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_Charge_employeeInfoId",
                schema: "HR",
                table: "Charge",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Children_employeeId",
                schema: "HR",
                table: "Children",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Children_occupationId",
                schema: "HR",
                table: "Children",
                column: "occupationId");

            migrationBuilder.CreateIndex(
                name: "IX_ChildrenEducation_childrenId",
                schema: "HR",
                table: "ChildrenEducation",
                column: "childrenId");

            migrationBuilder.CreateIndex(
                name: "IX_ChildrenEducation_degreeId",
                schema: "HR",
                table: "ChildrenEducation",
                column: "degreeId");

            migrationBuilder.CreateIndex(
                name: "IX_ChildrenEducation_levelOfEducationId",
                schema: "HR",
                table: "ChildrenEducation",
                column: "levelOfEducationId");

            migrationBuilder.CreateIndex(
                name: "IX_CourseCoordinator_employeeInfoId",
                schema: "HR",
                table: "CourseCoordinator",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_CourseCoordinator_trainingInfoNewId",
                schema: "HR",
                table: "CourseCoordinator",
                column: "trainingInfoNewId");

            migrationBuilder.CreateIndex(
                name: "IX_Degree_levelofeducationId",
                schema: "HR",
                table: "Degree",
                column: "levelofeducationId");

            migrationBuilder.CreateIndex(
                name: "IX_Department_hrBranchId",
                schema: "HR",
                table: "Department",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_Department_hrDivisionId",
                schema: "HR",
                table: "Department",
                column: "hrDivisionId");

            migrationBuilder.CreateIndex(
                name: "IX_Designation_customRoleId",
                schema: "HR",
                table: "Designation",
                column: "customRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_DisciplinaryAction_OffenseId",
                schema: "HR",
                table: "DisciplinaryAction",
                column: "OffenseId");

            migrationBuilder.CreateIndex(
                name: "IX_DisciplinaryAction_employeeId",
                schema: "HR",
                table: "DisciplinaryAction",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_DisciplinaryAction_naturalPunishmentId",
                schema: "HR",
                table: "DisciplinaryAction",
                column: "naturalPunishmentId");

            migrationBuilder.CreateIndex(
                name: "IX_DisciplinaryLog_OffenseId",
                schema: "HR",
                table: "DisciplinaryLog",
                column: "OffenseId");

            migrationBuilder.CreateIndex(
                name: "IX_DisciplinaryLog_employeeId",
                schema: "HR",
                table: "DisciplinaryLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_DisciplinaryLog_naturalPunishmentId",
                schema: "HR",
                table: "DisciplinaryLog",
                column: "naturalPunishmentId");

            migrationBuilder.CreateIndex(
                name: "IX_DisiciplinaryAttachment_disciplinaryId",
                schema: "HR",
                table: "DisiciplinaryAttachment",
                column: "disciplinaryId");

            migrationBuilder.CreateIndex(
                name: "IX_DriverAssignment_vehicleEntryId",
                schema: "HR",
                table: "DriverAssignment",
                column: "vehicleEntryId");

            migrationBuilder.CreateIndex(
                name: "IX_DrivingLicense_employeeId",
                schema: "HR",
                table: "DrivingLicense",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_DuelResidence_duelCountryId",
                schema: "HR",
                table: "DuelResidence",
                column: "duelCountryId");

            migrationBuilder.CreateIndex(
                name: "IX_DuelResidence_employeeId",
                schema: "HR",
                table: "DuelResidence",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EducationalQualification_degreeId",
                schema: "HR",
                table: "EducationalQualification",
                column: "degreeId");

            migrationBuilder.CreateIndex(
                name: "IX_EducationalQualification_employeeId",
                schema: "HR",
                table: "EducationalQualification",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EducationalQualification_organizationId",
                schema: "HR",
                table: "EducationalQualification",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_EducationalQualification_reldegreesubjectId",
                schema: "HR",
                table: "EducationalQualification",
                column: "reldegreesubjectId");

            migrationBuilder.CreateIndex(
                name: "IX_EducationalQualification_resultId",
                schema: "HR",
                table: "EducationalQualification",
                column: "resultId");

            migrationBuilder.CreateIndex(
                name: "IX_EmergencyContact_employeeID",
                schema: "HR",
                table: "EmergencyContact",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAccounts_bankId",
                schema: "HR",
                table: "EmployeeAccounts",
                column: "bankId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAccounts_employeeInfoId",
                schema: "HR",
                table: "EmployeeAccounts",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAccounts_pfMemberInfoId",
                schema: "HR",
                table: "EmployeeAccounts",
                column: "pfMemberInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAllocation_dutyId",
                schema: "HR",
                table: "EmployeeAllocation",
                column: "dutyId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAllocation_employeeInfoId",
                schema: "HR",
                table: "EmployeeAllocation",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAward_awardId",
                schema: "HR",
                table: "EmployeeAward",
                column: "awardId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeAward_employeeId",
                schema: "HR",
                table: "EmployeeAward",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeContractInfo_employeeId",
                schema: "HR",
                table: "EmployeeContractInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeCostCentre_costCentreId",
                schema: "HR",
                table: "EmployeeCostCentre",
                column: "costCentreId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeCostCentre_employeeInfoId",
                schema: "HR",
                table: "EmployeeCostCentre",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeDeath_employeeInfoId",
                schema: "HR",
                table: "EmployeeDeath",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeDisease_employeeInfoId",
                schema: "HR",
                table: "EmployeeDisease",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeDisease_medicalDiseaseId",
                schema: "HR",
                table: "EmployeeDisease",
                column: "medicalDiseaseId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeExtraCurricular_employeeId",
                schema: "HR",
                table: "EmployeeExtraCurricular",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeExtraCurricular_extraCurricularTypeId",
                schema: "HR",
                table: "EmployeeExtraCurricular",
                column: "extraCurricularTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeGrade_employeeInfoId",
                schema: "HR",
                table: "EmployeeGrade",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeGrade_salaryGradeId",
                schema: "HR",
                table: "EmployeeGrade",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeHobby_employeeInfoId",
                schema: "HR",
                table: "EmployeeHobby",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_ApplicationUserId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "ApplicationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_DivisionId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "DivisionId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_JoinDesignationId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "JoinDesignationId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_branchId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "branchId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_currentGradeId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "currentGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_customRoleId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "customRoleId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_departmentId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_disabilityTypeId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "disabilityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_employeeStatusId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "employeeStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_employeeTypeId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "employeeTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_expertiseId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "expertiseId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_fatherOccupationId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "fatherOccupationId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_functionInfoId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "functionInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_hrBranchId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_hrDivisionId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "hrDivisionId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_hrProgramId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "hrProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_hrUnitId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "hrUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_joiningGradeId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "joiningGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_lastDesignationId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "lastDesignationId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_locationId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "locationId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_motherOccupationId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "motherOccupationId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_pNSId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "pNSId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_religionId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "religionId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInfo_shiftGroupId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "shiftGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeInsurance_employeeInfoId",
                schema: "HR",
                table: "EmployeeInsurance",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeJoiningLetter_employeeReleaseInfoId",
                schema: "HR",
                table: "EmployeeJoiningLetter",
                column: "employeeReleaseInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeLanguage_employeeId",
                schema: "HR",
                table: "EmployeeLanguage",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeLanguage_languageId",
                schema: "HR",
                table: "EmployeeLanguage",
                column: "languageId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeLanguageSkill_employeeInfoId",
                schema: "HR",
                table: "EmployeeLanguageSkill",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeMembership_employeeId",
                schema: "HR",
                table: "EmployeeMembership",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeMembership_membershipId",
                schema: "HR",
                table: "EmployeeMembership",
                column: "membershipId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeOtherInfo_employeeInfoId",
                schema: "HR",
                table: "EmployeeOtherInfo",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeOtherInfo_hRFacilityId",
                schema: "HR",
                table: "EmployeeOtherInfo",
                column: "hRFacilityId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_branchId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "branchId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_departmentId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_designationId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_employeeId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_hrBranchId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_hrDivisionId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "hrDivisionId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_hrUnitId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "hrUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_locationId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "locationId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_officeId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "officeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePostingPlace_responsibilityId",
                schema: "HR",
                table: "EmployeePostingPlace",
                column: "responsibilityId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeProjectActivity_employeeId",
                schema: "HR",
                table: "EmployeeProjectActivity",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeProjectActivity_hRActivityId",
                schema: "HR",
                table: "EmployeeProjectActivity",
                column: "hRActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeProjectActivity_hRDonerId",
                schema: "HR",
                table: "EmployeeProjectActivity",
                column: "hRDonerId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeProjectActivity_hRProjectId",
                schema: "HR",
                table: "EmployeeProjectActivity",
                column: "hRProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeProjectAssign_employeeId",
                schema: "HR",
                table: "EmployeeProjectAssign",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeProjectAssign_projectId",
                schema: "HR",
                table: "EmployeeProjectAssign",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeePunchCardInfo_shiftGroupMasterId",
                schema: "HR",
                table: "EmployeePunchCardInfo",
                column: "shiftGroupMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeReleaseInfo_employeeInfoId",
                schema: "HR",
                table: "EmployeeReleaseInfo",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeRole_employeeId",
                schema: "HR",
                table: "EmployeeRole",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeRole_roleId",
                schema: "HR",
                table: "EmployeeRole",
                column: "roleId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesAcr_acrEvaluationNameId",
                schema: "HR",
                table: "EmployeesAcr",
                column: "acrEvaluationNameId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesAcr_assessmentId",
                schema: "HR",
                table: "EmployeesAcr",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSignature_employeeId",
                schema: "HR",
                table: "EmployeeSignature",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSports_employeeId",
                schema: "HR",
                table: "EmployeeSports",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EnrolledTrainee_employeeId",
                schema: "HR",
                table: "EnrolledTrainee",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EnrolledTrainee_trainingInfoNewId",
                schema: "HR",
                table: "EnrolledTrainee",
                column: "trainingInfoNewId");

            migrationBuilder.CreateIndex(
                name: "IX_Evaluation_employeeId",
                schema: "HR",
                table: "Evaluation",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Evaluation_evaluationFectorsId",
                schema: "HR",
                table: "Evaluation",
                column: "evaluationFectorsId");

            migrationBuilder.CreateIndex(
                name: "IX_Evaluation_trainerId",
                schema: "HR",
                table: "Evaluation",
                column: "trainerId");

            migrationBuilder.CreateIndex(
                name: "IX_Evaluation_trainingInfoId",
                schema: "HR",
                table: "Evaluation",
                column: "trainingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ExamResult_employeeId",
                schema: "HR",
                table: "ExamResult",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ExamResult_trainingExamId",
                schema: "HR",
                table: "ExamResult",
                column: "trainingExamId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewComment_exitInterviewMasterId",
                schema: "HR",
                table: "ExitInterviewComment",
                column: "exitInterviewMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewComment_interviewCommentId",
                schema: "HR",
                table: "ExitInterviewComment",
                column: "interviewCommentId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewFeelAndFollowings_exitInterviewMasterId",
                schema: "HR",
                table: "ExitInterviewFeelAndFollowings",
                column: "exitInterviewMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewFeelAndFollowings_feelAboutTheFollowingId",
                schema: "HR",
                table: "ExitInterviewFeelAndFollowings",
                column: "feelAboutTheFollowingId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewMaster_employeeId",
                schema: "HR",
                table: "ExitInterviewMaster",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewPayNBenefits_exitInterviewMasterId",
                schema: "HR",
                table: "ExitInterviewPayNBenefits",
                column: "exitInterviewMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewPayNBenefits_payAndBenefitsId",
                schema: "HR",
                table: "ExitInterviewPayNBenefits",
                column: "payAndBenefitsId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewReasonOfLeaving_exitInterviewMasterId",
                schema: "HR",
                table: "ExitInterviewReasonOfLeaving",
                column: "exitInterviewMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewReasonOfLeaving_reasonForLeavingId",
                schema: "HR",
                table: "ExitInterviewReasonOfLeaving",
                column: "reasonForLeavingId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewSuggestion_commentORSuggestionId",
                schema: "HR",
                table: "ExitInterviewSuggestion",
                column: "commentORSuggestionId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitInterviewSuggestion_exitInterviewMasterId",
                schema: "HR",
                table: "ExitInterviewSuggestion",
                column: "exitInterviewMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ExperianceLetter_employeeId",
                schema: "HR",
                table: "ExperianceLetter",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceCode_employeeId",
                schema: "HR",
                table: "FinanceCode",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_FoodLiking_employeeId",
                schema: "HR",
                table: "FoodLiking",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_FreedomFighter_employeeID",
                schema: "HR",
                table: "FreedomFighter",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_FunctionInfo_companyId",
                schema: "HR",
                table: "FunctionInfo",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_FunctionInfo_specialBranchUnitId",
                schema: "HR",
                table: "FunctionInfo",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_GratuityPolicyDetail_gratuityPolicyId",
                schema: "HR",
                table: "GratuityPolicyDetail",
                column: "gratuityPolicyId");

            migrationBuilder.CreateIndex(
                name: "IX_GratuityPolicyMaster_sbuId",
                schema: "HR",
                table: "GratuityPolicyMaster",
                column: "sbuId");

            migrationBuilder.CreateIndex(
                name: "IX_HandoverTakeoverDetails_masterId",
                schema: "HR",
                table: "HandoverTakeoverDetails",
                column: "masterId");

            migrationBuilder.CreateIndex(
                name: "IX_HandoverTakeoverMaster_handoverId",
                schema: "HR",
                table: "HandoverTakeoverMaster",
                column: "handoverId");

            migrationBuilder.CreateIndex(
                name: "IX_HandoverTakeoverMaster_takeoverId",
                schema: "HR",
                table: "HandoverTakeoverMaster",
                column: "takeoverId");

            migrationBuilder.CreateIndex(
                name: "IX_HrAtmBooth_branchId",
                schema: "HR",
                table: "HrAtmBooth",
                column: "branchId");

            migrationBuilder.CreateIndex(
                name: "IX_HrAtmBooth_subBranchId",
                schema: "HR",
                table: "HrAtmBooth",
                column: "subBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_HrBranch_branchTypeId",
                schema: "HR",
                table: "HrBranch",
                column: "branchTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_HrBranch_locationId",
                schema: "HR",
                table: "HrBranch",
                column: "locationId");

            migrationBuilder.CreateIndex(
                name: "IX_HrBranch_officeId",
                schema: "HR",
                table: "HrBranch",
                column: "officeId");

            migrationBuilder.CreateIndex(
                name: "IX_HrBudgetDpt_branchId",
                schema: "HR",
                table: "HrBudgetDpt",
                column: "branchId");

            migrationBuilder.CreateIndex(
                name: "IX_HrBudgetDpt_departmentId",
                schema: "HR",
                table: "HrBudgetDpt",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_HrBudgetDpt_designationId",
                schema: "HR",
                table: "HrBudgetDpt",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_HrCommunication_employeeId",
                schema: "HR",
                table: "HrCommunication",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_HrComputerLiteracy_employeeId",
                schema: "HR",
                table: "HrComputerLiteracy",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_HrDivision_functionInfoId",
                schema: "HR",
                table: "HrDivision",
                column: "functionInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_HrDivision_hrBranchId",
                schema: "HR",
                table: "HrDivision",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_HrFormatDetails_employeeId",
                schema: "HR",
                table: "HrFormatDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_HrFormatDetails_formatMasterId",
                schema: "HR",
                table: "HrFormatDetails",
                column: "formatMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_HRPMSAttachment_atttachmentCategoryId",
                schema: "HR",
                table: "HRPMSAttachment",
                column: "atttachmentCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_HRPMSAttachment_employeeId",
                schema: "HR",
                table: "HRPMSAttachment",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_HrSubBranch_hrBranchId",
                schema: "HR",
                table: "HrSubBranch",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_HrSubBranch_subbranchTypeId",
                schema: "HR",
                table: "HrSubBranch",
                column: "subbranchTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_HrUnit_departmentId",
                schema: "HR",
                table: "HrUnit",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_HrUnit_hrBranchId",
                schema: "HR",
                table: "HrUnit",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveCommittee_employeeId",
                schema: "HR",
                table: "LeaveCommittee",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveCommittee_leaveRegisterId",
                schema: "HR",
                table: "LeaveCommittee",
                column: "leaveRegisterId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveLog_employeeId",
                schema: "HR",
                table: "LeaveLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveLog_leaveTypeId",
                schema: "HR",
                table: "LeaveLog",
                column: "leaveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveOpeningBalance_employeeId",
                schema: "HR",
                table: "LeaveOpeningBalance",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveOpeningBalance_leaveTypeId",
                schema: "HR",
                table: "LeaveOpeningBalance",
                column: "leaveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveOpeningBalance_yearId",
                schema: "HR",
                table: "LeaveOpeningBalance",
                column: "yearId");

            migrationBuilder.CreateIndex(
                name: "IX_LeavePolicy_employeeId",
                schema: "HR",
                table: "LeavePolicy",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeavePolicy_leaveTypeId",
                schema: "HR",
                table: "LeavePolicy",
                column: "leaveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeavePolicy_yearId",
                schema: "HR",
                table: "LeavePolicy",
                column: "yearId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveRegister_employeeId",
                schema: "HR",
                table: "LeaveRegister",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveRegister_leaveDayId",
                schema: "HR",
                table: "LeaveRegister",
                column: "leaveDayId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveRegister_leaveTypeId",
                schema: "HR",
                table: "LeaveRegister",
                column: "leaveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveRegister_substitutionUserId",
                schema: "HR",
                table: "LeaveRegister",
                column: "substitutionUserId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveRoute_employeeId",
                schema: "HR",
                table: "LeaveRoute",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveRoute_leaveRegisterId",
                schema: "HR",
                table: "LeaveRoute",
                column: "leaveRegisterId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveStatusLog_employeeId",
                schema: "HR",
                table: "LeaveStatusLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveStatusLog_leaveRegisterId",
                schema: "HR",
                table: "LeaveStatusLog",
                column: "leaveRegisterId");

            migrationBuilder.CreateIndex(
                name: "IX_Lisence_lisenceTypeId",
                schema: "HR",
                table: "Lisence",
                column: "lisenceTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Location_companyId",
                schema: "HR",
                table: "Location",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_Location_hrDepartmentId",
                schema: "HR",
                table: "Location",
                column: "hrDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_MajorOverholding_vehicleEntryId",
                schema: "HR",
                table: "MajorOverholding",
                column: "vehicleEntryId");

            migrationBuilder.CreateIndex(
                name: "IX_MobileBenifit_employeeId",
                schema: "HR",
                table: "MobileBenifit",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Nominee_employeeID",
                schema: "HR",
                table: "Nominee",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_NomineeDetail_nomineeFundId",
                schema: "HR",
                table: "NomineeDetail",
                column: "nomineeFundId");

            migrationBuilder.CreateIndex(
                name: "IX_NomineeDetail_nomineeId",
                schema: "HR",
                table: "NomineeDetail",
                column: "nomineeId");

            migrationBuilder.CreateIndex(
                name: "IX_OfficeAssign_employeeInfoId",
                schema: "HR",
                table: "OfficeAssign",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganogramChild_OrgRelationId",
                schema: "HR",
                table: "OrganogramChild",
                column: "OrgRelationId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganogramChild_designationId",
                schema: "HR",
                table: "OrganogramChild",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganogramRelation_departmentId",
                schema: "HR",
                table: "OrganogramRelation",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganogramRelation_divisionId",
                schema: "HR",
                table: "OrganogramRelation",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganogramRelation_officeId",
                schema: "HR",
                table: "OrganogramRelation",
                column: "officeId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganoOrganization_organizationTypeId",
                schema: "HR",
                table: "OrganoOrganization",
                column: "organizationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganoOrganization_organoOrganizationId",
                schema: "HR",
                table: "OrganoOrganization",
                column: "organoOrganizationId");

            migrationBuilder.CreateIndex(
                name: "IX_OtherActivity_activityNameId",
                schema: "HR",
                table: "OtherActivity",
                column: "activityNameId");

            migrationBuilder.CreateIndex(
                name: "IX_OtherActivity_employeeID",
                schema: "HR",
                table: "OtherActivity",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_OtherQualification_employeeID",
                schema: "HR",
                table: "OtherQualification",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_OtherQualification_otherQualificationHeadId",
                schema: "HR",
                table: "OtherQualification",
                column: "otherQualificationHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_OtherQualification_resultId",
                schema: "HR",
                table: "OtherQualification",
                column: "resultId");

            migrationBuilder.CreateIndex(
                name: "IX_OTProcessData_wageEmployeeInfoId",
                schema: "HR",
                table: "OTProcessData",
                column: "wageEmployeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_OTSetupDetail_oTSetupMasterId",
                schema: "HR",
                table: "OTSetupDetail",
                column: "oTSetupMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_OTSetupDetail_oTSlotTypeId",
                schema: "HR",
                table: "OTSetupDetail",
                column: "oTSlotTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_OTSetupMaster_shiftGroupMasterId",
                schema: "HR",
                table: "OTSetupMaster",
                column: "shiftGroupMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PassportDetails_employeeId",
                schema: "HR",
                table: "PassportDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Photograph_employeeId",
                schema: "HR",
                table: "Photograph",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PlanDetails_planId",
                schema: "HR",
                table: "PlanDetails",
                column: "planId");

            migrationBuilder.CreateIndex(
                name: "IX_PlanDetails_trainingOfferId",
                schema: "HR",
                table: "PlanDetails",
                column: "trainingOfferId");

            migrationBuilder.CreateIndex(
                name: "IX_Position_employeeInfoId",
                schema: "HR",
                table: "Position",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Post_altDesignationId",
                schema: "HR",
                table: "Post",
                column: "altDesignationId");

            migrationBuilder.CreateIndex(
                name: "IX_Post_designationId",
                schema: "HR",
                table: "Post",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_Post_organoOrganizationId",
                schema: "HR",
                table: "Post",
                column: "organoOrganizationId");

            migrationBuilder.CreateIndex(
                name: "IX_PostDetails_employeeId",
                schema: "HR",
                table: "PostDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PostDetails_employmentTypeId",
                schema: "HR",
                table: "PostDetails",
                column: "employmentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PostDetails_postId",
                schema: "HR",
                table: "PostDetails",
                column: "postId");

            migrationBuilder.CreateIndex(
                name: "IX_PostDetails_postingTypeId",
                schema: "HR",
                table: "PostDetails",
                column: "postingTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PostDetails_reportingBossId",
                schema: "HR",
                table: "PostDetails",
                column: "reportingBossId");

            migrationBuilder.CreateIndex(
                name: "IX_PrevJobHistory_employeeId",
                schema: "HR",
                table: "PrevJobHistory",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PriviousEmployment_employeeID",
                schema: "HR",
                table: "PriviousEmployment",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_PriviousEmployment_joiningDesignationId",
                schema: "HR",
                table: "PriviousEmployment",
                column: "joiningDesignationId");

            migrationBuilder.CreateIndex(
                name: "IX_PriviousEmployment_lastDesignationId",
                schema: "HR",
                table: "PriviousEmployment",
                column: "lastDesignationId");

            migrationBuilder.CreateIndex(
                name: "IX_PriviousEmployment_organizationTypeId",
                schema: "HR",
                table: "PriviousEmployment",
                column: "organizationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PRLApplication_employeeId",
                schema: "HR",
                table: "PRLApplication",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PRLAttachment_prlApplicationid",
                schema: "HR",
                table: "PRLAttachment",
                column: "prlApplicationid");

            migrationBuilder.CreateIndex(
                name: "IX_ProfessionalQualifications_employeeID",
                schema: "HR",
                table: "ProfessionalQualifications",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_ProfessionalQualifications_qualificationHeadId",
                schema: "HR",
                table: "ProfessionalQualifications",
                column: "qualificationHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_ProfessionalQualifications_resultId",
                schema: "HR",
                table: "ProfessionalQualifications",
                column: "resultId");

            migrationBuilder.CreateIndex(
                name: "IX_Promotion_designationId",
                schema: "HR",
                table: "Promotion",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_Promotion_designationOldId",
                schema: "HR",
                table: "Promotion",
                column: "designationOldId");

            migrationBuilder.CreateIndex(
                name: "IX_Promotion_employeeInfoId",
                schema: "HR",
                table: "Promotion",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Promotion_salaryGradeId",
                schema: "HR",
                table: "Promotion",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_PromotionAttachment_promotionId",
                schema: "HR",
                table: "PromotionAttachment",
                column: "promotionId");

            migrationBuilder.CreateIndex(
                name: "IX_PromotionEntry_employeeId",
                schema: "HR",
                table: "PromotionEntry",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PromotionLog_designationNewId",
                schema: "HR",
                table: "PromotionLog",
                column: "designationNewId");

            migrationBuilder.CreateIndex(
                name: "IX_PromotionLog_designationOldId",
                schema: "HR",
                table: "PromotionLog",
                column: "designationOldId");

            migrationBuilder.CreateIndex(
                name: "IX_PromotionLog_employeeId",
                schema: "HR",
                table: "PromotionLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PromotionLog_payScaleId",
                schema: "HR",
                table: "PromotionLog",
                column: "payScaleId");

            migrationBuilder.CreateIndex(
                name: "IX_Publication_employeeId",
                schema: "HR",
                table: "Publication",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PublicationAttachment_publicationId",
                schema: "HR",
                table: "PublicationAttachment",
                column: "publicationId");

            migrationBuilder.CreateIndex(
                name: "IX_PublicationEntry_employeeId",
                schema: "HR",
                table: "PublicationEntry",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Punishment_employeeId",
                schema: "HR",
                table: "Punishment",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_QualificationAndValidation_employeeID",
                schema: "HR",
                table: "QualificationAndValidation",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_QualificationAndValidation_qualificationHeadId",
                schema: "HR",
                table: "QualificationAndValidation",
                column: "qualificationHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_QuantitativeEvaluation_aCRIndicatorId",
                schema: "HR",
                table: "QuantitativeEvaluation",
                column: "aCRIndicatorId");

            migrationBuilder.CreateIndex(
                name: "IX_QuantitativeEvaluation_assessmentId",
                schema: "HR",
                table: "QuantitativeEvaluation",
                column: "assessmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Reference_employeeID",
                schema: "HR",
                table: "Reference",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_RelDegreeSubject_degreeId",
                schema: "HR",
                table: "RelDegreeSubject",
                column: "degreeId");

            migrationBuilder.CreateIndex(
                name: "IX_RelDegreeSubject_subjectId",
                schema: "HR",
                table: "RelDegreeSubject",
                column: "subjectId");

            migrationBuilder.CreateIndex(
                name: "IX_ResignationLetter_employeeId",
                schema: "HR",
                table: "ResignationLetter",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ResignInformation_employeeId",
                schema: "HR",
                table: "ResignInformation",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ResourcePerson_employeeInfoId",
                schema: "HR",
                table: "ResourcePerson",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Reward_employeeId",
                schema: "HR",
                table: "Reward",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnSBUPNS_pNSId",
                schema: "HR",
                table: "RlnSBUPNS",
                column: "pNSId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnSBUPNS_specialBranchUnitId",
                schema: "HR",
                table: "RlnSBUPNS",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnTrainingTrainer_trainerId",
                schema: "HR",
                table: "RlnTrainingTrainer",
                column: "trainerId");

            migrationBuilder.CreateIndex(
                name: "IX_RlnTrainingTrainer_trainingOfferId",
                schema: "HR",
                table: "RlnTrainingTrainer",
                column: "trainingOfferId");

            migrationBuilder.CreateIndex(
                name: "IX_SessionAttendance_employeeId",
                schema: "HR",
                table: "SessionAttendance",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_SessionAttendance_trainingInfoDetailsId",
                schema: "HR",
                table: "SessionAttendance",
                column: "trainingInfoDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_ShiftGroupDetail_shiftGroupMasterId",
                schema: "HR",
                table: "ShiftGroupDetail",
                column: "shiftGroupMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SpecialBranchUnit_companyId",
                schema: "HR",
                table: "SpecialBranchUnit",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_Spouse_employeeId",
                schema: "HR",
                table: "Spouse",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Spouse_occupationId",
                schema: "HR",
                table: "Spouse",
                column: "occupationId");

            migrationBuilder.CreateIndex(
                name: "IX_Supervisor_employeeID",
                schema: "HR",
                table: "Supervisor",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_Supervisor_supervisorId",
                schema: "HR",
                table: "Supervisor",
                column: "supervisorId");

            migrationBuilder.CreateIndex(
                name: "IX_Suspension_employeeId",
                schema: "HR",
                table: "Suspension",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Tax_employeeId",
                schema: "HR",
                table: "Tax",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TeacherBasics_religionId",
                schema: "HR",
                table: "TeacherBasics",
                column: "religionId");

            migrationBuilder.CreateIndex(
                name: "IX_TeacherCareer_teacherId",
                schema: "HR",
                table: "TeacherCareer",
                column: "teacherId");

            migrationBuilder.CreateIndex(
                name: "IX_TeacherEducation_teacherId",
                schema: "HR",
                table: "TeacherEducation",
                column: "teacherId");

            migrationBuilder.CreateIndex(
                name: "IX_TeacherExpertise_teacherId",
                schema: "HR",
                table: "TeacherExpertise",
                column: "teacherId");

            migrationBuilder.CreateIndex(
                name: "IX_TeacherSocialMeadia_teacherId",
                schema: "HR",
                table: "TeacherSocialMeadia",
                column: "teacherId");

            migrationBuilder.CreateIndex(
                name: "IX_Trainer_employeeId",
                schema: "HR",
                table: "Trainer",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingAllocation_employeeId",
                schema: "HR",
                table: "TrainingAllocation",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingAllocation_postDetailsId",
                schema: "HR",
                table: "TrainingAllocation",
                column: "postDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingAllocation_trainingInfoId",
                schema: "HR",
                table: "TrainingAllocation",
                column: "trainingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingAttendance_traineeId",
                schema: "HR",
                table: "TrainingAttendance",
                column: "traineeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingAttendance_trainingId",
                schema: "HR",
                table: "TrainingAttendance",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingCertificate_traineeId",
                schema: "HR",
                table: "TrainingCertificate",
                column: "traineeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingCertificate_trainingId",
                schema: "HR",
                table: "TrainingCertificate",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingDeliverables_trainingInfoId",
                schema: "HR",
                table: "TrainingDeliverables",
                column: "trainingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingExam_trainerId",
                schema: "HR",
                table: "TrainingExam",
                column: "trainerId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingExam_trainingInfoId",
                schema: "HR",
                table: "TrainingExam",
                column: "trainingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingFeedback_employeeId",
                schema: "HR",
                table: "TrainingFeedback",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingFeedback_trainingId",
                schema: "HR",
                table: "TrainingFeedback",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingHonorarium_CoOrdinatorId",
                schema: "HR",
                table: "TrainingHonorarium",
                column: "CoOrdinatorId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingHonorarium_trainerId",
                schema: "HR",
                table: "TrainingHonorarium",
                column: "trainerId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingHonorarium_trainingId",
                schema: "HR",
                table: "TrainingHonorarium",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfo_organizationId",
                schema: "HR",
                table: "TrainingInfo",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfo_planDetailsId",
                schema: "HR",
                table: "TrainingInfo",
                column: "planDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoDetails_trainerId",
                schema: "HR",
                table: "TrainingInfoDetails",
                column: "trainerId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoDetails_trainingInfoId",
                schema: "HR",
                table: "TrainingInfoDetails",
                column: "trainingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_countryId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_courseTypeId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "courseTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_employeeInfoId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_employeeTypeId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "employeeTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_instituteId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "instituteId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_sourceOfFundId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "sourceOfFundId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_subjectId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "subjectId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_trainerId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "trainerId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_trainingCategoryId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "trainingCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingInfoNew_trainingInstituteId",
                schema: "HR",
                table: "TrainingInfoNew",
                column: "trainingInstituteId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingMarks_traineeId",
                schema: "HR",
                table: "TrainingMarks",
                column: "traineeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingMarks_trainingId",
                schema: "HR",
                table: "TrainingMarks",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingMiscallenous_trainingInfoId",
                schema: "HR",
                table: "TrainingMiscallenous",
                column: "trainingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingOffer_moduleTrainingCategoryId",
                schema: "HR",
                table: "TrainingOffer",
                column: "moduleTrainingCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingPerticipants_traineeId",
                schema: "HR",
                table: "TrainingPerticipants",
                column: "traineeId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingPerticipants_trainingId",
                schema: "HR",
                table: "TrainingPerticipants",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingResourcePerson_resourcePersonId",
                schema: "HR",
                table: "TrainingResourcePerson",
                column: "resourcePersonId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingResourcePerson_trainingInfoNewId",
                schema: "HR",
                table: "TrainingResourcePerson",
                column: "trainingInfoNewId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingSchedule_trainerId",
                schema: "HR",
                table: "TrainingSchedule",
                column: "trainerId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingSchedule_trainingId",
                schema: "HR",
                table: "TrainingSchedule",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingScheduleDetails_trainingScheduleId",
                schema: "HR",
                table: "TrainingScheduleDetails",
                column: "trainingScheduleId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingScheduleTrainee_employeeInfoId",
                schema: "HR",
                table: "TrainingScheduleTrainee",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingScheduleTrainee_trainingScheduleId",
                schema: "HR",
                table: "TrainingScheduleTrainee",
                column: "trainingScheduleId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingScheduleTrainer_resourcePersonId",
                schema: "HR",
                table: "TrainingScheduleTrainer",
                column: "resourcePersonId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingScheduleTrainer_trainingScheduleId",
                schema: "HR",
                table: "TrainingScheduleTrainer",
                column: "trainingScheduleId");

            migrationBuilder.CreateIndex(
                name: "IX_TrainingTaDa_trainingId",
                schema: "HR",
                table: "TrainingTaDa",
                column: "trainingId");

            migrationBuilder.CreateIndex(
                name: "IX_TraningLog_countryId",
                schema: "HR",
                table: "TraningLog",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_TraningLog_employeeId",
                schema: "HR",
                table: "TraningLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TraningLog_trainingCategoryId",
                schema: "HR",
                table: "TraningLog",
                column: "trainingCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_TraningLog_trainingInstituteId",
                schema: "HR",
                table: "TraningLog",
                column: "trainingInstituteId");

            migrationBuilder.CreateIndex(
                name: "IX_TraningLog_trainingTitlelogId",
                schema: "HR",
                table: "TraningLog",
                column: "trainingTitlelogId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferAttachment_transferId",
                schema: "HR",
                table: "TransferAttachment",
                column: "transferId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferEntry_employeeId",
                schema: "HR",
                table: "TransferEntry",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_departmentId",
                schema: "HR",
                table: "TransferLog",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_designatioId",
                schema: "HR",
                table: "TransferLog",
                column: "designatioId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_divisionId",
                schema: "HR",
                table: "TransferLog",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_employeeId",
                schema: "HR",
                table: "TransferLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_hrUnitId",
                schema: "HR",
                table: "TransferLog",
                column: "hrUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_officeId",
                schema: "HR",
                table: "TransferLog",
                column: "officeId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_salaryGradeId",
                schema: "HR",
                table: "TransferLog",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_toBranchId",
                schema: "HR",
                table: "TransferLog",
                column: "toBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferLog_zoneId",
                schema: "HR",
                table: "TransferLog",
                column: "zoneId");

            migrationBuilder.CreateIndex(
                name: "IX_TraveInfo_countryId",
                schema: "HR",
                table: "TraveInfo",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_TraveInfo_employeeId",
                schema: "HR",
                table: "TraveInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TraveInfo_hrProgramId",
                schema: "HR",
                table: "TraveInfo",
                column: "hrProgramId");

            migrationBuilder.CreateIndex(
                name: "IX_TraveInfo_projectId",
                schema: "HR",
                table: "TraveInfo",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_TraveInfo_travelPurposeId",
                schema: "HR",
                table: "TraveInfo",
                column: "travelPurposeId");

            migrationBuilder.CreateIndex(
                name: "IX_TravellerInfo_employeeID",
                schema: "HR",
                table: "TravellerInfo",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_TravellerInfo_travelMasterId",
                schema: "HR",
                table: "TravellerInfo",
                column: "travelMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_TravellingInfo_travelMasterId",
                schema: "HR",
                table: "TravellingInfo",
                column: "travelMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_TravellingInfo_travelVehicleTypeId",
                schema: "HR",
                table: "TravellingInfo",
                column: "travelVehicleTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_TravelMaster_employeeID",
                schema: "HR",
                table: "TravelMaster",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_TravelMaster_hRActivityId",
                schema: "HR",
                table: "TravelMaster",
                column: "hRActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_TravelMaster_hRDonerId",
                schema: "HR",
                table: "TravelMaster",
                column: "hRDonerId");

            migrationBuilder.CreateIndex(
                name: "IX_TravelMaster_travelProjectId",
                schema: "HR",
                table: "TravelMaster",
                column: "travelProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_TravelRoute_employeeId",
                schema: "HR",
                table: "TravelRoute",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TravelRoute_travelMasterId",
                schema: "HR",
                table: "TravelRoute",
                column: "travelMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_TravelStatusLog_employeeId",
                schema: "HR",
                table: "TravelStatusLog",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TravelStatusLog_travelMasterId",
                schema: "HR",
                table: "TravelStatusLog",
                column: "travelMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Vacancy_designationId",
                schema: "HR",
                table: "Vacancy",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEntry_vehicleId",
                schema: "HR",
                table: "VehicleEntry",
                column: "vehicleId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesAddress_countryId",
                schema: "HR",
                table: "WagesAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesAddress_districtId",
                schema: "HR",
                table: "WagesAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesAddress_divisionId",
                schema: "HR",
                table: "WagesAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesAddress_employeeId",
                schema: "HR",
                table: "WagesAddress",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesAddress_thanaId",
                schema: "HR",
                table: "WagesAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesBankInfo_employeeId",
                schema: "HR",
                table: "WagesBankInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmergencyContact_employeeID",
                schema: "HR",
                table: "WagesEmergencyContact",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmployeeInfo_ApplicationUserId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "ApplicationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmployeeInfo_branchId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "branchId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmployeeInfo_departmentId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmployeeInfo_employeeTypeId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "employeeTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmployeeInfo_pNSId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "pNSId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmployeeInfo_religionId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "religionId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesEmployeeInfo_shiftGroupId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "shiftGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesLeaveRegister_employeeId",
                schema: "HR",
                table: "WagesLeaveRegister",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesLeaveRegister_leaveTypeId",
                schema: "HR",
                table: "WagesLeaveRegister",
                column: "leaveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesLeaveRegister_substitutionUserId",
                schema: "HR",
                table: "WagesLeaveRegister",
                column: "substitutionUserId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesLeftDetails_employeeId",
                schema: "HR",
                table: "WagesLeftDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesPhotograph_employeeId",
                schema: "HR",
                table: "WagesPhotograph",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesPriviousEmployment_employeeID",
                schema: "HR",
                table: "WagesPriviousEmployment",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_WagesPriviousEmployment_organizationTypeId",
                schema: "HR",
                table: "WagesPriviousEmployment",
                column: "organizationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesPunchCardInfo_employeeId",
                schema: "HR",
                table: "WagesPunchCardInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesReference_employeeID",
                schema: "HR",
                table: "WagesReference",
                column: "employeeID");

            migrationBuilder.CreateIndex(
                name: "IX_WagesSalaryStructure_employeeId",
                schema: "HR",
                table: "WagesSalaryStructure",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesSalaryStructure_salaryHeadId",
                schema: "HR",
                table: "WagesSalaryStructure",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkHistory_emplyeeInfoId",
                schema: "HR",
                table: "WorkHistory",
                column: "emplyeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_YearlyLeaveProcess_employeeId",
                schema: "HR",
                table: "YearlyLeaveProcess",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_YearlyLeaveProcess_leaveTypeId",
                schema: "HR",
                table: "YearlyLeaveProcess",
                column: "leaveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_YearlyLeaveProcess_yearId",
                schema: "HR",
                table: "YearlyLeaveProcess",
                column: "yearId");

            migrationBuilder.CreateIndex(
                name: "IX_IeltsInfo_employeeId",
                schema: "IELTS",
                table: "IeltsInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageBoxFile_messageBoxId",
                schema: "MBox",
                table: "MessageBoxFile",
                column: "messageBoxId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageBoxInfo_employeeId",
                schema: "MBox",
                table: "MessageBoxInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageBoxInfo_messageBoxId",
                schema: "MBox",
                table: "MessageBoxInfo",
                column: "messageBoxId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageBoxInfo_messageGroupId",
                schema: "MBox",
                table: "MessageBoxInfo",
                column: "messageGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageBoxInfo_receiverId",
                schema: "MBox",
                table: "MessageBoxInfo",
                column: "receiverId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageGroup_employeeId",
                schema: "MBox",
                table: "MessageGroup",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageGroupMember_employeeId",
                schema: "MBox",
                table: "MessageGroupMember",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageGroupMember_messageGroupId",
                schema: "MBox",
                table: "MessageGroupMember",
                column: "messageGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingAttendance_employeeId",
                schema: "MMS",
                table: "MeetingAttendance",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingAttendance_meetingInfoId",
                schema: "MMS",
                table: "MeetingAttendance",
                column: "meetingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDetail_actionId",
                schema: "MMS",
                table: "MeetingDetail",
                column: "actionId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDetail_docId",
                schema: "MMS",
                table: "MeetingDetail",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDetail_employeeId",
                schema: "MMS",
                table: "MeetingDetail",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDetail_meetingInfoId",
                schema: "MMS",
                table: "MeetingDetail",
                column: "meetingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocAttachment_docId",
                schema: "MMS",
                table: "MeetingDocAttachment",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocRoute_actionId",
                schema: "MMS",
                table: "MeetingDocRoute",
                column: "actionId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocRoute_docId",
                schema: "MMS",
                table: "MeetingDocRoute",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocRoute_employeeId",
                schema: "MMS",
                table: "MeetingDocRoute",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocRoute_employeeReplaceId",
                schema: "MMS",
                table: "MeetingDocRoute",
                column: "employeeReplaceId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocs_docId",
                schema: "MMS",
                table: "MeetingDocs",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocs_meetingInfoId",
                schema: "MMS",
                table: "MeetingDocs",
                column: "meetingInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocument_docId",
                schema: "MMS",
                table: "MeetingDocument",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingDocument_employeeId",
                schema: "MMS",
                table: "MeetingDocument",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingInfo_actionId",
                schema: "MMS",
                table: "MeetingInfo",
                column: "actionId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingInfo_employeeId",
                schema: "MMS",
                table: "MeetingInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingUser_employeeId",
                schema: "MMS",
                table: "MeetingUser",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BarCodeInformation_itemPriceId",
                schema: "OSales",
                table: "BarCodeInformation",
                column: "itemPriceId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemPriceFixing_itemSpecificationId",
                schema: "OSales",
                table: "ItemPriceFixing",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuMealTypeMapping_mealTypeId",
                schema: "OSales",
                table: "MenuMealTypeMapping",
                column: "mealTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MenuMealTypeMapping_salesMenuId",
                schema: "OSales",
                table: "MenuMealTypeMapping",
                column: "salesMenuId");

            migrationBuilder.CreateIndex(
                name: "IX_RelSupplierCustomerResourse_LeadsId",
                schema: "OSales",
                table: "RelSupplierCustomerResourse",
                column: "LeadsId");

            migrationBuilder.CreateIndex(
                name: "IX_RelSupplierCustomerResourse_distributorTypeId",
                schema: "OSales",
                table: "RelSupplierCustomerResourse",
                column: "distributorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_RelSupplierCustomerResourse_ledgerId",
                schema: "OSales",
                table: "RelSupplierCustomerResourse",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_RelSupplierCustomerResourse_organizationId",
                schema: "OSales",
                table: "RelSupplierCustomerResourse",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_RelSupplierCustomerResourse_resourceId",
                schema: "OSales",
                table: "RelSupplierCustomerResourse",
                column: "resourceId");

            migrationBuilder.CreateIndex(
                name: "IX_RelSupplierCustomerResourse_roleTypeId",
                schema: "OSales",
                table: "RelSupplierCustomerResourse",
                column: "roleTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_bankInfoId",
                schema: "OSales",
                table: "SalesCollection",
                column: "bankInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_cardTypeId",
                schema: "OSales",
                table: "SalesCollection",
                column: "cardTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_companyId",
                schema: "OSales",
                table: "SalesCollection",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_paymentModeId",
                schema: "OSales",
                table: "SalesCollection",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_relSupplierCustomerResourseId",
                schema: "OSales",
                table: "SalesCollection",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_salesInvoiceMasterId",
                schema: "OSales",
                table: "SalesCollection",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_storeId",
                schema: "OSales",
                table: "SalesCollection",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_walletTypeId",
                schema: "OSales",
                table: "SalesCollection",
                column: "walletTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollectionBillInfo_relSupplierCustomerResourseId",
                schema: "OSales",
                table: "SalesCollectionBillInfo",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollectionBillInfo_salesInvoiceMasterId",
                schema: "OSales",
                table: "SalesCollectionBillInfo",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollectionDetail_salesCollectionBillInfoId",
                schema: "OSales",
                table: "SalesCollectionDetail",
                column: "salesCollectionBillInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollectionDetail_salesCollectionId",
                schema: "OSales",
                table: "SalesCollectionDetail",
                column: "salesCollectionId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceDetail_itemPriceFixingId",
                schema: "OSales",
                table: "SalesInvoiceDetail",
                column: "itemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceDetail_itemSpecicationId",
                schema: "OSales",
                table: "SalesInvoiceDetail",
                column: "itemSpecicationId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceDetail_patientServiceDetailsId",
                schema: "OSales",
                table: "SalesInvoiceDetail",
                column: "patientServiceDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceDetail_rentInvoiceDetailId",
                schema: "OSales",
                table: "SalesInvoiceDetail",
                column: "rentInvoiceDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceDetail_salesInvoiceMasterId",
                schema: "OSales",
                table: "SalesInvoiceDetail",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceMaster_countryId",
                schema: "OSales",
                table: "SalesInvoiceMaster",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceMaster_leadsId",
                schema: "OSales",
                table: "SalesInvoiceMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceMaster_relSupplierCustomerResourseId",
                schema: "OSales",
                table: "SalesInvoiceMaster",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceMaster_storeId",
                schema: "OSales",
                table: "SalesInvoiceMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesMenu_itemSpecificationId",
                schema: "OSales",
                table: "SalesMenu",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesMenu_salesMenuCategoryId",
                schema: "OSales",
                table: "SalesMenu",
                column: "salesMenuCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesMenuOpeningBalance_itemSpecificationId",
                schema: "OSales",
                table: "SalesMenuOpeningBalance",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnInvoiceDetail_itemPriceFixingId",
                schema: "OSales",
                table: "SalesReturnInvoiceDetail",
                column: "itemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnInvoiceDetail_salesInvoiceDetailId",
                schema: "OSales",
                table: "SalesReturnInvoiceDetail",
                column: "salesInvoiceDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnInvoiceDetail_salesReturnInvoiceMasterId",
                schema: "OSales",
                table: "SalesReturnInvoiceDetail",
                column: "salesReturnInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnInvoiceMaster_companyId",
                schema: "OSales",
                table: "SalesReturnInvoiceMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnInvoiceMaster_relSupplierCustomerResourseId",
                schema: "OSales",
                table: "SalesReturnInvoiceMaster",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesReturnInvoiceMaster_storeId",
                schema: "OSales",
                table: "SalesReturnInvoiceMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesTermsConditions_salesInvoiceMasterId",
                schema: "OSales",
                table: "SalesTermsConditions",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_AdditionalTaxInfo_employeeInfoId",
                schema: "Payroll",
                table: "AdditionalTaxInfo",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_AdditionalTaxInfo_salaryHeadId",
                schema: "Payroll",
                table: "AdditionalTaxInfo",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_AdditionalTaxInfo_taxYearId",
                schema: "Payroll",
                table: "AdditionalTaxInfo",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceAdjustment_employeeInfoId",
                schema: "Payroll",
                table: "AdvanceAdjustment",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceAdjustment_salaryHeadId",
                schema: "Payroll",
                table: "AdvanceAdjustment",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceAdjustment_salaryPeriodId",
                schema: "Payroll",
                table: "AdvanceAdjustment",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvanceAdjustmentDetail_advanceAdjustmentId",
                schema: "Payroll",
                table: "AdvanceAdjustmentDetail",
                column: "advanceAdjustmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AdvancePayment_advanceAdjustmentId",
                schema: "Payroll",
                table: "AdvancePayment",
                column: "advanceAdjustmentId");

            migrationBuilder.CreateIndex(
                name: "IX_BonousStructure_BonousSubCategoryId",
                schema: "Payroll",
                table: "BonousStructure",
                column: "BonousSubCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BonousStructure_calculationPeriodId",
                schema: "Payroll",
                table: "BonousStructure",
                column: "calculationPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_BonousStructure_periodId",
                schema: "Payroll",
                table: "BonousStructure",
                column: "periodId");

            migrationBuilder.CreateIndex(
                name: "IX_BonousStructure_salaryCalulationTypeId",
                schema: "Payroll",
                table: "BonousStructure",
                column: "salaryCalulationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BonousSubCategory_bonousCategoryId",
                schema: "Payroll",
                table: "BonousSubCategory",
                column: "bonousCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BranchWiseSalaryLock_hrBranchId",
                schema: "Payroll",
                table: "BranchWiseSalaryLock",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_BranchWiseSalaryLock_periodId",
                schema: "Payroll",
                table: "BranchWiseSalaryLock",
                column: "periodId");

            migrationBuilder.CreateIndex(
                name: "IX_BranchWiseSalaryLock_zoneId",
                schema: "Payroll",
                table: "BranchWiseSalaryLock",
                column: "zoneId");

            migrationBuilder.CreateIndex(
                name: "IX_CarLoan_employeeInfoId",
                schema: "Payroll",
                table: "CarLoan",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_CarLoan_salaryGradeId",
                schema: "Payroll",
                table: "CarLoan",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_CarLoan_salaryHeadId",
                schema: "Payroll",
                table: "CarLoan",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_CarLoan_salaryPeriodId",
                schema: "Payroll",
                table: "CarLoan",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_CarLoanSchedule_PFLoanPaymentId",
                schema: "Payroll",
                table: "CarLoanSchedule",
                column: "PFLoanPaymentId");

            migrationBuilder.CreateIndex(
                name: "IX_CarLoanSchedule_carLoanID",
                schema: "Payroll",
                table: "CarLoanSchedule",
                column: "carLoanID");

            migrationBuilder.CreateIndex(
                name: "IX_CarMaintenance_employeeInfoId",
                schema: "Payroll",
                table: "CarMaintenance",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_CarMaintenance_salaryPeriodId",
                schema: "Payroll",
                table: "CarMaintenance",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_CodeManagement_employeeInfoId",
                schema: "Payroll",
                table: "CodeManagement",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_CodeManagement_salaryHeadId",
                schema: "Payroll",
                table: "CodeManagement",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_CodeManagement_salaryPeriodId",
                schema: "Payroll",
                table: "CodeManagement",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_EmpAttendanceSummary_employeeInfoId",
                schema: "Payroll",
                table: "EmpAttendanceSummary",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmpAttendanceSummary_salaryPeriodId",
                schema: "Payroll",
                table: "EmpAttendanceSummary",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeArrear_employeeInfoId",
                schema: "Payroll",
                table: "EmployeeArrear",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeArrear_salaryHeadId",
                schema: "Payroll",
                table: "EmployeeArrear",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeArrear_salaryPeriodId",
                schema: "Payroll",
                table: "EmployeeArrear",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeArrearInfo_employeeId",
                schema: "Payroll",
                table: "EmployeeArrearInfo",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeArrearInfo_periodId",
                schema: "Payroll",
                table: "EmployeeArrearInfo",
                column: "periodId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalaryPosting_employeeId",
                schema: "Payroll",
                table: "EmployeeSalaryPosting",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalaryPosting_salaryHeadId",
                schema: "Payroll",
                table: "EmployeeSalaryPosting",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeSalaryPosting_salaryVoucherDetailsId",
                schema: "Payroll",
                table: "EmployeeSalaryPosting",
                column: "salaryVoucherDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesArrearStructure_arrearMasterId",
                schema: "Payroll",
                table: "EmployeesArrearStructure",
                column: "arrearMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesArrearStructure_employeeInfoId",
                schema: "Payroll",
                table: "EmployeesArrearStructure",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesArrearStructure_salaryHeadId",
                schema: "Payroll",
                table: "EmployeesArrearStructure",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesArrearStructure_salarySlabId",
                schema: "Payroll",
                table: "EmployeesArrearStructure",
                column: "salarySlabId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesBonusStructure_bonousStructureId",
                schema: "Payroll",
                table: "EmployeesBonusStructure",
                column: "bonousStructureId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesBonusStructure_employeeInfoId",
                schema: "Payroll",
                table: "EmployeesBonusStructure",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesCashSetup_employeeInfoId",
                schema: "Payroll",
                table: "EmployeesCashSetup",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesSalaryStructure_employeeInfoId",
                schema: "Payroll",
                table: "EmployeesSalaryStructure",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesSalaryStructure_salaryHeadId",
                schema: "Payroll",
                table: "EmployeesSalaryStructure",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesSalaryStructure_salarySlabId",
                schema: "Payroll",
                table: "EmployeesSalaryStructure",
                column: "salarySlabId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesTax_employeeInfoId",
                schema: "Payroll",
                table: "EmployeesTax",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeesTax_taxYearId",
                schema: "Payroll",
                table: "EmployeesTax",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_FinalSettlement_employeeInfoId",
                schema: "Payroll",
                table: "FinalSettlement",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_FinalSettlement_salaryPeriodId",
                schema: "Payroll",
                table: "FinalSettlement",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_FixedTaxEmployees_employeeInfoId",
                schema: "Payroll",
                table: "FixedTaxEmployees",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_FixedTaxEmployees_taxYearId",
                schema: "Payroll",
                table: "FixedTaxEmployees",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_GratiutyProcessData_employeeInfoId",
                schema: "Payroll",
                table: "GratiutyProcessData",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_HomeLoan_employeeInfoId",
                schema: "Payroll",
                table: "HomeLoan",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_HomeLoan_salaryGradeId",
                schema: "Payroll",
                table: "HomeLoan",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_HomeLoan_salaryHeadId",
                schema: "Payroll",
                table: "HomeLoan",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_HomeLoan_salaryPeriodId",
                schema: "Payroll",
                table: "HomeLoan",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_HomeLoanSchedule_PFLoanPaymentId",
                schema: "Payroll",
                table: "HomeLoanSchedule",
                column: "PFLoanPaymentId");

            migrationBuilder.CreateIndex(
                name: "IX_HomeLoanSchedule_homeLoanID",
                schema: "Payroll",
                table: "HomeLoanSchedule",
                column: "homeLoanID");

            migrationBuilder.CreateIndex(
                name: "IX_IncomeTaxSetup_salaryHeadId",
                schema: "Payroll",
                table: "IncomeTaxSetup",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_IncomeTaxSetup_taxYearId",
                schema: "Payroll",
                table: "IncomeTaxSetup",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_InterestNotDeduct_empId",
                schema: "Payroll",
                table: "InterestNotDeduct",
                column: "empId");

            migrationBuilder.CreateIndex(
                name: "IX_InvestmentRebateSettings_taxYearId",
                schema: "Payroll",
                table: "InvestmentRebateSettings",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveWithoutPay_employeeInfoId",
                schema: "Payroll",
                table: "LeaveWithoutPay",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_LeaveWithoutPay_salaryPeriodId",
                schema: "Payroll",
                table: "LeaveWithoutPay",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_LfaInfo_employeeInfoId",
                schema: "Payroll",
                table: "LfaInfo",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_LfaInfo_salaryPeriodId",
                schema: "Payroll",
                table: "LfaInfo",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanLog_loanId",
                schema: "Payroll",
                table: "LoanLog",
                column: "loanId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanPolicy_salaryGradeId",
                schema: "Payroll",
                table: "LoanPolicy",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanPolicy_salaryHeadId",
                schema: "Payroll",
                table: "LoanPolicy",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanRoute_employeeId",
                schema: "Payroll",
                table: "LoanRoute",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanRoute_loanScheduleMasterId",
                schema: "Payroll",
                table: "LoanRoute",
                column: "loanScheduleMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanScheduleDetail_loanScheduleMasterId",
                schema: "Payroll",
                table: "LoanScheduleDetail",
                column: "loanScheduleMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanScheduleMaster_employeeInfoId",
                schema: "Payroll",
                table: "LoanScheduleMaster",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_LoanScheduleMaster_loanPolicyId",
                schema: "Payroll",
                table: "LoanScheduleMaster",
                column: "loanPolicyId");

            migrationBuilder.CreateIndex(
                name: "IX_MobileAllowanceStructure_employeeInfoId",
                schema: "Payroll",
                table: "MobileAllowanceStructure",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_MobileAllowanceStructure_salaryPeriodId",
                schema: "Payroll",
                table: "MobileAllowanceStructure",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_MonthlyAllowance_employeeInfoId",
                schema: "Payroll",
                table: "MonthlyAllowance",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_MonthlyAllowance_salaryHeadId",
                schema: "Payroll",
                table: "MonthlyAllowance",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_MonthlyAllowance_salaryPeriodId",
                schema: "Payroll",
                table: "MonthlyAllowance",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_PartialSalaryLog_employeeInfoId",
                schema: "Payroll",
                table: "PartialSalaryLog",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_PartialSalaryLog_salaryPeriodId",
                schema: "Payroll",
                table: "PartialSalaryLog",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoan_employeeInfoId",
                schema: "Payroll",
                table: "PFLoan",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoan_salaryGradeId",
                schema: "Payroll",
                table: "PFLoan",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoan_salaryHeadId",
                schema: "Payroll",
                table: "PFLoan",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoan_salaryPeriodId",
                schema: "Payroll",
                table: "PFLoan",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoanPayment_employeeInfoId",
                schema: "Payroll",
                table: "PFLoanPayment",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoanPayment_pFLoanId",
                schema: "Payroll",
                table: "PFLoanPayment",
                column: "pFLoanId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoanSchedule_PFLoanPaymentId",
                schema: "Payroll",
                table: "PFLoanSchedule",
                column: "PFLoanPaymentId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoanSchedule_pFLoanId",
                schema: "Payroll",
                table: "PFLoanSchedule",
                column: "pFLoanId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoanSchedule_staffLoanId",
                schema: "Payroll",
                table: "PFLoanSchedule",
                column: "staffLoanId");

            migrationBuilder.CreateIndex(
                name: "IX_PFSalaryContribution_employeeId",
                schema: "Payroll",
                table: "PFSalaryContribution",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmployeesMobileAndCarAllowance_employeeInfoId",
                schema: "Payroll",
                table: "ProcessEmployeesMobileAndCarAllowance",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmployeesMobileAndCarAllowance_salaryPeriodId",
                schema: "Payroll",
                table: "ProcessEmployeesMobileAndCarAllowance",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryMaster_employeeInfoId",
                schema: "Payroll",
                table: "ProcessEmpSalaryMaster",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryMaster_salaryPeriodId",
                schema: "Payroll",
                table: "ProcessEmpSalaryMaster",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_departmentId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_designationId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_employeeInfoId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_hrBranchId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_hrDivisionId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "hrDivisionId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_hrUnitId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "hrUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_officeId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "officeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_salaryHeadId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_salaryPeriodId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessEmpSalaryStructure_zoneId",
                schema: "Payroll",
                table: "ProcessEmpSalaryStructure",
                column: "zoneId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessSalaryRemarks_employeeInfoId",
                schema: "Payroll",
                table: "ProcessSalaryRemarks",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ProcessSalaryRemarks_salaryPeriodId",
                schema: "Payroll",
                table: "ProcessSalaryRemarks",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryActivityPercent_employeeInfoId",
                schema: "Payroll",
                table: "SalaryActivityPercent",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryActivityPercent_employeeProjectActivityId",
                schema: "Payroll",
                table: "SalaryActivityPercent",
                column: "employeeProjectActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryGradePercent_salaryCalulationTypeId",
                schema: "Payroll",
                table: "SalaryGradePercent",
                column: "salaryCalulationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryGradePercent_salaryGradeId",
                schema: "Payroll",
                table: "SalaryGradePercent",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryGradePercent_salaryHeadId",
                schema: "Payroll",
                table: "SalaryGradePercent",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryPeriod_bonusTypeId",
                schema: "Payroll",
                table: "SalaryPeriod",
                column: "bonusTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryPeriod_salaryTypeId",
                schema: "Payroll",
                table: "SalaryPeriod",
                column: "salaryTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryPeriod_salaryYearId",
                schema: "Payroll",
                table: "SalaryPeriod",
                column: "salaryYearId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryPeriod_taxYearId",
                schema: "Payroll",
                table: "SalaryPeriod",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryProcessLog_salaryPeriodId",
                schema: "Payroll",
                table: "SalaryProcessLog",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_SalarySlab_salaryGradeId",
                schema: "Payroll",
                table: "SalarySlab",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryStatusLog_salaryPeriodId",
                schema: "Payroll",
                table: "SalaryStatusLog",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryStructureHistory_employeeInfoId",
                schema: "Payroll",
                table: "SalaryStructureHistory",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryStructureHistory_salaryHeadId",
                schema: "Payroll",
                table: "SalaryStructureHistory",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryStructureHistory_salarySlabId",
                schema: "Payroll",
                table: "SalaryStructureHistory",
                column: "salarySlabId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherDetails_voucherMasterId",
                schema: "Payroll",
                table: "SalaryVoucherDetails",
                column: "voucherMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherMaster_departmentId",
                schema: "Payroll",
                table: "SalaryVoucherMaster",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherMaster_divisionId",
                schema: "Payroll",
                table: "SalaryVoucherMaster",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherMaster_hrBranchId",
                schema: "Payroll",
                table: "SalaryVoucherMaster",
                column: "hrBranchId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherMaster_hrUnitId",
                schema: "Payroll",
                table: "SalaryVoucherMaster",
                column: "hrUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherMaster_officeId",
                schema: "Payroll",
                table: "SalaryVoucherMaster",
                column: "officeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherMaster_salaryPeriodId",
                schema: "Payroll",
                table: "SalaryVoucherMaster",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_SalaryVoucherMaster_zoneId",
                schema: "Payroll",
                table: "SalaryVoucherMaster",
                column: "zoneId");

            migrationBuilder.CreateIndex(
                name: "IX_SlabIncomeTax_slabTypeId",
                schema: "Payroll",
                table: "SlabIncomeTax",
                column: "slabTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SlabIncomeTax_taxYearId",
                schema: "Payroll",
                table: "SlabIncomeTax",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_SlabIncomeTaxAssign_employeeInfoId",
                schema: "Payroll",
                table: "SlabIncomeTaxAssign",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_SlabIncomeTaxAssign_slabTypeId",
                schema: "Payroll",
                table: "SlabIncomeTaxAssign",
                column: "slabTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SlabRebate_slabTypeId",
                schema: "Payroll",
                table: "SlabRebate",
                column: "slabTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_SlabRebate_taxYearId",
                schema: "Payroll",
                table: "SlabRebate",
                column: "taxYearId");

            migrationBuilder.CreateIndex(
                name: "IX_SpecialBonusEmp_branchId",
                schema: "Payroll",
                table: "SpecialBonusEmp",
                column: "branchId");

            migrationBuilder.CreateIndex(
                name: "IX_SpecialBonusEmp_designationId",
                schema: "Payroll",
                table: "SpecialBonusEmp",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_SpecialBonusEmp_zoneId",
                schema: "Payroll",
                table: "SpecialBonusEmp",
                column: "zoneId");

            migrationBuilder.CreateIndex(
                name: "IX_StaffLoan_designationId",
                schema: "Payroll",
                table: "StaffLoan",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_StaffLoan_employeeInfoId",
                schema: "Payroll",
                table: "StaffLoan",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_StaffLoan_salaryGradeId",
                schema: "Payroll",
                table: "StaffLoan",
                column: "salaryGradeId");

            migrationBuilder.CreateIndex(
                name: "IX_StaffLoan_salaryHeadId",
                schema: "Payroll",
                table: "StaffLoan",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_StaffLoan_salaryPeriodId",
                schema: "Payroll",
                table: "StaffLoan",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_StaffLoanLog_staffLoanId",
                schema: "Payroll",
                table: "StaffLoanLog",
                column: "staffLoanId");

            migrationBuilder.CreateIndex(
                name: "IX_StaffLoanSchedule_staffLoanId",
                schema: "Payroll",
                table: "StaffLoanSchedule",
                column: "staffLoanId");

            migrationBuilder.CreateIndex(
                name: "IX_TaxChallan_salaryPeriodId",
                schema: "Payroll",
                table: "TaxChallan",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesProcessEmpSalaryMaster_employeeInfoId",
                schema: "Payroll",
                table: "WagesProcessEmpSalaryMaster",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesProcessEmpSalaryMaster_salaryPeriodId",
                schema: "Payroll",
                table: "WagesProcessEmpSalaryMaster",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesProcessEmpSalaryStructure_employeeInfoId",
                schema: "Payroll",
                table: "WagesProcessEmpSalaryStructure",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesProcessEmpSalaryStructure_salaryHeadId",
                schema: "Payroll",
                table: "WagesProcessEmpSalaryStructure",
                column: "salaryHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_WagesProcessEmpSalaryStructure_salaryPeriodId",
                schema: "Payroll",
                table: "WagesProcessEmpSalaryStructure",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_ForfeitAccount_employeeId",
                schema: "PF",
                table: "ForfeitAccount",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ForfeitAccount_pfId",
                schema: "PF",
                table: "ForfeitAccount",
                column: "pfId");

            migrationBuilder.CreateIndex(
                name: "IX_PfAccountDetails_employeeId",
                schema: "PF",
                table: "PfAccountDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PfAccountDetails_pfId",
                schema: "PF",
                table: "PfAccountDetails",
                column: "pfId");

            migrationBuilder.CreateIndex(
                name: "IX_PfAccountsSchedule_employeeId",
                schema: "PF",
                table: "PfAccountsSchedule",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PfAccountsSchedule_pfMemberId",
                schema: "PF",
                table: "PfAccountsSchedule",
                column: "pfMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_PFContribution_pfmemberId",
                schema: "PF",
                table: "PFContribution",
                column: "pfmemberId");

            migrationBuilder.CreateIndex(
                name: "IX_PfFinalSettlement_pfMemberId",
                schema: "PF",
                table: "PfFinalSettlement",
                column: "pfMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_PFLoanManagement_pfmemberId",
                schema: "PF",
                table: "PFLoanManagement",
                column: "pfmemberId");

            migrationBuilder.CreateIndex(
                name: "IX_PFMemberInfo_departmentId",
                schema: "PF",
                table: "PFMemberInfo",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_PFMemberInfo_designationId",
                schema: "PF",
                table: "PFMemberInfo",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_PFMemberInfo_employeeInfoId",
                schema: "PF",
                table: "PFMemberInfo",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_PFMemberInfo_employeeStatusId",
                schema: "PF",
                table: "PFMemberInfo",
                column: "employeeStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_PFMemberInfo_memberTypeId",
                schema: "PF",
                table: "PFMemberInfo",
                column: "memberTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PfTransaction_employeeId",
                schema: "PF",
                table: "PfTransaction",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PfTransaction_pfMemberId",
                schema: "PF",
                table: "PfTransaction",
                column: "pfMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_PfTransaction_salaryPeriodId",
                schema: "PF",
                table: "PfTransaction",
                column: "salaryPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_PfTransaction_yearId",
                schema: "PF",
                table: "PfTransaction",
                column: "yearId");

            migrationBuilder.CreateIndex(
                name: "IX_PFVoucherDetails_employeeId",
                schema: "PF",
                table: "PFVoucherDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_PFVoucherDetails_pfMemberId",
                schema: "PF",
                table: "PFVoucherDetails",
                column: "pfMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_PFVoucherDetails_pfVoucherTypeId",
                schema: "PF",
                table: "PFVoucherDetails",
                column: "pfVoucherTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramActivity_ProgramOutPutId",
                schema: "PM",
                table: "ProgramActivity",
                column: "ProgramOutPutId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramActivity_programMasterId",
                schema: "PM",
                table: "ProgramActivity",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramActivityProgres_programActivityId",
                schema: "PM",
                table: "ProgramActivityProgres",
                column: "programActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAddress_programMasterId",
                schema: "PM",
                table: "ProgramAddress",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttachment_programMasterId",
                schema: "PM",
                table: "ProgramAttachment",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_benificiaryActiveTypeId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "benificiaryActiveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_benificiaryTypeId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "benificiaryTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_dateRangeId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "dateRangeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_genderId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "genderId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_idTypeId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "idTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_peopleTypeId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "peopleTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_programActivityId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "programActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramAttendee_programMasterId",
                schema: "PM",
                table: "ProgramAttendee",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramCategory_programMainCategoryId",
                schema: "PM",
                table: "ProgramCategory",
                column: "programMainCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramHeadline_programMasterId",
                schema: "PM",
                table: "ProgramHeadline",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramImplementor_programMasterId",
                schema: "PM",
                table: "ProgramImplementor",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramIndicator_programMasterId",
                schema: "PM",
                table: "ProgramIndicator",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramIndicator_programOutPutId",
                schema: "PM",
                table: "ProgramIndicator",
                column: "programOutPutId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramLocation_programMasterId",
                schema: "PM",
                table: "ProgramLocation",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramMaster_districtId",
                schema: "PM",
                table: "ProgramMaster",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramMaster_divisionId",
                schema: "PM",
                table: "ProgramMaster",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramMaster_programCategoryId",
                schema: "PM",
                table: "ProgramMaster",
                column: "programCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramMaster_programImpactId",
                schema: "PM",
                table: "ProgramMaster",
                column: "programImpactId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramMaster_programYearId",
                schema: "PM",
                table: "ProgramMaster",
                column: "programYearId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramMaster_thanaId",
                schema: "PM",
                table: "ProgramMaster",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutCome_programMasterId",
                schema: "PM",
                table: "ProgramOutCome",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutCome_programStatusId",
                schema: "PM",
                table: "ProgramOutCome",
                column: "programStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutComeProgres_programOutComeId",
                schema: "PM",
                table: "ProgramOutComeProgres",
                column: "programOutComeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutComeProgres_programStatusId",
                schema: "PM",
                table: "ProgramOutComeProgres",
                column: "programStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutPut_programMasterId",
                schema: "PM",
                table: "ProgramOutPut",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutPut_programOutComeId",
                schema: "PM",
                table: "ProgramOutPut",
                column: "programOutComeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutPut_programStatusId",
                schema: "PM",
                table: "ProgramOutPut",
                column: "programStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutPutProgres_programOutPutId",
                schema: "PM",
                table: "ProgramOutPutProgres",
                column: "programOutPutId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramOutPutProgres_programStatusId",
                schema: "PM",
                table: "ProgramOutPutProgres",
                column: "programStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPeopleInDiscussion_programMasterId",
                schema: "PM",
                table: "ProgramPeopleInDiscussion",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlan_districtId",
                schema: "PM",
                table: "ProgramPlan",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlan_divisionId",
                schema: "PM",
                table: "ProgramPlan",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlan_programCategoryId",
                schema: "PM",
                table: "ProgramPlan",
                column: "programCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlan_programYearId",
                schema: "PM",
                table: "ProgramPlan",
                column: "programYearId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlanLocation_districtId",
                schema: "PM",
                table: "ProgramPlanLocation",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlanLocation_divisionId",
                schema: "PM",
                table: "ProgramPlanLocation",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlanLocation_programActivityId",
                schema: "PM",
                table: "ProgramPlanLocation",
                column: "programActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlanLocation_programYearId",
                schema: "PM",
                table: "ProgramPlanLocation",
                column: "programYearId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramPlanLocation_thanaId",
                schema: "PM",
                table: "ProgramPlanLocation",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramSourceFund_programMasterId",
                schema: "PM",
                table: "ProgramSourceFund",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramSourceFundApprove_programMasterId",
                schema: "PM",
                table: "ProgramSourceFundApprove",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramSubject_programMasterId",
                schema: "PM",
                table: "ProgramSubject",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramViewer_programMasterId",
                schema: "PM",
                table: "ProgramViewer",
                column: "programMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramWorkPlan_programActivityId",
                schema: "PM",
                table: "ProgramWorkPlan",
                column: "programActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_ProgramWorkPlan_programYearId",
                schema: "PM",
                table: "ProgramWorkPlan",
                column: "programYearId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemPriceFixing_itemSpecificationId",
                schema: "POS",
                table: "ItemPriceFixing",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_OfferDetails_itemPriceFixingId",
                schema: "POS",
                table: "OfferDetails",
                column: "itemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_OfferDetails_offerMasterId",
                schema: "POS",
                table: "OfferDetails",
                column: "offerMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosBillReturnPaymentDetail_billReturnPaymentMasterId",
                schema: "POS",
                table: "PosBillReturnPaymentDetail",
                column: "billReturnPaymentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosBillReturnPaymentDetail_salesReturnInvoiceMasterId",
                schema: "POS",
                table: "PosBillReturnPaymentDetail",
                column: "salesReturnInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosBillReturnPaymentMaster_PosCustomerId",
                schema: "POS",
                table: "PosBillReturnPaymentMaster",
                column: "PosCustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_PosBillReturnPaymentMaster_companyId",
                schema: "POS",
                table: "PosBillReturnPaymentMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_PosBillReturnPaymentMaster_paymentModeId",
                schema: "POS",
                table: "PosBillReturnPaymentMaster",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosBillReturnPaymentMaster_storeId",
                schema: "POS",
                table: "PosBillReturnPaymentMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionDetail_posCollectionMasterId",
                schema: "POS",
                table: "PosCollectionDetail",
                column: "posCollectionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionDetail_posInvoiceMasterId",
                schema: "POS",
                table: "PosCollectionDetail",
                column: "posInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionMaster_bankInfoId",
                schema: "POS",
                table: "PosCollectionMaster",
                column: "bankInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionMaster_cardTypeId",
                schema: "POS",
                table: "PosCollectionMaster",
                column: "cardTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionMaster_companyId",
                schema: "POS",
                table: "PosCollectionMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionMaster_mobileBankingTypeId",
                schema: "POS",
                table: "PosCollectionMaster",
                column: "mobileBankingTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionMaster_paymentModeId",
                schema: "POS",
                table: "PosCollectionMaster",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionMaster_posCustomerId",
                schema: "POS",
                table: "PosCollectionMaster",
                column: "posCustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_PosCollectionMaster_storeId",
                schema: "POS",
                table: "PosCollectionMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosInvoiceDetail_itemPriceFixingId",
                schema: "POS",
                table: "PosInvoiceDetail",
                column: "itemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_PosInvoiceDetail_posInvoiceMasterId",
                schema: "POS",
                table: "PosInvoiceDetail",
                column: "posInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosInvoiceMaster_posCustomerId",
                schema: "POS",
                table: "PosInvoiceMaster",
                column: "posCustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_PosInvoiceMaster_storeId",
                schema: "POS",
                table: "PosInvoiceMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosRepInvoiceDetail_itemPriceFixingId",
                schema: "POS",
                table: "PosRepInvoiceDetail",
                column: "itemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_PosRepInvoiceDetail_posRepInvoiceMasterId",
                schema: "POS",
                table: "PosRepInvoiceDetail",
                column: "posRepInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosRepInvoiceMaster_posCustomerId",
                schema: "POS",
                table: "PosRepInvoiceMaster",
                column: "posCustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_PosRepInvoiceMaster_storeId",
                schema: "POS",
                table: "PosRepInvoiceMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_PosSalesReturnInvoiceDetail_itemPriceFixingId",
                schema: "POS",
                table: "PosSalesReturnInvoiceDetail",
                column: "itemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_PosSalesReturnInvoiceDetail_salesInvoiceDetailId",
                schema: "POS",
                table: "PosSalesReturnInvoiceDetail",
                column: "salesInvoiceDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_PosSalesReturnInvoiceDetail_salesReturnInvoiceMasterId",
                schema: "POS",
                table: "PosSalesReturnInvoiceDetail",
                column: "salesReturnInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PosSalesReturnInvoiceMaster_companyId",
                schema: "POS",
                table: "PosSalesReturnInvoiceMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_PosSalesReturnInvoiceMaster_posCustomerId",
                schema: "POS",
                table: "PosSalesReturnInvoiceMaster",
                column: "posCustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_PosSalesReturnInvoiceMaster_storeId",
                schema: "POS",
                table: "PosSalesReturnInvoiceMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_Store_storeTypeId",
                schema: "POS",
                table: "Store",
                column: "storeTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_bOMMasterId",
                schema: "PROD",
                table: "BOMDetails",
                column: "bOMMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMDetails_itemSpecificationId",
                schema: "PROD",
                table: "BOMDetails",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMMasters_itemSpecificationId",
                schema: "PROD",
                table: "BOMMasters",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMOverheadDetail_bOMMasterId",
                schema: "PROD",
                table: "BOMOverheadDetail",
                column: "bOMMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMOverheadDetail_ledgerId",
                schema: "PROD",
                table: "BOMOverheadDetail",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_BOMOverheadDetail_overheadCostId",
                schema: "PROD",
                table: "BOMOverheadDetail",
                column: "overheadCostId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionBatchs_productionPlanId",
                schema: "PROD",
                table: "ProductionBatchs",
                column: "productionPlanId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionDetails_bOMDetailId",
                schema: "PROD",
                table: "ProductionDetails",
                column: "bOMDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionDetails_productionId",
                schema: "PROD",
                table: "ProductionDetails",
                column: "productionId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionMasters_bOMId",
                schema: "PROD",
                table: "ProductionMasters",
                column: "bOMId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionMasters_batchId",
                schema: "PROD",
                table: "ProductionMasters",
                column: "batchId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionMasters_supplierId",
                schema: "PROD",
                table: "ProductionMasters",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPlans_bOMMasterId",
                schema: "PROD",
                table: "ProductionPlans",
                column: "bOMMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionRequsitionDetails_BOMDetailId",
                schema: "PROD",
                table: "ProductionRequsitionDetails",
                column: "BOMDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionRequsitionDetails_productionRequsitionMasterId",
                schema: "PROD",
                table: "ProductionRequsitionDetails",
                column: "productionRequsitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionRequsitionMasters_productionBatchId",
                schema: "PROD",
                table: "ProductionRequsitionMasters",
                column: "productionBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionRequsitionMasters_productionPlanId",
                schema: "PROD",
                table: "ProductionRequsitionMasters",
                column: "productionPlanId");

            migrationBuilder.CreateIndex(
                name: "IX_BillPaymentDetail_billPaymentMasterId",
                schema: "Purchase",
                table: "BillPaymentDetail",
                column: "billPaymentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BillPaymentDetail_billReceiveInformationId",
                schema: "Purchase",
                table: "BillPaymentDetail",
                column: "billReceiveInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_BillPaymentMaster_companyId",
                schema: "Purchase",
                table: "BillPaymentMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_BillPaymentMaster_paymentModeId",
                schema: "Purchase",
                table: "BillPaymentMaster",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_BillPaymentMaster_relSupplierCustomerResourseId",
                schema: "Purchase",
                table: "BillPaymentMaster",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReceiveInformation_paymentModeId",
                schema: "Purchase",
                table: "BillReceiveInformation",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReceiveInformation_purchaseOrderMasterId",
                schema: "Purchase",
                table: "BillReceiveInformation",
                column: "purchaseOrderMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_BillReceiveInformation_relSupplierCustomerResourseId",
                schema: "Purchase",
                table: "BillReceiveInformation",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrdersDetails_currencyId",
                schema: "Purchase",
                table: "PurchaseOrdersDetails",
                column: "currencyId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrdersDetails_itemSpecificationId",
                schema: "Purchase",
                table: "PurchaseOrdersDetails",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrdersDetails_purchaseId",
                schema: "Purchase",
                table: "PurchaseOrdersDetails",
                column: "purchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrdersMasters_relSupplierCustomerResourseId",
                schema: "Purchase",
                table: "PurchaseOrdersMasters",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnInfoDetail_purchaseOrdersDetailId",
                schema: "Purchase",
                table: "PurchaseReturnInfoDetail",
                column: "purchaseOrdersDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnInfoDetail_purchaseReturnInfoMasterId",
                schema: "Purchase",
                table: "PurchaseReturnInfoDetail",
                column: "purchaseReturnInfoMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnInfoMaster_companyId",
                schema: "Purchase",
                table: "PurchaseReturnInfoMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnInfoMaster_purchaseOrdersMasterId",
                schema: "Purchase",
                table: "PurchaseReturnInfoMaster",
                column: "purchaseOrdersMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnInfoMaster_relSupplierCustomerResourseId",
                schema: "Purchase",
                table: "PurchaseReturnInfoMaster",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseReturnInfoMaster_storeId",
                schema: "Purchase",
                table: "PurchaseReturnInfoMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAddress_addressCategoryId",
                schema: "Purchase",
                table: "StoreAddress",
                column: "addressCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAddress_countryId",
                schema: "Purchase",
                table: "StoreAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAddress_districtId",
                schema: "Purchase",
                table: "StoreAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAddress_divisionId",
                schema: "Purchase",
                table: "StoreAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAddress_storeId",
                schema: "Purchase",
                table: "StoreAddress",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAddress_thanaId",
                schema: "Purchase",
                table: "StoreAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAssign_aspnetuserId",
                schema: "Purchase",
                table: "StoreAssign",
                column: "aspnetuserId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreAssign_storeId",
                schema: "Purchase",
                table: "StoreAssign",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreContact_storeId",
                schema: "Purchase",
                table: "StoreContact",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferDetail_itemSpecificationId",
                schema: "Purchase",
                table: "TransferDetail",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferDetail_transferMasterId",
                schema: "Purchase",
                table: "TransferDetail",
                column: "transferMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferMaster_companyId",
                schema: "Purchase",
                table: "TransferMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferMaster_storeFromId",
                schema: "Purchase",
                table: "TransferMaster",
                column: "storeFromId");

            migrationBuilder.CreateIndex(
                name: "IX_TransferMaster_storeToId",
                schema: "Purchase",
                table: "TransferMaster",
                column: "storeToId");

            migrationBuilder.CreateIndex(
                name: "IX_CandidateInfo_jobReqId",
                schema: "RCRT",
                table: "CandidateInfo",
                column: "jobReqId");

            migrationBuilder.CreateIndex(
                name: "IX_CandidatePhoto_candidateId",
                schema: "RCRT",
                table: "CandidatePhoto",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_InterviewCalling_candidateInfoId",
                schema: "RCRT",
                table: "InterviewCalling",
                column: "candidateInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_InterviewCalling_jobPostId",
                schema: "RCRT",
                table: "InterviewCalling",
                column: "jobPostId");

            migrationBuilder.CreateIndex(
                name: "IX_InterviewCalling_jobRequisitionId",
                schema: "RCRT",
                table: "InterviewCalling",
                column: "jobRequisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_JobPost_jobReqId",
                schema: "RCRT",
                table: "JobPost",
                column: "jobReqId");

            migrationBuilder.CreateIndex(
                name: "IX_JobRequisition_departmentId",
                schema: "RCRT",
                table: "JobRequisition",
                column: "departmentId");

            migrationBuilder.CreateIndex(
                name: "IX_JobRequisition_designationId",
                schema: "RCRT",
                table: "JobRequisition",
                column: "designationId");

            migrationBuilder.CreateIndex(
                name: "IX_JobRequisition_jobSourceId",
                schema: "RCRT",
                table: "JobRequisition",
                column: "jobSourceId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTAddress_candidateId",
                schema: "RCRT",
                table: "RCRTAddress",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTAddress_countryId",
                schema: "RCRT",
                table: "RCRTAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTAddress_districtId",
                schema: "RCRT",
                table: "RCRTAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTAddress_divisionId",
                schema: "RCRT",
                table: "RCRTAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTAddress_thanaId",
                schema: "RCRT",
                table: "RCRTAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTEducation_candidateId",
                schema: "RCRT",
                table: "RCRTEducation",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTEducation_degreeId",
                schema: "RCRT",
                table: "RCRTEducation",
                column: "degreeId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTEducation_organizationId",
                schema: "RCRT",
                table: "RCRTEducation",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTEducation_reldegreesubjectId",
                schema: "RCRT",
                table: "RCRTEducation",
                column: "reldegreesubjectId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTEducation_resultId",
                schema: "RCRT",
                table: "RCRTEducation",
                column: "resultId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTOtherQualification_candidateId",
                schema: "RCRT",
                table: "RCRTOtherQualification",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTOtherQualification_otherQualificationHeadId",
                schema: "RCRT",
                table: "RCRTOtherQualification",
                column: "otherQualificationHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTOtherQualification_resultId",
                schema: "RCRT",
                table: "RCRTOtherQualification",
                column: "resultId");

            migrationBuilder.CreateIndex(
                name: "IX_RcrtPreviousEmployment_candidateId",
                schema: "RCRT",
                table: "RcrtPreviousEmployment",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RcrtPreviousEmployment_organizationTypeId",
                schema: "RCRT",
                table: "RcrtPreviousEmployment",
                column: "organizationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTProfessionalQualifications_candidateId",
                schema: "RCRT",
                table: "RCRTProfessionalQualifications",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTProfessionalQualifications_qualificationHeadId",
                schema: "RCRT",
                table: "RCRTProfessionalQualifications",
                column: "qualificationHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTProfessionalQualifications_resultId",
                schema: "RCRT",
                table: "RCRTProfessionalQualifications",
                column: "resultId");

            migrationBuilder.CreateIndex(
                name: "IX_RcrtPublication_candidateId",
                schema: "RCRT",
                table: "RcrtPublication",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTTrainingLog_candidateId",
                schema: "RCRT",
                table: "RCRTTrainingLog",
                column: "candidateId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTTrainingLog_countryId",
                schema: "RCRT",
                table: "RCRTTrainingLog",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTTrainingLog_trainingCategoryId",
                schema: "RCRT",
                table: "RCRTTrainingLog",
                column: "trainingCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_RCRTTrainingLog_trainingInstituteId",
                schema: "RCRT",
                table: "RCRTTrainingLog",
                column: "trainingInstituteId");

            migrationBuilder.CreateIndex(
                name: "IX_ResultDetails_ResultMasterId",
                schema: "RCRT",
                table: "ResultDetails",
                column: "ResultMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ResultDetails_examTypeId",
                schema: "RCRT",
                table: "ResultDetails",
                column: "examTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ResultMaster_candidateInfoId",
                schema: "RCRT",
                table: "ResultMaster",
                column: "candidateInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_ResultMaster_jobRequisitionId",
                schema: "RCRT",
                table: "ResultMaster",
                column: "jobRequisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_ClaimAssign_assignTypeId",
                schema: "REMS",
                table: "ClaimAssign",
                column: "assignTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ClaimAssign_claimId",
                schema: "REMS",
                table: "ClaimAssign",
                column: "claimId");

            migrationBuilder.CreateIndex(
                name: "IX_ClaimAssign_organizationId",
                schema: "REMS",
                table: "ClaimAssign",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_ClaimAttachment_claimId",
                schema: "REMS",
                table: "ClaimAttachment",
                column: "claimId");

            migrationBuilder.CreateIndex(
                name: "IX_ClaimBillInformation_claimId",
                schema: "REMS",
                table: "ClaimBillInformation",
                column: "claimId");

            migrationBuilder.CreateIndex(
                name: "IX_ClaimRegister_assetRegistrationId",
                schema: "REMS",
                table: "ClaimRegister",
                column: "assetRegistrationId");

            migrationBuilder.CreateIndex(
                name: "IX_ClaimRegister_statusId",
                schema: "REMS",
                table: "ClaimRegister",
                column: "statusId");

            migrationBuilder.CreateIndex(
                name: "IX_RepairTransactionLog_claimId",
                schema: "REMS",
                table: "RepairTransactionLog",
                column: "claimId");

            migrationBuilder.CreateIndex(
                name: "IX_RepairTransactionLog_statusInfoId",
                schema: "REMS",
                table: "RepairTransactionLog",
                column: "statusInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceDetail_itemPriceFixingId",
                schema: "Rental",
                table: "RentInvoiceDetail",
                column: "itemPriceFixingId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceDetail_itemSpecicationId",
                schema: "Rental",
                table: "RentInvoiceDetail",
                column: "itemSpecicationId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceDetail_salesInvoiceMasterId",
                schema: "Rental",
                table: "RentInvoiceDetail",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceMaster_countryId",
                schema: "Rental",
                table: "RentInvoiceMaster",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceMaster_leadsId",
                schema: "Rental",
                table: "RentInvoiceMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceMaster_relSupplierCustomerResourseId",
                schema: "Rental",
                table: "RentInvoiceMaster",
                column: "relSupplierCustomerResourseId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceMaster_rentInvoiceMasterId",
                schema: "Rental",
                table: "RentInvoiceMaster",
                column: "rentInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RentInvoiceMaster_storeId",
                schema: "Rental",
                table: "RentInvoiceMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_RentTermsConditions_salesInvoiceMasterId",
                schema: "Rental",
                table: "RentTermsConditions",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesCollection_companyId",
                schema: "Sales",
                table: "RepSalesCollection",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesCollection_leadsId",
                schema: "Sales",
                table: "RepSalesCollection",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesCollection_paymentModeId",
                schema: "Sales",
                table: "RepSalesCollection",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesCollection_salesCollectionId",
                schema: "Sales",
                table: "RepSalesCollection",
                column: "salesCollectionId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesCollectionDetail_repSalesCollectionId",
                schema: "Sales",
                table: "RepSalesCollectionDetail",
                column: "repSalesCollectionId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesCollectionDetail_salesCollectionDetailId",
                schema: "Sales",
                table: "RepSalesCollectionDetail",
                column: "salesCollectionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesInvoiceDetail_agreementDetailsId",
                schema: "Sales",
                table: "RepSalesInvoiceDetail",
                column: "agreementDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesInvoiceDetail_repSalesInvoiceMasterId",
                schema: "Sales",
                table: "RepSalesInvoiceDetail",
                column: "repSalesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesInvoiceDetail_salesInvoiceDetailId",
                schema: "Sales",
                table: "RepSalesInvoiceDetail",
                column: "salesInvoiceDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesInvoiceMaster_leadsId",
                schema: "Sales",
                table: "RepSalesInvoiceMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_RepSalesInvoiceMaster_salesInvoiceMasterId",
                schema: "Sales",
                table: "RepSalesInvoiceMaster",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_companyId",
                schema: "Sales",
                table: "SalesCollection",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_leadsId",
                schema: "Sales",
                table: "SalesCollection",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollection_paymentModeId",
                schema: "Sales",
                table: "SalesCollection",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollectionDetail_salesCollectionId",
                schema: "Sales",
                table: "SalesCollectionDetail",
                column: "salesCollectionId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesCollectionDetail_salesInvoiceMasterId",
                schema: "Sales",
                table: "SalesCollectionDetail",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceDetail_agreementDetailsId",
                schema: "Sales",
                table: "SalesInvoiceDetail",
                column: "agreementDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceDetail_salesInvoiceMasterId",
                schema: "Sales",
                table: "SalesInvoiceDetail",
                column: "salesInvoiceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SalesInvoiceMaster_leadsId",
                schema: "Sales",
                table: "SalesInvoiceMaster",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityWiseDailyProgressDetails_itemDetialId",
                schema: "SCM",
                table: "ActivityWiseDailyProgressDetails",
                column: "itemDetialId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityWiseDailyProgressDetails_workProgressActivityId",
                schema: "SCM",
                table: "ActivityWiseDailyProgressDetails",
                column: "workProgressActivityId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityWiseItemDetials_activityDetailsId",
                schema: "SCM",
                table: "ActivityWiseItemDetials",
                column: "activityDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityWiseItemDetials_itemSpecificationId",
                schema: "SCM",
                table: "ActivityWiseItemDetials",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_ActivityWiseItemDetials_unitId",
                schema: "SCM",
                table: "ActivityWiseItemDetials",
                column: "unitId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_addressTypeId",
                schema: "SCM",
                table: "Address",
                column: "addressTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_countryId",
                schema: "SCM",
                table: "Address",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_districtId",
                schema: "SCM",
                table: "Address",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_divisionId",
                schema: "SCM",
                table: "Address",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_organizationId",
                schema: "SCM",
                table: "Address",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_Address_thanaId",
                schema: "SCM",
                table: "Address",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleBodySubTypeId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleBodySubTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleBodyTypeId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleBodyTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleGroupId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleManufactureId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleManufactureId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleModelId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleModelId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleOwnershipId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleOwnershipId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleStatusId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_Ambulance_vehicleTypeId",
                schema: "SCM",
                table: "Ambulance",
                column: "vehicleTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalLog_matrixTypeId",
                schema: "SCM",
                table: "ApprovalLog",
                column: "matrixTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMatrix_approverTypeId",
                schema: "SCM",
                table: "ApprovalMatrix",
                column: "approverTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMatrix_matrixTypeId",
                schema: "SCM",
                table: "ApprovalMatrix",
                column: "matrixTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMatrix_projectId",
                schema: "SCM",
                table: "ApprovalMatrix",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMatrixlog_approvalMatrixId",
                schema: "SCM",
                table: "ApprovalMatrixlog",
                column: "approvalMatrixId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMatrixlog_approverTypeId",
                schema: "SCM",
                table: "ApprovalMatrixlog",
                column: "approverTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMatrixlog_matrixTypeId",
                schema: "SCM",
                table: "ApprovalMatrixlog",
                column: "matrixTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalMatrixlog_projectId",
                schema: "SCM",
                table: "ApprovalMatrixlog",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_ApprovalReview_approvalLogID",
                schema: "SCM",
                table: "ApprovalReview",
                column: "approvalLogID");

            migrationBuilder.CreateIndex(
                name: "IX_Bed_cabinId",
                schema: "SCM",
                table: "Bed",
                column: "cabinId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerItemMapping_employeeInfoId",
                schema: "SCM",
                table: "BuyerItemMapping",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_BuyerItemMapping_itemCategoryId",
                schema: "SCM",
                table: "BuyerItemMapping",
                column: "itemCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Cabin_floorId",
                schema: "SCM",
                table: "Cabin",
                column: "floorId");

            migrationBuilder.CreateIndex(
                name: "IX_Contact_organizationId",
                schema: "SCM",
                table: "Contact",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_Contact_resourceId",
                schema: "SCM",
                table: "Contact",
                column: "resourceId");

            migrationBuilder.CreateIndex(
                name: "IX_CSDetail_cSMasterId",
                schema: "SCM",
                table: "CSDetail",
                column: "cSMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_CSDetail_itemCategoryId",
                schema: "SCM",
                table: "CSDetail",
                column: "itemCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_CSDetail_rFQReqDetailPriceId",
                schema: "SCM",
                table: "CSDetail",
                column: "rFQReqDetailPriceId");

            migrationBuilder.CreateIndex(
                name: "IX_CSDetail_requisitionDetailId",
                schema: "SCM",
                table: "CSDetail",
                column: "requisitionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_CSDetail_supplierId",
                schema: "SCM",
                table: "CSDetail",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_CSMaster_procurementTypeId",
                schema: "SCM",
                table: "CSMaster",
                column: "procurementTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_CSMaster_procurementValueId",
                schema: "SCM",
                table: "CSMaster",
                column: "procurementValueId");

            migrationBuilder.CreateIndex(
                name: "IX_CSMaster_rFQMasterId",
                schema: "SCM",
                table: "CSMaster",
                column: "rFQMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_CSMaster_requisitionId",
                schema: "SCM",
                table: "CSMaster",
                column: "requisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProgressReports_ApplicationUserId",
                schema: "SCM",
                table: "DailyProgressReports",
                column: "ApplicationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_DailyProgressReports_projectId",
                schema: "SCM",
                table: "DailyProgressReports",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_DeisbarseDetails_IOUId",
                schema: "SCM",
                table: "DeisbarseDetails",
                column: "IOUId");

            migrationBuilder.CreateIndex(
                name: "IX_DeisbarseDetails_disbarseId",
                schema: "SCM",
                table: "DeisbarseDetails",
                column: "disbarseId");

            migrationBuilder.CreateIndex(
                name: "IX_DeliveryStructure_cSDetailId",
                schema: "SCM",
                table: "DeliveryStructure",
                column: "cSDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentAttachmentDetail_itemSpecificationId",
                schema: "SCM",
                table: "DocumentAttachmentDetail",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentAttachmentDetail_requisitionDetailId",
                schema: "SCM",
                table: "DocumentAttachmentDetail",
                column: "requisitionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_DocumentAttachments_matrixTypeId",
                schema: "SCM",
                table: "DocumentAttachments",
                column: "matrixTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_FeatureItems_itemSpecificationId",
                schema: "SCM",
                table: "FeatureItems",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_Floor_buildingId",
                schema: "SCM",
                table: "Floor",
                column: "buildingId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUDetails_IOUId",
                schema: "SCM",
                table: "IOUDetails",
                column: "IOUId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUDetails_currencyId",
                schema: "SCM",
                table: "IOUDetails",
                column: "currencyId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUDetails_deliveryLocationId",
                schema: "SCM",
                table: "IOUDetails",
                column: "deliveryLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUDetails_requisitionDetailId",
                schema: "SCM",
                table: "IOUDetails",
                column: "requisitionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUMaster_projectId",
                schema: "SCM",
                table: "IOUMaster",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUPayment_IOUId",
                schema: "SCM",
                table: "IOUPayment",
                column: "IOUId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUPayment_iOUPaymentMasterId",
                schema: "SCM",
                table: "IOUPayment",
                column: "iOUPaymentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUPayment_receivebyId",
                schema: "SCM",
                table: "IOUPayment",
                column: "receivebyId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUPayment_statusInfoId",
                schema: "SCM",
                table: "IOUPayment",
                column: "statusInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_IOUPaymentMaster_projectId",
                schema: "SCM",
                table: "IOUPaymentMaster",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_Item_itemTypeId",
                schema: "SCM",
                table: "Item",
                column: "itemTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Item_parentId",
                schema: "SCM",
                table: "Item",
                column: "parentId");

            migrationBuilder.CreateIndex(
                name: "IX_Item_unitId",
                schema: "SCM",
                table: "Item",
                column: "unitId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemCategory_parentId",
                schema: "SCM",
                table: "ItemCategory",
                column: "parentId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemReqDetails_itemReqMasterId",
                schema: "SCM",
                table: "ItemReqDetails",
                column: "itemReqMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemReqDetails_itemspecificationId",
                schema: "SCM",
                table: "ItemReqDetails",
                column: "itemspecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemSpecification_itemId",
                schema: "SCM",
                table: "ItemSpecification",
                column: "itemId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemSpecification_ledgerId",
                schema: "SCM",
                table: "ItemSpecification",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemSpecification_storeId",
                schema: "SCM",
                table: "ItemSpecification",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemSpecification_unitId",
                schema: "SCM",
                table: "ItemSpecification",
                column: "unitId");

            migrationBuilder.CreateIndex(
                name: "IX_JobAssignDetail_jobAssignId",
                schema: "SCM",
                table: "JobAssignDetail",
                column: "jobAssignId");

            migrationBuilder.CreateIndex(
                name: "IX_JobAssignDetail_teamMemberId",
                schema: "SCM",
                table: "JobAssignDetail",
                column: "teamMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_JobAssignMaster_assignTypeId",
                schema: "SCM",
                table: "JobAssignMaster",
                column: "assignTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_JobAssignMaster_requisitionId",
                schema: "SCM",
                table: "JobAssignMaster",
                column: "requisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_JobAssignMaster_teamId",
                schema: "SCM",
                table: "JobAssignMaster",
                column: "teamId");

            migrationBuilder.CreateIndex(
                name: "IX_Justification_cSMasterId",
                schema: "SCM",
                table: "Justification",
                column: "cSMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Justification_justificationTypeId",
                schema: "SCM",
                table: "Justification",
                column: "justificationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MatrixChangeHistory_matrixTypeId",
                schema: "SCM",
                table: "MatrixChangeHistory",
                column: "matrixTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MatrixChangeHistory_requisitionMasterId",
                schema: "SCM",
                table: "MatrixChangeHistory",
                column: "requisitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_OpeningStock_itemSpecificationId",
                schema: "SCM",
                table: "OpeningStock",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_Organization_ledgerId",
                schema: "SCM",
                table: "Organization",
                column: "ledgerId");

            migrationBuilder.CreateIndex(
                name: "IX_PODismissDetails_pODismissId",
                schema: "SCM",
                table: "PODismissDetails",
                column: "pODismissId");

            migrationBuilder.CreateIndex(
                name: "IX_PODismissDetails_purchaseDetailsId",
                schema: "SCM",
                table: "PODismissDetails",
                column: "purchaseDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_PODismissMaster_purchaseId",
                schema: "SCM",
                table: "PODismissMaster",
                column: "purchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_POTermAndCondition_purchaseId",
                schema: "SCM",
                table: "POTermAndCondition",
                column: "purchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PreferableVendors_organizationId",
                schema: "SCM",
                table: "PreferableVendors",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_PreferableVendors_requisitionDetailId",
                schema: "SCM",
                table: "PreferableVendors",
                column: "requisitionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_PrintHistory_cSMasterId",
                schema: "SCM",
                table: "PrintHistory",
                column: "cSMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PrintHistory_iOUId",
                schema: "SCM",
                table: "PrintHistory",
                column: "iOUId");

            migrationBuilder.CreateIndex(
                name: "IX_PrintHistory_iOUPaymentMasterId",
                schema: "SCM",
                table: "PrintHistory",
                column: "iOUPaymentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PrintHistory_matrixTypeId",
                schema: "SCM",
                table: "PrintHistory",
                column: "matrixTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_PrintHistory_purchaseId",
                schema: "SCM",
                table: "PrintHistory",
                column: "purchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PrintHistory_requisitionId",
                schema: "SCM",
                table: "PrintHistory",
                column: "requisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_PrintHistory_stockId",
                schema: "SCM",
                table: "PrintHistory",
                column: "stockId");

            migrationBuilder.CreateIndex(
                name: "IX_Project_specialBranchUnitId",
                schema: "SCM",
                table: "Project",
                column: "specialBranchUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectConstructionLocations_ApplicationUserId",
                schema: "SCM",
                table: "ProjectConstructionLocations",
                column: "ApplicationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectConstructionLocations_projectId",
                schema: "SCM",
                table: "ProjectConstructionLocations",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectGridLocations_projectConstructionLocationId",
                schema: "SCM",
                table: "ProjectGridLocations",
                column: "projectConstructionLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectLocationActivityDetails_progressActivityTypeId",
                schema: "SCM",
                table: "ProjectLocationActivityDetails",
                column: "progressActivityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectLocationActivityDetails_projectGridLocationId",
                schema: "SCM",
                table: "ProjectLocationActivityDetails",
                column: "projectGridLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectLocationActivityDetails_unitId",
                schema: "SCM",
                table: "ProjectLocationActivityDetails",
                column: "unitId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectWiseEquipment_itemSpecificationId",
                schema: "SCM",
                table: "ProjectWiseEquipment",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectWiseEquipment_projectId",
                schema: "SCM",
                table: "ProjectWiseEquipment",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDetails_cSDetailId",
                schema: "SCM",
                table: "PurchaseOrderDetails",
                column: "cSDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDetails_currencyId",
                schema: "SCM",
                table: "PurchaseOrderDetails",
                column: "currencyId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDetails_deliveryLocationId",
                schema: "SCM",
                table: "PurchaseOrderDetails",
                column: "deliveryLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDetails_itemSpecificationId",
                schema: "SCM",
                table: "PurchaseOrderDetails",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDetails_purchaseId",
                schema: "SCM",
                table: "PurchaseOrderDetails",
                column: "purchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderMaster_csMasterId",
                schema: "SCM",
                table: "PurchaseOrderMaster",
                column: "csMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderMaster_deliveryModeId",
                schema: "SCM",
                table: "PurchaseOrderMaster",
                column: "deliveryModeId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderMaster_paymentModeId",
                schema: "SCM",
                table: "PurchaseOrderMaster",
                column: "paymentModeId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderMaster_paymentTermsId",
                schema: "SCM",
                table: "PurchaseOrderMaster",
                column: "paymentTermsId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderMaster_supplierId",
                schema: "SCM",
                table: "PurchaseOrderMaster",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionAssignToTeamLeads_requisitionDetailId",
                schema: "SCM",
                table: "RequisitionAssignToTeamLeads",
                column: "requisitionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionAssignToTeamLeads_requisitionMasterId",
                schema: "SCM",
                table: "RequisitionAssignToTeamLeads",
                column: "requisitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetails_employeeId",
                schema: "SCM",
                table: "RequisitionDetails",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetails_itemSpecificationId",
                schema: "SCM",
                table: "RequisitionDetails",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetails_requisitionMasterId",
                schema: "SCM",
                table: "RequisitionDetails",
                column: "requisitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionDetails_teamMemberId",
                schema: "SCM",
                table: "RequisitionDetails",
                column: "teamMemberId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionMasters_employeeinfoId",
                schema: "SCM",
                table: "RequisitionMasters",
                column: "employeeinfoId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionMasters_fundSourceId",
                schema: "SCM",
                table: "RequisitionMasters",
                column: "fundSourceId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionMasters_projectId",
                schema: "SCM",
                table: "RequisitionMasters",
                column: "projectId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionMasters_statusInfoId",
                schema: "SCM",
                table: "RequisitionMasters",
                column: "statusInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionMasters_teamMasterId",
                schema: "SCM",
                table: "RequisitionMasters",
                column: "teamMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionStatusLogs_requisitionDetailId",
                schema: "SCM",
                table: "RequisitionStatusLogs",
                column: "requisitionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionStatusLogs_requisitionMasterId",
                schema: "SCM",
                table: "RequisitionStatusLogs",
                column: "requisitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQDocumentAttachmentDetail_rFQPriceMasterId",
                schema: "SCM",
                table: "RFQDocumentAttachmentDetail",
                column: "rFQPriceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQPriceMaster_rFQMasterId",
                schema: "SCM",
                table: "RFQPriceMaster",
                column: "rFQMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQPriceMaster_supplierId",
                schema: "SCM",
                table: "RFQPriceMaster",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQReqDetail_rFQMasterId",
                schema: "SCM",
                table: "RFQReqDetail",
                column: "rFQMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQReqDetail_requisitionDetailId",
                schema: "SCM",
                table: "RFQReqDetail",
                column: "requisitionDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQReqDetail_requisitionMasterId",
                schema: "SCM",
                table: "RFQReqDetail",
                column: "requisitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQReqDetailPrice_rFQPriceMasterId",
                schema: "SCM",
                table: "RFQReqDetailPrice",
                column: "rFQPriceMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQReqDetailPrice_rFQReqDetailId",
                schema: "SCM",
                table: "RFQReqDetailPrice",
                column: "rFQReqDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQSupDetail_rFQMasterId",
                schema: "SCM",
                table: "RFQSupDetail",
                column: "rFQMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_RFQSupDetail_supplierId",
                schema: "SCM",
                table: "RFQSupDetail",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_SiteConstraints_progressReportId",
                schema: "SCM",
                table: "SiteConstraints",
                column: "progressReportId");

            migrationBuilder.CreateIndex(
                name: "IX_SiteEquipments_itemSpecificationId",
                schema: "SCM",
                table: "SiteEquipments",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_SiteEquipments_progressReportId",
                schema: "SCM",
                table: "SiteEquipments",
                column: "progressReportId");

            migrationBuilder.CreateIndex(
                name: "IX_SiteManpowers_progressReportId",
                schema: "SCM",
                table: "SiteManpowers",
                column: "progressReportId");

            migrationBuilder.CreateIndex(
                name: "IX_SiteMaterials_itemSpecificationId",
                schema: "SCM",
                table: "SiteMaterials",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_SiteMaterials_progressReportId",
                schema: "SCM",
                table: "SiteMaterials",
                column: "progressReportId");

            migrationBuilder.CreateIndex(
                name: "IX_SiteVisitors_progressReportId",
                schema: "SCM",
                table: "SiteVisitors",
                column: "progressReportId");

            migrationBuilder.CreateIndex(
                name: "IX_SpecificationCategory_itemCategoryId",
                schema: "SCM",
                table: "SpecificationCategory",
                column: "itemCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_SpecificationDetail_itemSpecificationId",
                schema: "SCM",
                table: "SpecificationDetail",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_SpecificationDetail_specificationCategoryId",
                schema: "SCM",
                table: "SpecificationDetail",
                column: "specificationCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_cSMasterId",
                schema: "SCM",
                table: "StatusLog",
                column: "cSMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_iOUId",
                schema: "SCM",
                table: "StatusLog",
                column: "iOUId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_iOUPaymentMasterId",
                schema: "SCM",
                table: "StatusLog",
                column: "iOUPaymentMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_matrixTypeId",
                schema: "SCM",
                table: "StatusLog",
                column: "matrixTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_purchaseId",
                schema: "SCM",
                table: "StatusLog",
                column: "purchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_requisitionId",
                schema: "SCM",
                table: "StatusLog",
                column: "requisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_statusInfoId",
                schema: "SCM",
                table: "StatusLog",
                column: "statusInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_StatusLog_stockId",
                schema: "SCM",
                table: "StatusLog",
                column: "stockId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_iOUDetailsId",
                schema: "SCM",
                table: "StockDetails",
                column: "iOUDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_itemReqDetailsId",
                schema: "SCM",
                table: "StockDetails",
                column: "itemReqDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_itemSpecificationId",
                schema: "SCM",
                table: "StockDetails",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_orderDetailsId",
                schema: "SCM",
                table: "StockDetails",
                column: "orderDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_productionRequsitionDetailsId",
                schema: "SCM",
                table: "StockDetails",
                column: "productionRequsitionDetailsId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_purchaseOrdersDetailId",
                schema: "SCM",
                table: "StockDetails",
                column: "purchaseOrdersDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_salesInvoiceDetailId",
                schema: "SCM",
                table: "StockDetails",
                column: "salesInvoiceDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_stockMasterId",
                schema: "SCM",
                table: "StockDetails",
                column: "stockMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_storeDepartmentTypeId",
                schema: "SCM",
                table: "StockDetails",
                column: "storeDepartmentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StockDetails_transferDetailId",
                schema: "SCM",
                table: "StockDetails",
                column: "transferDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_IOUId",
                schema: "SCM",
                table: "StockMaster",
                column: "IOUId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_companyId",
                schema: "SCM",
                table: "StockMaster",
                column: "companyId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_itemReqMasterId",
                schema: "SCM",
                table: "StockMaster",
                column: "itemReqMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_openingStockId",
                schema: "SCM",
                table: "StockMaster",
                column: "openingStockId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_productionRequsitionId",
                schema: "SCM",
                table: "StockMaster",
                column: "productionRequsitionId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_purchaseId",
                schema: "SCM",
                table: "StockMaster",
                column: "purchaseId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_purchaseOrdersMasterId",
                schema: "SCM",
                table: "StockMaster",
                column: "purchaseOrdersMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_StockMaster_storeId",
                schema: "SCM",
                table: "StockMaster",
                column: "storeId");

            migrationBuilder.CreateIndex(
                name: "IX_SupplierItemInfo_itemId",
                schema: "SCM",
                table: "SupplierItemInfo",
                column: "itemId");

            migrationBuilder.CreateIndex(
                name: "IX_SupplierItemInfo_organizationId",
                schema: "SCM",
                table: "SupplierItemInfo",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_Suppliers_organizationTypeId",
                schema: "SCM",
                table: "Suppliers",
                column: "organizationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Suppliers_supplierTypeId",
                schema: "SCM",
                table: "Suppliers",
                column: "supplierTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_TeamMember_teamMasterId",
                schema: "SCM",
                table: "TeamMember",
                column: "teamMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Ward_floorId",
                schema: "SCM",
                table: "Ward",
                column: "floorId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkProgressActivityDescriptions_progressActivityTypeId",
                schema: "SCM",
                table: "WorkProgressActivityDescriptions",
                column: "progressActivityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkProgressActivityDescriptions_progressReportId",
                schema: "SCM",
                table: "WorkProgressActivityDescriptions",
                column: "progressReportId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkProgressActivityDescriptions_projectConstructionLocationId",
                schema: "SCM",
                table: "WorkProgressActivityDescriptions",
                column: "projectConstructionLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkProgressActivityDescriptions_projectGridLocationId",
                schema: "SCM",
                table: "WorkProgressActivityDescriptions",
                column: "projectGridLocationId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerProductWarranty_itemSpecificationId",
                schema: "SEBA",
                table: "CustomerProductWarranty",
                column: "itemSpecificationId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerProductWarranty_leadsId",
                schema: "SEBA",
                table: "CustomerProductWarranty",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_ProblemDetail_customerProductWarrantyId",
                schema: "SEBA",
                table: "ProblemDetail",
                column: "customerProductWarrantyId");

            migrationBuilder.CreateIndex(
                name: "IX_ProblemDetail_problemMasterId",
                schema: "SEBA",
                table: "ProblemDetail",
                column: "problemMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_VisitorEntryDetails_visitorEntryMasterId",
                schema: "Shagotom",
                table: "VisitorEntryDetails",
                column: "visitorEntryMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_VisitorEntryMaster_employeeInfoId",
                schema: "Shagotom",
                table: "VisitorEntryMaster",
                column: "employeeInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskAttachment_taskInformationId",
                schema: "TMS",
                table: "TaskAttachment",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskComment_employeeId",
                schema: "TMS",
                table: "TaskComment",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskComment_taskInformationId",
                schema: "TMS",
                table: "TaskComment",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskFollower_employeeId",
                schema: "TMS",
                table: "TaskFollower",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskFollower_taskInformationId",
                schema: "TMS",
                table: "TaskFollower",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskFollowUp_activityCategoryId",
                schema: "TMS",
                table: "TaskFollowUp",
                column: "activityCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskFollowUp_activitySessionId",
                schema: "TMS",
                table: "TaskFollowUp",
                column: "activitySessionId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskFollowUp_activityStatusId",
                schema: "TMS",
                table: "TaskFollowUp",
                column: "activityStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskFollowUp_activityTypeId",
                schema: "TMS",
                table: "TaskFollowUp",
                column: "activityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskFollowUp_taskInformationId",
                schema: "TMS",
                table: "TaskFollowUp",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskHours_taskInformationId",
                schema: "TMS",
                table: "TaskHours",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_activityCategoryId",
                schema: "TMS",
                table: "TaskInformation",
                column: "activityCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_activitySessionId",
                schema: "TMS",
                table: "TaskInformation",
                column: "activitySessionId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_activityStatusId",
                schema: "TMS",
                table: "TaskInformation",
                column: "activityStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_activityTypeId",
                schema: "TMS",
                table: "TaskInformation",
                column: "activityTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_employeeAssignId",
                schema: "TMS",
                table: "TaskInformation",
                column: "employeeAssignId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_employeeId",
                schema: "TMS",
                table: "TaskInformation",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_leadsId",
                schema: "TMS",
                table: "TaskInformation",
                column: "leadsId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_problemMasterId",
                schema: "TMS",
                table: "TaskInformation",
                column: "problemMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskInformation_taskSectionId",
                schema: "TMS",
                table: "TaskInformation",
                column: "taskSectionId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskSection_taskProjectId",
                schema: "TMS",
                table: "TaskSection",
                column: "taskProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskStatusList_taskInformationId",
                schema: "TMS",
                table: "TaskStatusList",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskSubtask_taskInformationId",
                schema: "TMS",
                table: "TaskSubtask",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_TaskTag_taskInformationId",
                schema: "TMS",
                table: "TaskTag",
                column: "taskInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_AuthorizedPerson_registrationFormId",
                schema: "VEMS",
                table: "AuthorizedPerson",
                column: "registrationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_BankInformation_registrationFormId",
                schema: "VEMS",
                table: "BankInformation",
                column: "registrationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_CompanyInformation_registrationFormId",
                schema: "VEMS",
                table: "CompanyInformation",
                column: "registrationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_InterestedArea_registrationFormId",
                schema: "VEMS",
                table: "InterestedArea",
                column: "registrationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_RegistrationForm_organizationId",
                schema: "VEMS",
                table: "RegistrationForm",
                column: "organizationId");

            migrationBuilder.CreateIndex(
                name: "IX_RegistrationForm_procurementCategoryId",
                schema: "VEMS",
                table: "RegistrationForm",
                column: "procurementCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_TopOfficial_registrationFormId",
                schema: "VEMS",
                table: "TopOfficial",
                column: "registrationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_VendorAddress_addressTypeId",
                schema: "VEMS",
                table: "VendorAddress",
                column: "addressTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VendorAddress_countryId",
                schema: "VEMS",
                table: "VendorAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_VendorAddress_districtId",
                schema: "VEMS",
                table: "VendorAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_VendorAddress_divisionId",
                schema: "VEMS",
                table: "VendorAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_VendorAddress_registrationFormId",
                schema: "VEMS",
                table: "VendorAddress",
                column: "registrationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_VendorAddress_thanaId",
                schema: "VEMS",
                table: "VendorAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_VendorAttachment_registrationFormId",
                schema: "VEMS",
                table: "VendorAttachment",
                column: "registrationFormId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementCostInformation_agreementId",
                schema: "VMS",
                table: "AgreementCostInformation",
                column: "agreementId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementCostInformation_amountTypeId",
                schema: "VMS",
                table: "AgreementCostInformation",
                column: "amountTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementCostInformation_costHeadId",
                schema: "VMS",
                table: "AgreementCostInformation",
                column: "costHeadId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementCostInformation_periodTypeId",
                schema: "VMS",
                table: "AgreementCostInformation",
                column: "periodTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementInformation_supplierId",
                schema: "VMS",
                table: "AgreementInformation",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_AgreementInformation_vehicleId",
                schema: "VMS",
                table: "AgreementInformation",
                column: "vehicleId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactRenewalReminder_renewalTypeId",
                schema: "VMS",
                table: "ContactRenewalReminder",
                column: "renewalTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactRenewalReminder_supplierId",
                schema: "VMS",
                table: "ContactRenewalReminder",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_FuelComment_fuelInformationId",
                schema: "VMS",
                table: "FuelComment",
                column: "fuelInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_FuelDetail_fuelInformationId",
                schema: "VMS",
                table: "FuelDetail",
                column: "fuelInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_FuelDetail_fuelTypeId",
                schema: "VMS",
                table: "FuelDetail",
                column: "fuelTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_FuelInformation_fuelStationInfoId",
                schema: "VMS",
                table: "FuelInformation",
                column: "fuelStationInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_FuelInformation_vehicleInformationId",
                schema: "VMS",
                table: "FuelInformation",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_FuelStationComment_fuelStationInfoId",
                schema: "VMS",
                table: "FuelStationComment",
                column: "fuelStationInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_InspectionDetail_inspectionCheckListCategoryId",
                schema: "VMS",
                table: "InspectionDetail",
                column: "inspectionCheckListCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_InspectionDetail_inspectionMasterId",
                schema: "VMS",
                table: "InspectionDetail",
                column: "inspectionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_InspectionMaster_vehicleInformationId",
                schema: "VMS",
                table: "InspectionMaster",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemStoreInServiceCenter_sparePartsId",
                schema: "VMS",
                table: "ItemStoreInServiceCenter",
                column: "sparePartsId");

            migrationBuilder.CreateIndex(
                name: "IX_ItemStoreInServiceCenter_vehicleServiceHistoryId",
                schema: "VMS",
                table: "ItemStoreInServiceCenter",
                column: "vehicleServiceHistoryId");

            migrationBuilder.CreateIndex(
                name: "IX_LinkedVehicle_vehicleInformationId",
                schema: "VMS",
                table: "LinkedVehicle",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_Odometer_vehicleInformationId",
                schema: "VMS",
                table: "Odometer",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_PartsIssueDetails_partsDetailId",
                schema: "VMS",
                table: "PartsIssueDetails",
                column: "partsDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_PartsIssueDetails_partsIssueId",
                schema: "VMS",
                table: "PartsIssueDetails",
                column: "partsIssueId");

            migrationBuilder.CreateIndex(
                name: "IX_PartsIssueMaster_purchasePartsId",
                schema: "VMS",
                table: "PartsIssueMaster",
                column: "purchasePartsId");

            migrationBuilder.CreateIndex(
                name: "IX_PartsIssueMaster_vehicleId",
                schema: "VMS",
                table: "PartsIssueMaster",
                column: "vehicleId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePartsDetail_purchasePartsMasterId",
                schema: "VMS",
                table: "PurchasePartsDetail",
                column: "purchasePartsMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchasePartsMaster_sparePartsId",
                schema: "VMS",
                table: "PurchasePartsMaster",
                column: "sparePartsId");

            migrationBuilder.CreateIndex(
                name: "IX_ReminderSchedule_vehicleServiceReminderId",
                schema: "VMS",
                table: "ReminderSchedule",
                column: "vehicleServiceReminderId");

            migrationBuilder.CreateIndex(
                name: "IX_RequisitionComment_requisitionMasterId",
                schema: "VMS",
                table: "RequisitionComment",
                column: "requisitionMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_ServiceLabel_labelTypeId",
                schema: "VMS",
                table: "ServiceLabel",
                column: "labelTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ServiceLabel_vehicleServiceHistoryId",
                schema: "VMS",
                table: "ServiceLabel",
                column: "vehicleServiceHistoryId");

            migrationBuilder.CreateIndex(
                name: "IX_SORDetails_sORMasterId",
                schema: "VMS",
                table: "SORDetails",
                column: "sORMasterId");

            migrationBuilder.CreateIndex(
                name: "IX_SORDetails_sparePartsId",
                schema: "VMS",
                table: "SORDetails",
                column: "sparePartsId");

            migrationBuilder.CreateIndex(
                name: "IX_SORDetails_supplierId",
                schema: "VMS",
                table: "SORDetails",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_StationFuelInfo_fuelStationInfoId",
                schema: "VMS",
                table: "StationFuelInfo",
                column: "fuelStationInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_StationFuelInfo_fuelTypeId",
                schema: "VMS",
                table: "StationFuelInfo",
                column: "fuelTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleComment_vehicleInformationId",
                schema: "VMS",
                table: "VehicleComment",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEngineTransmission_aspirationId",
                schema: "VMS",
                table: "VehicleEngineTransmission",
                column: "aspirationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEngineTransmission_blockTypeId",
                schema: "VMS",
                table: "VehicleEngineTransmission",
                column: "blockTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEngineTransmission_camTypeId",
                schema: "VMS",
                table: "VehicleEngineTransmission",
                column: "camTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEngineTransmission_fuelInductionId",
                schema: "VMS",
                table: "VehicleEngineTransmission",
                column: "fuelInductionId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEngineTransmission_transmissionTypeId",
                schema: "VMS",
                table: "VehicleEngineTransmission",
                column: "transmissionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleEngineTransmission_vehicleInformationId",
                schema: "VMS",
                table: "VehicleEngineTransmission",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleFluid_fuelTypeId",
                schema: "VMS",
                table: "VehicleFluid",
                column: "fuelTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleFluid_vehicleInformationId",
                schema: "VMS",
                table: "VehicleFluid",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleBodySubTypeId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleBodySubTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleBodyTypeId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleBodyTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleGroupId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleManufactureId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleManufactureId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleModelId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleModelId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleOwnershipId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleOwnershipId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleStatusId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleInformation_vehicleTypeId",
                schema: "VMS",
                table: "VehicleInformation",
                column: "vehicleTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleLineItem_sparePartsId",
                schema: "VMS",
                table: "VehicleLineItem",
                column: "sparePartsId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleLineItem_vehicleServiceHistoryId",
                schema: "VMS",
                table: "VehicleLineItem",
                column: "vehicleServiceHistoryId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleMaintenanceLimit_vehicleInformationId",
                schema: "VMS",
                table: "VehicleMaintenanceLimit",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleMaintenanceLimitDetail_fuelTypeId",
                schema: "VMS",
                table: "VehicleMaintenanceLimitDetail",
                column: "fuelTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleMaintenanceLimitDetail_limitAmountTypeId",
                schema: "VMS",
                table: "VehicleMaintenanceLimitDetail",
                column: "limitAmountTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleMaintenanceLimitDetail_limitPeriodTypeId",
                schema: "VMS",
                table: "VehicleMaintenanceLimitDetail",
                column: "limitPeriodTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleMaintenanceLimitDetail_vehicleMaintenanceLimitId",
                schema: "VMS",
                table: "VehicleMaintenanceLimitDetail",
                column: "vehicleMaintenanceLimitId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleRenewalReminder_renewalTypeId",
                schema: "VMS",
                table: "VehicleRenewalReminder",
                column: "renewalTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleRenewalReminder_vehicleInformationId",
                schema: "VMS",
                table: "VehicleRenewalReminder",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleServiceComment_vehicleServiceHistoryId",
                schema: "VMS",
                table: "VehicleServiceComment",
                column: "vehicleServiceHistoryId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleServiceHistory_supplierId",
                schema: "VMS",
                table: "VehicleServiceHistory",
                column: "supplierId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleServiceHistory_vehicleInformationId",
                schema: "VMS",
                table: "VehicleServiceHistory",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleServiceIssue_vehicleInformationId",
                schema: "VMS",
                table: "VehicleServiceIssue",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleServiceIssueComment_vehicleServiceIssueId",
                schema: "VMS",
                table: "VehicleServiceIssueComment",
                column: "vehicleServiceIssueId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleServiceReminder_sparePartsId",
                schema: "VMS",
                table: "VehicleServiceReminder",
                column: "sparePartsId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleServiceReminder_vehicleInformationId",
                schema: "VMS",
                table: "VehicleServiceReminder",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleSetting_meterTypeId",
                schema: "VMS",
                table: "VehicleSetting",
                column: "meterTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleSetting_unitId",
                schema: "VMS",
                table: "VehicleSetting",
                column: "unitId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleSetting_vehicleInformationId",
                schema: "VMS",
                table: "VehicleSetting",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleSpecification_vehicleInformationId",
                schema: "VMS",
                table: "VehicleSpecification",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleUse_requisitionId",
                schema: "VMS",
                table: "VehicleUse",
                column: "requisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleUse_vehicleInformationId",
                schema: "VMS",
                table: "VehicleUse",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleWheelTire_brakeSystemId",
                schema: "VMS",
                table: "VehicleWheelTire",
                column: "brakeSystemId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleWheelTire_driveTypeId",
                schema: "VMS",
                table: "VehicleWheelTire",
                column: "driveTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VehicleWheelTire_vehicleInformationId",
                schema: "VMS",
                table: "VehicleWheelTire",
                column: "vehicleInformationId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSAddress_countryId",
                schema: "VMS",
                table: "VMSAddress",
                column: "countryId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSAddress_districtId",
                schema: "VMS",
                table: "VMSAddress",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSAddress_divisionId",
                schema: "VMS",
                table: "VMSAddress",
                column: "divisionId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSAddress_fuelStationInfoId",
                schema: "VMS",
                table: "VMSAddress",
                column: "fuelStationInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSAddress_thanaId",
                schema: "VMS",
                table: "VMSAddress",
                column: "thanaId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSContact_fuelStationInfoId",
                schema: "VMS",
                table: "VMSContact",
                column: "fuelStationInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSContact_resourceID",
                schema: "VMS",
                table: "VMSContact",
                column: "resourceID");

            migrationBuilder.CreateIndex(
                name: "IX_VMSRequisitionDetails_requisitionId",
                schema: "VMS",
                table: "VMSRequisitionDetails",
                column: "requisitionId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSRequisitionMaster_districtId",
                schema: "VMS",
                table: "VMSRequisitionMaster",
                column: "districtId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSRequisitionMaster_vehicleTypeId",
                schema: "VMS",
                table: "VMSRequisitionMaster",
                column: "vehicleTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSResource_departmentID",
                schema: "VMS",
                table: "VMSResource",
                column: "departmentID");

            migrationBuilder.CreateIndex(
                name: "IX_VMSResource_designationID",
                schema: "VMS",
                table: "VMSResource",
                column: "designationID");

            migrationBuilder.CreateIndex(
                name: "IX_VMSResource_religionId",
                schema: "VMS",
                table: "VMSResource",
                column: "religionId");

            migrationBuilder.CreateIndex(
                name: "IX_VMSResource_resourceTypeId",
                schema: "VMS",
                table: "VMSResource",
                column: "resourceTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Doc_docId",
                schema: "WMS",
                table: "Doc",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_Doc_employeeId",
                schema: "WMS",
                table: "Doc",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_DocAttachment_docId",
                schema: "WMS",
                table: "DocAttachment",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_DocRoute_actionId",
                schema: "WMS",
                table: "DocRoute",
                column: "actionId");

            migrationBuilder.CreateIndex(
                name: "IX_DocRoute_docId",
                schema: "WMS",
                table: "DocRoute",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_DocRoute_employeeId",
                schema: "WMS",
                table: "DocRoute",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_DocRoute_employeeReplaceId",
                schema: "WMS",
                table: "DocRoute",
                column: "employeeReplaceId");

            migrationBuilder.CreateIndex(
                name: "IX_DraftAttachment_draftDocId",
                schema: "WMS",
                table: "DraftAttachment",
                column: "draftDocId");

            migrationBuilder.CreateIndex(
                name: "IX_DraftDoc_docId",
                schema: "WMS",
                table: "DraftDoc",
                column: "docId");

            migrationBuilder.CreateIndex(
                name: "IX_DraftDoc_employeeId",
                schema: "WMS",
                table: "DraftDoc",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_DraftRouting_draftDocId",
                schema: "WMS",
                table: "DraftRouting",
                column: "draftDocId");

            migrationBuilder.CreateIndex(
                name: "IX_DraftRouting_employeeId",
                schema: "WMS",
                table: "DraftRouting",
                column: "employeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ReviewRoute_actionId",
                schema: "WMS",
                table: "ReviewRoute",
                column: "actionId");

            migrationBuilder.CreateIndex(
                name: "IX_ReviewRoute_docRouteId",
                schema: "WMS",
                table: "ReviewRoute",
                column: "docRouteId");

            migrationBuilder.CreateIndex(
                name: "IX_ReviewRoute_employeeId",
                schema: "WMS",
                table: "ReviewRoute",
                column: "employeeId");

            migrationBuilder.AddForeignKey(
                name: "FK_Address_Resource_resourceId",
                schema: "CRM",
                table: "Address",
                column: "resourceId",
                principalSchema: "CRM",
                principalTable: "Resource",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EmployeeInfo_Department_departmentId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "departmentId",
                principalSchema: "HR",
                principalTable: "Department",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EmployeeInfo_HrBranch_hrBranchId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "hrBranchId",
                principalSchema: "HR",
                principalTable: "HrBranch",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EmployeeInfo_Location_locationId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "locationId",
                principalSchema: "HR",
                principalTable: "Location",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EmployeeInfo_HrDivision_hrDivisionId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "hrDivisionId",
                principalSchema: "HR",
                principalTable: "HrDivision",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EmployeeInfo_HrUnit_hrUnitId",
                schema: "HR",
                table: "EmployeeInfo",
                column: "hrUnitId",
                principalSchema: "HR",
                principalTable: "HrUnit",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_WagesEmployeeInfo_Department_departmentId",
                schema: "HR",
                table: "WagesEmployeeInfo",
                column: "departmentId",
                principalSchema: "HR",
                principalTable: "Department",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillReturnPaymentDetails_BillReturnPaymentMasters_billReturnPaymentMasterId",
                table: "BillReturnPaymentDetails",
                column: "billReturnPaymentMasterId",
                principalTable: "BillReturnPaymentMasters",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillReturnPaymentDetails_SalesReturnInvoiceMaster_salesReturnInvoiceMasterId",
                table: "BillReturnPaymentDetails",
                column: "salesReturnInvoiceMasterId",
                principalSchema: "OSales",
                principalTable: "SalesReturnInvoiceMaster",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillReturnPaymentMasters_RelSupplierCustomerResourse_relSupplierCustomerResourseId",
                table: "BillReturnPaymentMasters",
                column: "relSupplierCustomerResourseId",
                principalSchema: "OSales",
                principalTable: "RelSupplierCustomerResourse",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Location_Department_hrDepartmentId",
                schema: "HR",
                table: "Location",
                column: "hrDepartmentId",
                principalSchema: "HR",
                principalTable: "Department",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_FunctionInfo_Companies_companyId",
                schema: "HR",
                table: "FunctionInfo");

            migrationBuilder.DropForeignKey(
                name: "FK_Location_Companies_companyId",
                schema: "HR",
                table: "Location");

            migrationBuilder.DropForeignKey(
                name: "FK_SpecialBranchUnit_Companies_companyId",
                schema: "HR",
                table: "SpecialBranchUnit");

            migrationBuilder.DropForeignKey(
                name: "FK_FunctionInfo_SpecialBranchUnit_specialBranchUnitId",
                schema: "HR",
                table: "FunctionInfo");

            migrationBuilder.DropForeignKey(
                name: "FK_Location_Department_hrDepartmentId",
                schema: "HR",
                table: "Location");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "autonumberingInfos");

            migrationBuilder.DropTable(
                name: "BillReturnPaymentDetails");

            migrationBuilder.DropTable(
                name: "Comments");

            migrationBuilder.DropTable(
                name: "CompanyAddresses");

            migrationBuilder.DropTable(
                name: "DbChangeHistories");

            migrationBuilder.DropTable(
                name: "ERPModuleAssigns");

            migrationBuilder.DropTable(
                name: "fDRCalFormulas");

            migrationBuilder.DropTable(
                name: "forgotPasswordHistories");

            migrationBuilder.DropTable(
                name: "hallRentalPayments");

            migrationBuilder.DropTable(
                name: "jDTaskTypes");

            migrationBuilder.DropTable(
                name: "loanPolicyDetails");

            migrationBuilder.DropTable(
                name: "MasterMenus");

            migrationBuilder.DropTable(
                name: "MenuBands");

            migrationBuilder.DropTable(
                name: "ModuleAccessPages");

            migrationBuilder.DropTable(
                name: "Notifications");

            migrationBuilder.DropTable(
                name: "Patients");

            migrationBuilder.DropTable(
                name: "RcrtEmpMemberships");

            migrationBuilder.DropTable(
                name: "RcrtReferences");

            migrationBuilder.DropTable(
                name: "salaryPostingLogs");

            migrationBuilder.DropTable(
                name: "SendEmailLogStatus");

            migrationBuilder.DropTable(
                name: "staffLoanUploadFaileds");

            migrationBuilder.DropTable(
                name: "UserAccessPages");

            migrationBuilder.DropTable(
                name: "userBackups");

            migrationBuilder.DropTable(
                name: "UserLogHistories");

            migrationBuilder.DropTable(
                name: "Visitors");

            migrationBuilder.DropTable(
                name: "AccountMode",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "AutoVoucherDetail",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "BalanceSheetProcess",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "BankChargeMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "BankReconcileDetail",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "CostCentreAllocation",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "CreateBillVoucherAttachment",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "CreateBillVoucherDetail",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "DailyBillReceive",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "DeleteCostCentreAllocation",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "DeleteVoucherDetail",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "DeleteVoucherMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "FDREncashment",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUAdjustmentDetaillog",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUAdjustmentlog",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUAdjustmentSpend",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUVoucherLog",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "OpeningBalance",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "ProfitAndLossAccountProcess",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "Signature",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "SubLedger",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "UploadedVoucherData",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "VatTaxRate",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "VoucherApproveLog",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "VoucherSetting",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "ACRComments",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "AcrEmployeeInfo",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "ACROtherTables",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "ACRPrevJobHistory",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "AcrProfessionalQualification",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "AcrPromotion",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "ACRRecommendations",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "ACRSignatories",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "AcrTrainingInfo",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "AssignmentTraining",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "DocumentAttachments",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "EmployeeEducation",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "EmployeesJobDuration",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "LeaveDetail",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "QuantitativeEvaluationComments",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "BudgetBranchAddress",
                schema: "Budget");

            migrationBuilder.DropTable(
                name: "FiscalYear",
                schema: "Budget");

            migrationBuilder.DropTable(
                name: "Balance",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "BulkHistory",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "Collection",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "EventParticipantType",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "EventRegister",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "GalleryContent",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "Invoice",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberAddress",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberAward",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberChildren",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberComment",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberDrivingLicense",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberEducationalQualification",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberLanguage",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberOtherInfo",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberPassportDetails",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberPhotograph",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberPublication",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberSpouse",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberTraningLog",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberTransferLog",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "NewsInfo",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "NoticeType",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "OtherMembership",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "PaymentLog",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "RlnMemberGroup",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "RlnNoticeAuthor",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "SpecialSkill",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "SponsorShip",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "ActivityDetails",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ActivityNature",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ActivityStatusProgress",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ActivityTeam",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Address",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "AgreementDetailsHistory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "BillCollectionHistory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "BillGenerateHistory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Clients",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ColdActivityDetails",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ColdActivityDiscussion",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ColdActivityTeams",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "CommunicationType",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "CRMNoteMaster",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "CRMTeamMember",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Document",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Industry",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "LeadsBankInfo",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "LeadsHistory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "MemberBudgets",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "OwnerChangeHistory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ProposalDetail",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "RatingReview",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "RelProductAgreement",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "RelProductProposal",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Archive",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "AttachmentStatus",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "IRCMeetingAttendance",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "IRCMemberComments",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "IRCRating",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "IRCSignatory",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "ProposedRating",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "RatingValue",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "ReceiveDocument",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "StatusLog",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "DisItemPriceFixingDetails",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "RelCustomerArea",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "RelCustomerSalesTeamDeployment",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "RequisitionDetail",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "AssignDocument",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "AssignDocumentMaster",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "DocumentDetail",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "DocumentStatusLog",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "AssetAssign",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AssetDepreciation",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AssetOverhauling",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AssetReceives",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AssetRejects",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AssetRetirements",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AssetTransfer",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AssetWarrenty",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "DepriciationInfo",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "FixationIntegration",
                schema: "Fixation");

            migrationBuilder.DropTable(
                name: "IncrementHeld",
                schema: "Fixation");

            migrationBuilder.DropTable(
                name: "PatientHistory",
                schema: "HOSPTL");

            migrationBuilder.DropTable(
                name: "PatientInfo",
                schema: "HOSPTL");

            migrationBuilder.DropTable(
                name: "PatientRepresentative",
                schema: "HOSPTL");

            migrationBuilder.DropTable(
                name: "ACRActionType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ACRAuthority",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrEvaluationValue",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrHealthInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrPersonalWorkDescription",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ACRProcess",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrRouteEvaluation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ActivityStatus",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Address",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Allegation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApplicantAddress",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApplicantVerification",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApplicationEdu",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApplicationExp",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApplicationQuota",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AppreciationLetter",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApprovalDetail",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Assignment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AttendanceRoute",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AttendenceApi",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AttendenceUpload",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AwardAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "BankingDiploma",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Belongings",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "BoardOfDirector",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "BondLetter",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "BorrowerInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Cadre",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CallForExam",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Charge",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ChildrenEducation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ClientServeLost",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CourseCoordinator",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CourseTitle",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CvBlackList",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "DisciplinaryLog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "DisiciplinaryAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "DriverAssignment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "DrivingLicense",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "DuelResidence",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EducationalQualification",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmergencyContact",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmpAttendance",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmpAttendenceTemp",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeAccounts",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeAllocation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeAward",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeContractInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeCostCentre",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeDeath",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeDisease",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeExtraCurricular",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeGrade",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeHobby",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeInsurance",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeJoiningLetter",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeLanguage",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeLanguageSkill",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeMembership",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeOtherInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeePostingPlace",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeProjectAssign",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeePunchCardInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeRole",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeesAcr",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeSignature",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeSports",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmpManualAttendance",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Evaluation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ExamResult",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ExitInterviewComment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ExitInterviewFeelAndFollowings",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ExitInterviewPayNBenefits",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ExitInterviewReasonOfLeaving",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ExitInterviewSuggestion",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ExperianceLetter",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "FinanceCode",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "FoodLiking",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "FreedomFighter",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "GratuityPolicyDetail",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HandoverTakeoverDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Holiday",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrAtmBooth",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrBudgetDpt",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrCommunication",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrComputerLiteracy",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrComputerSubject",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrFormatDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrItem",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HRManualAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HRPMSAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "JobCircular",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveCommittee",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveLog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveOpeningBalance",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeavePolicy",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveRoute",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveStatusLog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Lisence",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MajorOverholding",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MobileBenifit",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ModuleTrainingCategory",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MovementTracking",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MunicipilityLocation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "NaturalDigester",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "NomineeDetail",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OfficeAssign",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OrganogramChild",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OtherActivity",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OtherQualification",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OTProcessData",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OTSetupDetail",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OutsourcesCompany",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PassportDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Photograph",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PhysicalProperty",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PIMSVisitor",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Position",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PrevJobHistory",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PriviousEmployment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PRLAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ProfessionalQualifications",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Promotion",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PromotionAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PromotionLog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Publication",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PublicationAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Punishment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "QualificationAndValidation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "QuantitativeEvaluation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Reference",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Relation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ResignationLetter",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ResignInformation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Reward",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "RlnSBUPNS",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "RlnTrainingTrainer",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "SessionAttendance",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ShiftGroupDetail",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Spouse",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Supervisor",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Suspension",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Tax",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TeacherCareer",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TeacherEducation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TeacherExpertise",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TeacherSocialMeadia",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TempDay",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingAllocation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingAttendance",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingCertificate",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingDeliverables",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingFeedback",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingHonorarium",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingMarks",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingMiscallenous",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingPerticipants",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingResourcePerson",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingScheduleDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingScheduleTrainee",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingScheduleTrainer",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingTaDa",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TraningLog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TransferAttachment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TransferLog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TraveInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TravellerInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TravellingInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TravelRoute",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TravelStatusLog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Vacancy",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "VisualData",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesAddress",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesBankInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesEmergencyContact",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesEmpAttendance",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesLeaveRegister",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesLeftDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesPhotograph",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesPriviousEmployment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesPunchCardInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesReference",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WagesSalaryStructure",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "WorkHistory",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "YearlyLeaveProcess",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "IeltsInfo",
                schema: "IELTS");

            migrationBuilder.DropTable(
                name: "MessageBoxFile",
                schema: "MBox");

            migrationBuilder.DropTable(
                name: "MessageGroupMember",
                schema: "MBox");

            migrationBuilder.DropTable(
                name: "MeetingAttendance",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "MeetingDetail",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "MeetingDocAttachment",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "MeetingDocRoute",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "MeetingDocs",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "MeetingUser",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "BarCodeInformation",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "MenuMealTypeMapping",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesCollectionDetail",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesMenuOpeningBalance",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesReturnInvoiceDetail",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesTermsConditions",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "AdditionalTaxInfo",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "AdvanceAdjustmentDetail",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "AdvancePayment",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "AllSalarySheets",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "BranchWiseSalaryLock",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "CarLoanSchedule",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "CarMaintenance",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "CodeManagement",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmpAttendanceSummary",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeeArrear",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeeSalaryPosting",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeesArrearStructure",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeesBonusStructure",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeesCashSetup",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeesSalaryStructure",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeesTax",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "FdrInvestment",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "FinalSettlement",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "FixedTaxEmployees",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "GratiutyProcessData",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "HomeLoanSchedule",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "IncomeTaxSetup",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "InterestNotDeduct",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "InvestmentRebateSettings",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "LeaveWithoutPay",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "LfaInfo",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "LoanLog",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "LoanRoute",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "LoanScheduleDetail",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "MobileAllowanceStructure",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "MonthlyAllowance",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "PartialSalaryLog",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "PFLoanSchedule",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "PFSalaryContribution",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ProcessEmployeesMobileAndCarAllowance",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ProcessEmpSalaryMaster",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ProcessEmpSalaryStructure",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ProcessSalaryRemarks",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ReportFormat",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryActivityPercent",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryGradePercent",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryProcessLog",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryStatusLog",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryStructureHistory",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SlabIncomeTax",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SlabIncomeTaxAssign",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SlabRebate",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SpecialBonusEmp",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "StaffLoanLog",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "StaffLoanSchedule",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "TaxChallan",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "UploadExcelLog",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "WagesProcessEmpSalaryMaster",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "WagesProcessEmpSalaryStructure",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ForfeitAccount",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PfAccountDetails",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PfAccountsSchedule",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PFContribution",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PfFinalSettlement",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PfInterest",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PFInvestment",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PFLoanManagement",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PfTransaction",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PFVoucherDetails",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "ProgramActivityProgres",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramAddress",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramAttachment",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramAttendee",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramHeadline",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramImplementor",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramIndicator",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramLocation",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramOutComeProgres",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramOutPutProgres",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramPeopleInDiscussion",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramPlan",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramPlanLocation",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramSourceFund",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramSourceFundApprove",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramSubject",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramVideo",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramViewer",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramWorkPlan",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "DiscountRate",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "OfferDetails",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosBillReturnPaymentDetail",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosCollectionDetail",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosRepInvoiceDetail",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosSalesReturnInvoiceDetail",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "BOMOverheadDetail",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "ProductionDetails",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "ProductionDocumentAttachments",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "ProductionTypes",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "BillPaymentDetail",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "PurchaseReturnInfoDetail",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "StoreAddress",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "StoreAssign",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "StoreContact",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "CandidatePhoto",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "InterviewCalling",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RCRTAddress",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RCRTEducation",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RCRTOtherQualification",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RcrtPreviousEmployment",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RCRTProfessionalQualifications",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RcrtPublication",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RCRTTrainingLog",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "ResultDetails",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "ClaimAssign",
                schema: "REMS");

            migrationBuilder.DropTable(
                name: "ClaimAttachment",
                schema: "REMS");

            migrationBuilder.DropTable(
                name: "ClaimBillInformation",
                schema: "REMS");

            migrationBuilder.DropTable(
                name: "RepairTransactionLog",
                schema: "REMS");

            migrationBuilder.DropTable(
                name: "RentTermsConditions",
                schema: "Rental");

            migrationBuilder.DropTable(
                name: "TermsAndConditions",
                schema: "Rental");

            migrationBuilder.DropTable(
                name: "RepSalesCollectionDetail",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "RepSalesInvoiceDetail",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "ActivityWiseDailyProgressDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Address",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Ambulance",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ApprovalMatrixlog",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ApprovalReview",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "AutoGeneratedNumber",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Bed",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "BuyerItemMapping",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ChangeOfDoa",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Contact",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DeisbarseDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DeliveryStructure",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DocumentAttachmentDetail",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DocumentAttachments",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "FeatureItems",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "IOUPayment",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "JobAssignDetail",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Justification",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "MailLog",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ManpowerTypes",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "MatrixChangeHistory",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PODismissDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "POTermAndCondition",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PreferableVendors",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PrintHistory",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ProjectWiseEquipment",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RequisitionAssignToTeamLeads",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RequisitionStatusLogs",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RFQDocumentAttachmentDetail",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RFQSupDetail",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SiteConstraints",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SiteEquipments",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SiteManpowers",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SiteMaterials",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SiteVisitors",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SpecificationDetail",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "StatusLog",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SupplierItemInfo",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Ward",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ProblemDetail",
                schema: "SEBA");

            migrationBuilder.DropTable(
                name: "VisitorEntryDetails",
                schema: "Shagotom");

            migrationBuilder.DropTable(
                name: "TaskAttachment",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "TaskComment",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "TaskFollower",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "TaskFollowUp",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "TaskHours",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "TaskStatusList",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "TaskSubtask",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "TaskTag",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "AuthorizedPerson",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "BankInformation",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "CodeOfContact",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "CompanyInformation",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "InterestedArea",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "NDAFile",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "RequiredDocuments",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "TopOfficial",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "VendorAddress",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "VendorAttachment",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "AgreementCostInformation",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "ContactRenewalReminder",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "FuelComment",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "FuelDetail",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "FuelStation",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "FuelStationComment",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "InspectionDetail",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "ItemStoreInServiceCenter",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "LinkedVehicle",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "Odometer",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "PartsIssueDetails",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "ReminderSchedule",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "ReportField",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "RequisitionComment",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "ServiceLabel",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "ServiceTask",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "SORDetails",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "SourceType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "StationFuelInfo",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleComment",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleEngineTransmission",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleFluid",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleLineItem",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleMaintenanceLimitDetail",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleRenewalReminder",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleServiceComment",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleServiceIssueComment",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleSetting",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleSpecification",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleUse",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleWheelTire",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VMSAddress",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VMSContact",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VMSRequisitionDetails",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "DocAttachment",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "DraftAttachment",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "DraftRouting",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "ReviewRoute",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "Urlgeneration",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "BillReturnPaymentMasters");

            migrationBuilder.DropTable(
                name: "hallRentalApplicationInfos");

            migrationBuilder.DropTable(
                name: "jDTaskLists");

            migrationBuilder.DropTable(
                name: "jDTypes");

            migrationBuilder.DropTable(
                name: "loanPolicyNews");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "Navbars");

            migrationBuilder.DropTable(
                name: "AutoVoucherMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "BalanceSheetDetails",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "BankReconciliationMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "CreateBillVoucherMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "StockDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "FDRInvestmentDetail",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUAdjustmentDetail",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUVoucherMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "ProfitAndLossAccountDetails",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "SignatureType",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "RateType",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "EvaluationCommentsHead",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrMaster",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "ParticipantType",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "EventPerticipantHead",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "GalleryTitle",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "Topic",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "Membership",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MemberGroup",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "NoticeAuthor",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "NoticeInfo",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "ActivityMaster",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "addressCategories");

            migrationBuilder.DropTable(
                name: "PostOffices");

            migrationBuilder.DropTable(
                name: "BillCollection",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ColdActivityMasters",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "CRMTeamMaster ",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "TeamBudgets",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ProposalParticulars",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Product",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ProposalMaster",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ArchiveShelf",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "AttachmentType",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "RatingType",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "DocumentChart",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "OperationMaster",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "SalesTeamDeployment",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "DisItemPriceFixing",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "PackageDetail",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "RequisitionMaster",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "DocumentPhotoAttachments");

            migrationBuilder.DropTable(
                name: "FieldSettings",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "DocumentMaster",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "AssetRetirementTypes",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "DepriciationPeriod",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "FixaType",
                schema: "Fixation");

            migrationBuilder.DropTable(
                name: "DiseaseInfo",
                schema: "HOSPTL");

            migrationBuilder.DropTable(
                name: "AcrEvaluationDetail",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ACRSchedule",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrRoute",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApprovalMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AttendanceUpdateApply",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AwardEntry",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "belongingItems");

            migrationBuilder.DropTable(
                name: "BookEntry",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApplicationExam",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApplicationForm",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Children",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "DisciplinaryAction",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "eventDutyMasters");

            migrationBuilder.DropTable(
                name: "Award",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CostCentre",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "medicalDiseases");

            migrationBuilder.DropTable(
                name: "ExtraCurricularType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeReleaseInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Language",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MembershipOrganization",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HRFacility",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "JobResponsibility",
                schema: "ACR");

            migrationBuilder.DropTable(
                name: "AcrEvaluationName",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EvaluationFectors",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingExam",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "interviewComments");

            migrationBuilder.DropTable(
                name: "feelAboutTheFollowings");

            migrationBuilder.DropTable(
                name: "payAndBenefits");

            migrationBuilder.DropTable(
                name: "reasonForLeavings");

            migrationBuilder.DropTable(
                name: "commentORSuggestions");

            migrationBuilder.DropTable(
                name: "ExitInterviewMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "GratuityPolicyMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HandoverTakeoverMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrSubBranch",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrFormatMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AtttachmentCategory",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveRegister",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LisenceType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "VehicleEntry",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "NomineeFund",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Nominee",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OrganogramRelation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ActivityName",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OTSetupMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OTSlotType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PRLApplication",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PromotionEntry",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PublicationEntry",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ACRIndicator",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Assessment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingInfoDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TeacherBasics",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PostDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EnrolledTrainee",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingSchedule",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingTitlelog",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TransferEntry",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TravelPurpose",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TravelVehicleType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TravelMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MessageBoxInfo",
                schema: "MBox");

            migrationBuilder.DropTable(
                name: "MeetingDocument",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "MeetingInfo",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "MealType",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesMenu",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesCollectionBillInfo",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesCollection",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalesReturnInvoiceMaster",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "AdvanceAdjustment",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "CarLoan",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryVoucherDetails",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeeArrearInfo",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "BonousStructure",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "HomeLoan",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "LoanScheduleMaster",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "PFLoanPayment",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "EmployeeProjectActivity",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "SalarySlab",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SlabType",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "RebateSlabType",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "StaffLoan",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "WagesEmployeeInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PFMemberInfo",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "PFVoucherType",
                schema: "PF");

            migrationBuilder.DropTable(
                name: "BenificiaryActiveType",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "BenificiaryType",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "DateRange",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "Gender",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "IdType",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "PeopleType",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramActivity",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "OfferMaster",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosBillReturnPaymentMaster",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosCollectionMaster",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosRepInvoiceMaster",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosInvoiceDetail",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosSalesReturnInvoiceMaster",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "OverheadCosts",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "ProductionMasters",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "BillPaymentMaster",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "BillReceiveInformation",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "PurchaseReturnInfoMaster",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "JobPost",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "RelDegreeSubject",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OtherQualificationHead",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HRPMSOrganizationType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "QualificationHead",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Result",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ResultMaster",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "ExamType",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "AssignType",
                schema: "REMS");

            migrationBuilder.DropTable(
                name: "ClaimRegister",
                schema: "REMS");

            migrationBuilder.DropTable(
                name: "RepSalesCollection",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "SalesCollectionDetail",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "RepSalesInvoiceMaster",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "SalesInvoiceDetail",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "ActivityWiseItemDetials",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "WorkProgressActivityDescriptions",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ApprovalMatrix",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ApprovalLog",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Cabin",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DisbarseMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "JobAssignMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "JustificationType",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PODismissMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SpecificationCategory",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "IOUPaymentMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "CustomerProductWarranty",
                schema: "SEBA");

            migrationBuilder.DropTable(
                name: "VisitorEntryMaster",
                schema: "Shagotom");

            migrationBuilder.DropTable(
                name: "TaskInformation",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "AddressTypes");

            migrationBuilder.DropTable(
                name: "RegistrationForm",
                schema: "VEMS");

            migrationBuilder.DropTable(
                name: "AgreementInformation",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "AgreementCostHead",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "FuelInformation",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "InspectionCheckLIstCategory",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "InspectionMaster",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "PurchasePartsDetail",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "PartsIssueMaster",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleServiceReminder",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "LabelType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "SORMaster",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "Suppliers",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Aspiration",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "BlockType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "CamType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "FuelInduction",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "TransmissionType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "FuelType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "LimitAmountType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "LimitPeriodType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleMaintenanceLimit",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "RenewalType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleServiceHistory",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleServiceIssue",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "MeterType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "BrakeSystem",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "DriveType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VMSResource",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VMSRequisitionMaster",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "DraftDoc",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "DocRoute",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "hallInfos");

            migrationBuilder.DropTable(
                name: "hallRentalShifts");

            migrationBuilder.DropTable(
                name: "NoteMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ItemReqDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PurchaseOrderDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ProductionRequsitionDetails",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "PurchaseOrdersDetails",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "SalesInvoiceDetail",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "StockMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "StoreDepartmentTypes",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "TransferDetail",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "FDRInvesment",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "IOUAdjustmentMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "VoucherDetail",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "ProfitAndLossAccountMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "EventInformation",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "ParticipantHead",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberInfo",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "BillGenerate",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "CompanyBudgets",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Teams");

            migrationBuilder.DropTable(
                name: "ProposalStatus",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ProposalType",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ArchiveFloor",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "JobStatus",
                schema: "CRO");

            migrationBuilder.DropTable(
                name: "PackageMaster",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "FieldType",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "DocumentCategory",
                schema: "Doc");

            migrationBuilder.DropTable(
                name: "AssetYear",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "AcrEvaluationMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrInitiate",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ApprovalType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "BookCategory",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Offense",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "NaturalPunishment",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrFor",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AcrType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "AtttachmentGroup",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveDay",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "LeaveType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Vehicle",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HRPMSActivityType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "QuantitativeEvaluationHead",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Trainer",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmploymentType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Post",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PostingType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingInfoNew",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "MessageGroup",
                schema: "MBox");

            migrationBuilder.DropTable(
                name: "MeetingActionInfo",
                schema: "MMS");

            migrationBuilder.DropTable(
                name: "SalesMenuCategory",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "SalaryVoucherMaster",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "BonousSubCategory",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryCalulationType",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "LoanPolicy",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "PFLoan",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "HRActivity",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HRDoner",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HRProject",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ProgramOutPut",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "BankInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CardType",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "MobileBankingType",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "PosInvoiceMaster",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "Degree",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Subject",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CandidateInfo",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "AssetRegistration",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "ClaimStatusInfo",
                schema: "REMS");

            migrationBuilder.DropTable(
                name: "SalesCollection",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "SalesInvoiceMaster",
                schema: "Sales");

            migrationBuilder.DropTable(
                name: "ProjectLocationActivityDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DailyProgressReports",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ApproverType",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "MatrixType",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Floor",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "JobAssignType",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ActivityCategory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ActivitySession",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ActivityStatus",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ActivityType",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ProblemMaster",
                schema: "SEBA");

            migrationBuilder.DropTable(
                name: "TaskSection",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "FuelStationInfo",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "PurchasePartsMaster",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "OrganizationTypes",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "SupplierTypes",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "VMSSupplier",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleInformation",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VMSResourceType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "ActionInfo",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "Doc",
                schema: "WMS");

            migrationBuilder.DropTable(
                name: "BalanceSheetMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "CSDetail",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DeliveryLocation",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "BOMDetails",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "ItemPriceFixing",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "PatientServiceDetail",
                schema: "HOSPTL");

            migrationBuilder.DropTable(
                name: "RentInvoiceDetail",
                schema: "Rental");

            migrationBuilder.DropTable(
                name: "IOUMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ItemReqMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "OpeningStock",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ProductionRequsitionMasters",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "PurchaseOrdersMasters",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "TransferMaster",
                schema: "Purchase");

            migrationBuilder.DropTable(
                name: "LedgerRelation",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "TransectionMode",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "VoucherMaster",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "EventCategory",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "PaymentHead",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "MemberType",
                schema: "Club");

            migrationBuilder.DropTable(
                name: "ApprovedforCro",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "SalesInvoiceMaster",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "Year",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Area",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ERPModules");

            migrationBuilder.DropTable(
                name: "PlanDetails",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OrganoOrganization",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "CourseType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingInstitute",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "SourceOfFund",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingSubject",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ResourcePerson",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "BonousCategory",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryHead",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryPeriod",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ProgramOutCome",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "WalletType",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "PosCustomer",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "LevelofEducation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "JobRequisition",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "DepriciationRate",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "PurchaseInfo",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "WorkProgressActivityTypes",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ProjectGridLocations",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Building",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "TaskProject",
                schema: "TMS");

            migrationBuilder.DropTable(
                name: "SpareParts",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleBodySubType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleBodyType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleGroup",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleManufacture",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleModel",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleOwnership",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleStatus",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "VehicleType",
                schema: "VMS");

            migrationBuilder.DropTable(
                name: "CSItemCategory",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RFQReqDetailPrice",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PatientService",
                schema: "HOSPTL");

            migrationBuilder.DropTable(
                name: "ItemPriceFixing",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "RentInvoiceMaster",
                schema: "Rental");

            migrationBuilder.DropTable(
                name: "ProductionBatchs",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "AutoVoucherName",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "VoucherType",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "AgreementDetails",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "SalesLevel",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "Plan",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "TrainingOffer",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "OrganizationType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "BonusType",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryType",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "SalaryYear",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "TaxYear",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "ProgramMaster",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramStatus",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "JobSource",
                schema: "RCRT");

            migrationBuilder.DropTable(
                name: "ProcurementSource",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "PurchaseOrderMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RegistrationType",
                schema: "FAMS");

            migrationBuilder.DropTable(
                name: "ProjectConstructionLocations",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RFQPriceMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RFQReqDetail",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RelSupplierCustomerResourse",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "ProductionPlans",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "Agreement",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "RatingYear",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "TaxCategory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "VatCategory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "TrainingCategory",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ProgramCategory",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramImpact",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProgramYear",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "CSMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DeliveryMode",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PaymentMode",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "PaymentTerms",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Organization",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RequisitionDetails",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "DistributorType",
                schema: "Distribution");

            migrationBuilder.DropTable(
                name: "Organization",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "RoleType",
                schema: "OSales");

            migrationBuilder.DropTable(
                name: "BOMMasters",
                schema: "PROD");

            migrationBuilder.DropTable(
                name: "AgreementCategory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "AgreementStatus",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "AgreementType",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Contacts",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "RatingCategory",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ProgramMainCategory",
                schema: "PM");

            migrationBuilder.DropTable(
                name: "ProcurementType",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ProcurementValue",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RFQMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "RequisitionMasters",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "TeamMember",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ItemSpecification",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Leads",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Resource",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "EmployeeInfo",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "FundSource",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "Project",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "StatusInfo",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "TeamMaster",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Item",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Ledger",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "Store",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "CompanyGroups");

            migrationBuilder.DropTable(
                name: "LeadProgressStatus",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "OwnerShipType",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Sector",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Source",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "CRMDepartment",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "CRMDesignation",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "ProfessionType",
                schema: "HOSPTL");

            migrationBuilder.DropTable(
                name: "AspNetUsers");

            migrationBuilder.DropTable(
                name: "Designation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "SalaryGrade",
                schema: "Payroll");

            migrationBuilder.DropTable(
                name: "DisabilityType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ServiceStatus",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmployeeType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "EmpExpertise",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Occupation",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrProgram",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrUnit",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "PNS",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Religion",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ShiftGroupMaster",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "ItemType",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "ItemCategory",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Unit",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "Currency",
                schema: "SCM");

            migrationBuilder.DropTable(
                name: "AccountGroup",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "StoreType",
                schema: "POS");

            migrationBuilder.DropTable(
                name: "UserTypes");

            migrationBuilder.DropTable(
                name: "CustomRole",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "GroupNature",
                schema: "ACCOUNT");

            migrationBuilder.DropTable(
                name: "UserTypeGroups");

            migrationBuilder.DropTable(
                name: "Companies");

            migrationBuilder.DropTable(
                name: "BankBranchDetails",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "BankBranch",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Bank",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Thanas");

            migrationBuilder.DropTable(
                name: "FIType",
                schema: "CRM");

            migrationBuilder.DropTable(
                name: "Districts");

            migrationBuilder.DropTable(
                name: "Divisions");

            migrationBuilder.DropTable(
                name: "Countries");

            migrationBuilder.DropTable(
                name: "SpecialBranchUnit",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Department",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrDivision",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrBranch",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "HrBranchType",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "Location",
                schema: "HR");

            migrationBuilder.DropTable(
                name: "FunctionInfo",
                schema: "HR");
        }
    }
}
