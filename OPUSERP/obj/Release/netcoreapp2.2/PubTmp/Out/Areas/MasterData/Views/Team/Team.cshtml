@model TeamViewModel
@{
    ViewData["Title"] = "Team";
    Layout = "~/Areas/CRMMasterData/Views/Shared/_CRMMasterDataForm.cshtml";
}

@section StyleMD{
    <style>
        .node {
            cursor: pointer;
            width: 240px;
        }

            .node circle {
                fill: #fff;
                stroke: steelblue;
                stroke-width: 2px;
            }

            .node text {
                font: 14px sans-serif;
                text-align: center;
            }

        .link {
            fill: none;
            stroke: #C80;
            stroke-width: 2px;
        }
    </style>
}

<div class="card" style="width: 100%;">
    <div class="card-body">
        <h5 class="card-title" style="color: #4e73df!important">Team Info</h5>
        <hr>
        <div class="container" id="entrydata">
            <form asp-area="MasterData" asp-controller="Team" asp-action="Team" method="post" data-parsley-validate="parsley">
                <div asp-validation-summary="All" class="text-danger"></div>
                <input type="hidden" name="parentId" id="parentId">
                <input type="hidden" name="tId" id="tId" value="0">
                <div class="form-group row">
                    <label for="moduleId" class="col-sm-3 col-form-label">Module</label>
                    <div class="col-sm-9">
                        <select class="form-control" id="moduleId" name="moduleId" data-parsley-required="true" data-parsley-trigger="keyup">
                            <option value="">Select Module</option>
                            @foreach (var data in Model.eRPModules)
                            {
                                <option value="@data.Id">@data.moduleName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="memberName" class="col-sm-3 col-form-label">Team Member Name</label>
                    <div class="col-sm-9">
                        <input type="text" data-parsley-required="true" data-parsley-trigger="keyup" class="form-control" name="memberName" id="memberName">
                    </div>
                </div>
                <div class="form-group row">
                    <label for="teamCode" class="col-sm-3 col-form-label">Team Code</label>
                    <div class="col-sm-9">
                        <input type="text" data-parsley-required="true" data-parsley-trigger="keyup" class="form-control" name="teamCode" id="teamCode">
                    </div>
                </div>
                <div class="form-group row">
                    <label for="aspnetuserId" class="col-sm-3 col-form-label">User Name</label>
                    <div class="col-sm-9">
                        <select class="form-control" id="aspnetuserId" name="aspnetuserId" data-parsley-required="true" data-parsley-trigger="keyup">
                            <option value="" id="aspnetuserId">Select User</option>
                            @foreach (var data in Model.aspNetUsers)
                            {
                                <option value="@data.Id">@data.UserName</option>
                            }
                        </select>
                    </div>
                </div>
                <button type="submit" value="Submit" class="btn btn-success btn-lg" style="float:right; margin-top:5px;"><i class="fas fa-save"></i></button>
            </form>
        </div>
        <div class="card-body" style="min-height: 600px;" id="teamShow">
            <div class="row">
                <div class="col-8">
                    <div class="container-fluid">
                        <div class="input-group mb-3 input-group-sm">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Selected Member</span>
                            </div>
                            <input id="selectedInputName" type="text" class="form-control" readonly>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="btn-group">
                        <a href="#" class="btn btn-info" data-toggle="modal" data-target="#addClusterModel" style="font-size:12px;">
                            <span data-toggle="tooltip" title='Add New Member'>
                                <i class="fas fa-tree"></i>
                            </span>
                        </a>
                    </div>
                </div>
            </div>

            <div id="organoDiv">

            </div>
        </div>
    </div>
</div>

<br />
<hr />
<div class="row clearfix">
    <div class="col-12">
        <div class="card mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">List of Team Info</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <table class="table table-striped table-bordered" id="teamTable">
                    <thead>
                        <tr>
                            <th width="5%">SL#</th>
                            <th>Module Name</th>
                            <th>Member Name</th>
                            <th>Member Code</th>
                            <th>Action</th>
</thead>
                    <tbody>
                        @{
                            int i = 1;
                            @foreach (var data in Model.teams)
                            {
                        <tr>
                            <td width="5%">@i</td>
                            <td>@data.module.moduleName</td>
                            <td>@data.memberName</td>
                            <td>@data.teamCode</td>
                            <td>
                                <a class="btn btn-success" title='Add Team Member' onclick="AddTeam(@data.Id,'@data.memberName','@data.teamCode',@data.moduleId)" href="javascript:void(0)"><i class="fa fa-plus"></i></a>&nbsp;&nbsp;
                                <a class="btn btn-primary" title='Edit Team' onclick="EditTeam(@data.Id,'@data.memberName','@data.teamCode','@data.aspnetuserId','@data.teamId',@data.moduleId)" href="javascript:void(0)"><i class="fa fa-edit"></i></a>&nbsp; &nbsp;
                                <a class="btn btn-danger" title="Delete Team" onclick="DeleteTeam(@data.Id)" href="#"><i class="fa fa-trash-alt"></i></a>
                            </td>
                        </tr>
                                i++;
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="addClusterModel" tabindex="-1" role="dialog" aria-labelledby="exampleaddClusterModel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row" style="width:100%;">
                    <div class="col-3">
                    </div>
                    <div class="col-8">
                        <h2 class="modal-title text-center" id="exampleModalLabel" style="padding-top: 14px;">Team Tree Settings </h2>
                    </div>
                    <div class="col-1">
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="container">
                    <form asp-area="MasterData" asp-controller="Team" asp-action="TeamParent" method="post" data-parsley-validate="parsley">

                        <div asp-validation-summary="All" class="text-danger"></div>

                        <div class="form-group row">
                            <label for="organizationName" class="col-sm-4 col-form-label">Parent  Name</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control" id="parentTeamName" readonly>
                                <input type="hidden" name="teamId" id="teamId">
                                <input type="hidden" name="ssteamId" id="ssteamId">
                                <input type="hidden" name="parentTeamCode" id="parentTeamCode">
                                <input type="hidden" name="teamModuleId" id="teamModuleId">
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="childmemberName" class="col-sm-4 col-form-label">Child  Name</label>
                            <div class="col-sm-8">
                                <input type="text" data-parsley-required="true" data-parsley-trigger="keyup" class="form-control" name="childmemberName" id="childmemberName">
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="aspnetuserIdChild" class="col-sm-4 col-form-label">User Name</label>
                            <div class="col-sm-8">
                                <select class="form-control" id="aspnetuserIdChild" name="aspnetuserIdChild" data-parsley-required="true" data-parsley-trigger="keyup">
                                    <option value="" id="aspnetuserIdChild">Select User</option>
                                    @foreach (var data in Model.aspNetUsers)
                                    {
                                        <option value="@data.Id">@data.UserName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <button type="submit" value="Submit" class="btn btn-success btn-lg" style="float:right; margin-top:5px;"><i class="fas fa-save"></i></button>

                    </form>
                </div>
            </div>
            <div class="modal-footer">

            </div>
        </div>
    </div>
</div>
@section ScriptsMD{
    <script src="https://d3js.org/d3.v3.min.js" type="text/javascript"></script>
    <script>
        $(document).ready(function () {
            $("#Team").addClass("active");
            $('#teamTable').DataTable();
            $("#teamShow").hide();
        });

        function DeleteTeam(Id) {
            swal({
                title: 'Are you sure?', text: 'Do you want to delete this record!', type: 'warning', showCancelButton: true, confirmButtonColor: '#3085d6', cancelButtonColor: '#d33', confirmButtonText: 'Yes, delete it!'
            }).then(function () {
                window.location.href = "/MasterData/Team/DeleteTeamById/?id=" + Id;
                swal({
                    title: '', text: 'Deleted Successfully!', type: 'success', showCancelButton: false, confirmButtonColor: '#3085d6', confirmButtonText: 'Ok!',
                });
            });
        }

        function EditTeam(Id, memberName, teamCode, aspnetuserId, teamId, moduleId) {
            $("#teamShow").hide();
            $("#entrydata").show();

            $("#tId").val(Id);
            $("#parentId").val(teamId);
            $("#memberName").val(memberName);
            $("#teamCode").val(teamCode);
            $("#aspnetuserId").val(aspnetuserId); 
            $("#moduleId").val(moduleId);
        }

        function AddTeam(Id, memberName, teamCode, moduleId) {
            $("#entrydata").hide();
            $("#teamShow").show();

            $("#teamId").val(Id);
            $("#memberName").val(memberName);
            $("#parentTeamCode").val(teamCode);
            $("#parentTeamName").val(memberName);
            $("#selectedInputName").val(memberName);
            $("#teamModuleId").val(moduleId);
            Common.Ajax('GET', '/MasterData/Team/GetTeamsJson/?org=' + Id, [], 'json', ajaxHandle);
        }

        function ajaxHandle(response) {
            console.log(response);
            GenerateTree(response.menus);
        }

        function wrap(text, width) {
            text.each(function () {
                var text = d3.select(this),
                    words = d3.select(this).data()[0].name.split("|").reverse(),
                    word,
                    line = [],
                    lineNumber = 0,
                    lineHeight = 1.1,
                    y = text.attr("y"),
                    dy = parseFloat(text.attr("dy")),
                    tspan = text.text(null).append("tspan").attr("x", 5).attr("y", y).attr("dy", dy + "em");
                while (word = words.pop()) {
                    line.push(word);
                    tspan.text(line.join(" "));
                    //if (tspan.node().getComputedTextLength() > width) {
                    line.pop();
                    tspan.text(line.join(" "));
                    line = [word];
                    tspan = text.append("tspan").attr("x", 5).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                    // }
                }
                d3.select(this.parentNode.children[0]).attr("height", 13 * (lineNumber + 1));
            });
        };

        var margin = {
            top: 20,
            right: 120,
            bottom: 20,
            left: 20
        },
            width = 960 - margin.right - margin.left,
            height = 800 - margin.top - margin.bottom;

        var i = 0,
            duration = 750,
            rectW = 105,
            fontSize = 10,
            rectH = 20;
        var root;
        var tree = d3.layout.tree().nodeSize([120, 110]);
        var diagonal = d3.svg.diagonal()
            .projection(function (d) {
                return [d.x + rectW / 2, d.y + rectH / 2];
            });

        var svg = d3.select("#organoDiv").append("svg").attr("width", 1000).attr("height", 1000)
            .call(zm = d3.behavior.zoom().scaleExtent([1, 3]).on("zoom", redraw)).append("g")
            .attr("transform", "translate(" + 350 + "," + 20 + ")");

        //necessary so that zoom knows where to zoom and unzoom from
        zm.translate([350, 20]);
        //

        d3.select("#organoDiv").style("height", "600px");

        function GenerateTree(tempData, tempdepth) {

            root = JSON.parse(tempData);
            console.log(root);

            root.x0 = 0;
            root.y0 = height / 2;
            root.children.forEach(collapse);
            update(root);

        }


        function collapse(d) {
            if (d.children) {
                d._children = d.children;
                d._children.forEach(collapse);
                d.children = null;
            }
        }


        function update(source) {

            // Compute the new tree layout.
            var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) {
                d.y = d.depth * 180;
            });

            // Update the nodes…
            var node = svg.selectAll("g.node")
                .data(nodes, function (d) {
                    return d.id || (d.id = ++i);
                });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) {
                    return "translate(" + source.x0 + "," + source.y0 + ")";
                }).on("click", click);

            nodeEnter.append("rect")
                .attr("width", rectW)
                //.attr("height", rectH)
                //.attr("height", function (d) { if(d.size == 1)  return rectH;  else return 80})
                .attr("stroke", "blue")
                .attr("stroke-width", 1)
                .style("fill", function (d) {
                    return d._children ? "lightsteelblue" : "#fff";
                });

            nodeEnter.append("text")
                .attr("x", 10)
                .attr("y", 10)
                .attr("dy", "0")
                .attr("text-anchor", "start")
                .text(function (d) { return d.name; });

            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                });

            nodeUpdate.select("rect")
                .attr("width", rectW)
                //.attr("height", function (d) { if(d.size == 1)  return rectH;  else return 80})
                .attr("stroke", "black")
                .attr("stroke-width", 1)
                .style("fill", function (d) {
                    return d._children ? "lightsteelblue" : "#fff";
                });

            nodeUpdate.select("text")
                .style("fill-opacity", 1);
            nodeUpdate.select("text").call(wrap, rectW);
            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + source.x + "," + source.y + ")";
                }).remove();

            nodeExit.select("rect")
                .attr("width", rectW)
                //.attr("height", function (d) { if(d.size == 1)  return rectH;  else return 80})
                .attr("stroke", "black")
                .attr("stroke-width", 1);

            nodeExit.select("text");

            // Update the links…
            var link = svg.selectAll("path.link")
                .data(links, function (d) {
                    return d.target.id;
                });

            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("x", rectW / 2)
                .attr("y", rectH / 2)
                .attr("d", function (d) {
                    var o = {
                        x: source.x0,
                        y: source.y0
                    };
                    return diagonal({
                        source: o,
                        target: o
                    });
                });

            // Transition links to their new position.
            link.transition()
                .duration(duration)
                .attr("d", diagonal);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                .duration(duration)
                .attr("d", function (d) {
                    var o = {
                        x: source.x,
                        y: source.y
                    };
                    return diagonal({
                        source: o,
                        target: o
                    });
                }).remove();

            // Stash the old positions for transition.
            nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        }

        // Toggle children on click.
        function click(d) {

            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            $("#selectedInputName,#childmemberName,#organizationName,#organoOrganizationName").val(d.nameBN);
            $("#organoOrganizationParrentId,#teamId,#organoOrganizationId").val(d.data);

            update(d);
        }

        //Redraw for zoom
        function redraw() {
            //console.log("here", d3.event.translate, d3.event.scale);
            svg.attr("transform",
                "translate(" + d3.event.translate + ")"
                + " scale(" + d3.event.scale + ")");
        }
    </script>
}

