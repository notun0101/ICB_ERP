@model ItemViewModel
@{
    ViewData["Title"] = "Item List";
    Layout = "~/Areas/Auth/Views/Shared/_MasterLayout.cshtml";
}
@section Style{
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
    <style>
        .ui-autocomplete {
            cursor: pointer;
            height: 400px;
            width: 300px;
            overflow-y: scroll;
            background-color: white;
            color: rgb(0,188,212);
            z-index: 1050;
        }

        .node {
            cursor: pointer;
            width: 500px;
        }

            .node circle {
                fill: #fff;
                stroke: steelblue;
                stroke-width: 2px;
            }

            .node text {
                font: 14px sans-serif;
                text-align: center;
            }

        .link {
            fill: none;
            stroke: #C80;
            stroke-width: 2px;
        }
    </style>
}
<br />



<div class="row clearfix">
    <div class="col-12">
        <div class="card mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Item List</h6>
                <a class="btn btn-info" target="_blank" href="/SCMReport/ReportMaster/ItemListPdfAction">Print</a>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <table class="table table-striped table-bordered" id="itemTable">
                    <thead>
                        <tr>
                            <th>ItemCode</th>
                            <th>ItemName</th>
                            <th>Item Category</th>


                            <th>SKU</th>
                            <th>Spec Name</th>
                            <th>Spec</th>
                    </thead>
                    <tbody>
                        @{
                            int? ItemId = 0;
                            int? ItemSpecId = 0;
                            int i = 1;
                            @foreach (var data in Model.specificationDetails.OrderBy(x => x.itemSpecification.itemId))
                            {
                                if (ItemId != data.itemSpecification.itemId)
                                {
                                    int jj = Model.specificationDetails.Where(x => x.itemSpecification.itemId == data.itemSpecification.itemId).Count();

                                    <tr>
                                        <td rowspan="@jj" style="vertical-align : middle;text-align:center;">@data?.itemSpecification?.Item?.itemCode</td>
                                        <td rowspan="@jj" style="vertical-align : middle;text-align:center;">@data?.itemSpecification?.Item?.itemName</td>
                                        <td rowspan="@jj" style="vertical-align : middle;text-align:center;">@data?.itemSpecification?.Item?.parent?.categoryName</td>
                                        @if (ItemSpecId != data.itemSpecificationId)
                                        {
                                            int jjj = Model.specificationDetails.Where(x => x.itemSpecificationId == data.itemSpecificationId).Count();
                                            <td rowspan="@jjj" style="vertical-align : middle;text-align:center;">@data?.itemSpecification?.SKUNumber</td>
                                            <td rowspan="@jjj" style="vertical-align : middle;text-align:center;">@data?.itemSpecification?.specificationName</td>
                                            <td>@data?.specificationCategory?.specificationCategoryName-@data?.value</td>
                                        }
                                        else
                                        {
                                            <td>@data?.specificationCategory?.specificationCategoryName-@data?.value</td>
                                        }



                                    </tr>

                                }
                                else
                                {

                                    <tr>

                                        @if (ItemSpecId != data.itemSpecificationId)
                                        {
                                            int jjjj = Model.specificationDetails.Where(x => x.itemSpecificationId == data.itemSpecificationId).Count();
                                            <td rowspan="@jjjj" style="vertical-align : middle;text-align:center;">@data?.itemSpecification?.SKUNumber</td>
                                            <td rowspan="@jjjj" style="vertical-align : middle;text-align:center;">@data?.itemSpecification?.specificationName</td>
                                            <td>@data?.specificationCategory?.specificationCategoryName-@data?.value</td>
                                        }
                                        else
                                        {
                                            <td>@data?.specificationCategory?.specificationCategoryName-@data?.value</td>
                                        }

                                    </tr>

                                }
                                ItemId = data.itemSpecification.itemId;
                                ItemSpecId = data.itemSpecificationId;

                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addClusterModel" tabindex="-1" role="dialog" style="padding-left:2px" aria-labelledby="exampleaddClusterModel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="max-width:1400px" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row" style="width:100%;">
                    <div class="col-sm-3">
                        @*<img src="~/images/Bangladesh-Govt-Logo.jpg" style="height:50px; width:50px;" />*@
                    </div>
                    <div class="col-sm-8">
                        <h2 class="modal-title text-center" id="exampleModalLabel" style="padding-top: 14px;">Item Tree Sheet </h2>
                    </div>
                    <div class="col-sm-1">
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                </div>

            </div>
            <div class="modal-body">
                <div class="row" id="organoDiv">

                </div>
            </div>
            <div class="modal-footer">

            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script src="http://code.jquery.com/ui/1.11.4/jquery-ui.js" type="text/javascript"></script>
    <script src="https://code.jquery.com/jquery-migrate-3.0.0.min.js" type="text/javascript"></script>
    <script src="https://d3js.org/d3.v3.min.js" type="text/javascript"></script>
    <script>
        function ajaxSup(response) {
            var options = '<option value="">Select</option>';
            $.each(response, function (i, item) {
                options += '<option value="' + item.Id + '">' + item.specificationCategoryName + '</option>';
            });
            $('#specCategory').empty();
            $('#specCategory').append(options);
        }
        $(document).ready(function () {
            $("#Item").addClass("active");
            $('#itemTable').DataTable();
            $("#specCategory").change(function () {
                $('#catValue').val('');
            });
            $("#parentName").change(function () {
                var Id = $("#parentId").val();

                Common.Ajax('GET', '/SCMMasterData/Item/getspeccat/' + Id, [], 'json', ajaxSup, false);
            });

            Common.Ajax('GET', '/global/api/patentCatItem/', [], 'json', GetItemList);

        });

        function hideelement(name) {

            $('#s' + name).remove();
            $('#d' + name).remove();

        }
        function Remove(Id) {
            chk = confirm('Do you want to delete this?');
            if (chk) {
                location.replace("/SCMMasterData/Item/Delete/" + Id);
            } else {
                return false;
            }
        }

        function GetSpecName(response) {
            console.log(response);
            $('#itemspecification').empty();
            $.each(response, function (i, item) {
                $("#itemSpecificationId").val(item.Id);
            });
        }
        function GetItemName(response) {
            $("#parentName").val(response.categoryName);
        }
        function GetItemList(response) {
            var lstPOP = [];
            $.each(response, function (i, option) {
                var obj = new Object();
                obj.key = option.Id;
                obj.value = option.categoryName;
                lstPOP[lstPOP.length] = obj;
            });
            $('#parentName').autocomplete({
                source: lstPOP,
                select: function (event, ui) {
                    $("#parentName").val(ui.item.value);
                    $("#parentId").val(ui.item.key);
                }
            });
        }

        function Edit(Id, itemName, unitId, itemCode, itemDescription, parentId, itemTypeId) {
            $("#itemId").val(Id);
            $("#itemName").val(itemName);
            $("#unitId").val(unitId);
            $("#itemCode").val(itemCode);
            $("#itemDescription").val(itemDescription);
            $("#parentId").val(parentId);
            Common.Ajax('GET', '/SCMMasterData/Item/getspeccat/' + parentId, [], 'json', ajaxSup, false);
            $("#itemTypeId").val(itemTypeId);
            Common.Ajax('GET', '/SCMMasterData/Item/GetAllSpecificationDetailByitemId/?itemId=' + $("#itemId").val(), [], 'json', ajaxGetAllSpecificationDetailByitemId);
            //Common.Ajax('GET', '/global/api/ItemSpec/' + Id, [], 'json', GetSpecName);
            Common.Ajax('GET', '/global/api/CatParent/' + parentId, [], 'json', GetItemName);
        }


        function AdditemDetails() {
            var ifExistIndex = window.localStorage.getItem("holdIndex");
            var index = "0";
            if (ifExistIndex == "null" || ifExistIndex == null) {
                index = $("#tblitemDetails tbody>tr").length;
            }
            else {
                index = ifExistIndex;
                tdRID = $("#tblitemDetails tbody >tr:eq(" + ifExistIndex + ") td:eq(0) .clsspecificationCategoryId").val();
            }

            if ($("#itemspecification").val() == "") {
                alert("Plaese Enter Specification Name.");
                return false
            }

            if ($("#specCategory").val() == "") {
                alert("Plaese Enter Specification Category.");
                return false
            }
            if ($("#catValue").val() == "") {
                alert("Plaese Enter Category Value.");
                return false
            }

            let id = parseInt($("#detailsId").val()) ? parseInt($("#detailsId").val()) : 0;
            var itemSpecificationName = $("#itemspecification").val();
            var sku = $("#sku").val();
            var skuShow = $("#sku").val();
            var itemSpecificationNameShow = $("#itemspecification").val();
            var specificationCategoryId = $("#specCategory").val();
            var specificationCategoryName = $("#specCategory option:selected").text();
            var catValue = $("#catValue").val();
            var RowCount = $("#tblitemDetails tbody>tr").length;
            var editOption = parseInt($('#IsEdit').val()) ? parseInt($('#IsEdit').val()) : 0;

            for (i = 0; i <= RowCount; i++) {
                var _itemSpecificationName = $("#itemSpecificationNameVD" + i).val();
                var _sku = $("#sku" + i).val();
                var _specificationCategoryId = $("#specificationCategoryId" + i).val();
                if ((_sku == sku && _specificationCategoryId == specificationCategoryId) && editOption == 0) {
                    //alert('You have already added this Specification!!');
                    //return false
                }
                //if (editOption == 1) {
                //    skuShow = itemSpecificationNameShowedit;
                //}
                //else {
                //    if (_sku == sku) {
                //        skuShow = "";
                //        itemSpecificationNameShow=""
                //    }
                //}
                //if (_sku == sku) {
                //    skuShow = "";
                //    itemSpecificationNameShow = ""
                //}
            }

            var dtTable = $("#tblitemDetails");
            var tableBody = dtTable.find('tbody');
            var trHtml = '<tr id=' + index + '>' +
                '<td>' + skuShow + '<input type="hidden" id="sku' + index + '" name="skuList" class="clsitemSpecificationName" value="' + skuShow + '"/></td>' +
                '<td>' + itemSpecificationNameShow + '<input type="hidden" id="itemSpecificationName' + index + '" name="itemSpecificationName" class="clsitemSpecificationName" value="' + itemSpecificationNameShow + '"/><input type="hidden" id="itemSpecificationNameVD' + index + '" name="itemSpecificationNameVD" class="clsitemSpecificationNameVD" value="' + itemSpecificationName + '"/></td>' +
                '<td>' + specificationCategoryName + '<input type="hidden" name="id"class="clsId" value="' + id + '"><input type="hidden" id="specificationCategoryId' + index + '" name="specificationCategoryId" class="clsspecificationCategoryId" value="' + specificationCategoryId + '"/></td>' +
                '<td>' + catValue + '<input type="hidden" id="CategoryValue' + index + '" name="CategoryValue" class="clsCategoryValue" value="' + catValue + '"/></td>' +
                '<td><a href="javascript:void(0)"style="background-color:red;border-color:red" data-toggle="tooltip" title="Delete" class="btn btn-danger btn-xs" onclick="Delete(' + index + ')"><i class="fa fa-trash"></i></a>&nbsp;&nbsp;' +
                '<a onclick="EditTbl(' + index + "," + specificationCategoryId + ", '" + itemSpecificationName + "','" + catValue + "','" + itemSpecificationNameShow + "','" + sku + "'," + id + ')" href="javascript:void(0)" title="Edit" class="btn btn-success btn-xs" > <i class="fa fa-edit"></i></a >' +


                '</tr>';
            if (ifExistIndex == null || ifExistIndex == "null") {
                tableBody.append(trHtml);
            }
            else {
                var rowUpdate = $("#tblitemDetails tbody >tr:eq(" + ifExistIndex + ")");
                rowUpdate.replaceWith(trHtml);
                window.localStorage.setItem("holdIndex", null);
                ifExistIndex = null;
            }

            Refresh();
        }

        var itemSpecificationNameShowedit = "";

        function EditTbl(index, specificationCategoryId, itemSpecificationName, catValue, itemSpecificationNameShow, sku, Id) {
            var rightIndex = index;
            itemSpecificationNameShowedit = itemSpecificationNameShow;
            $("#IsEdit").val(1);
            $('#detailsId').val(Id);
            $('#itemspecification').val(itemSpecificationName);
            $('#specCategory').val(specificationCategoryId);
            $('#catValue').val(catValue);
            $('#sku').val(sku);

            $("#sku").prop("disabled", true);
            $("#itemspecification").prop("disabled", true);
            //$("#specCategory").prop("disabled", true);

            window.localStorage.setItem('holdIndex', null);
            if (rightIndex != null) {
                window.localStorage.setItem('holdIndex', rightIndex);
            }
        }

        function Refresh() {
            $('#detailsId').val('');
            $("#IsEdit").val(0);

            $('#specCategory').val('');
            $('#catValue').val('');

            $("#sku").prop("disabled", false);
            $("#itemspecification").prop("disabled", false);
            //$("#specCategory").prop("disabled", false);

            window.localStorage.setItem("holdIndex", null);
            ifExistIndex = null;
        }

        function RefreshAll() {
            location.reload();
        }

        function Delete(index) {
            swal({
                title: 'Are you sure?', text: 'Do you want to delete this record!', type: 'warning', showCancelButton: true, confirmButtonColor: '#3085d6', cancelButtonColor: '#d33', confirmButtonText: 'Yes, delete it!'
            }).then(function () {
                $("#tblitemDetails #" + index).remove();
                swal('', 'Deleted Successfully!', 'success');
            });
        }

        function ajaxGetAllSpecificationDetailByitemId(response) {
            //console.log(response);
            var ifExistIndex = window.localStorage.getItem("holdIndex");
            var index = "0";
            if (ifExistIndex == "null" || ifExistIndex == null) {
                index = $("#tblitemDetails tbody>tr").length;
            }
            else {
                index = ifExistIndex;
                tdRID = $("#tblitemDetails tbody >tr:eq(" + ifExistIndex + ") td:eq(0) .clsspecificationCategoryId").val();
            }
            $("#tblitemDetails tbody>tr").empty();
            $.each(response, function (key, value) {
                var itemSpecificationName = value.specificationName;
                var itemSpecificationNameShow = value.specificationName;
                var sku = value.SKUNumber;
                var skuShow = value.SKUNumber;
                var RowCount = $("#tblitemDetails tbody>tr").length;
                for (i = 0; i <= RowCount; i++) {
                    var _sku = $("#sku" + i).val();

                    //if (_sku == sku) {
                    //    skuShow = "";
                    //    itemSpecificationNameShow = "";
                    //}
                }

                index = $("#tblitemDetails tbody>tr").length;
                var dtTable = $("#tblitemDetails");
                var tableBody = dtTable.find('tbody');
                var trHtml = '<tr id=' + index + '>' +
                    '<td>' + skuShow + '<input type="hidden" id="sku' + index + '" name="skuList" class="clsitemSpecificationName" value="' + skuShow + '"/></td>' +
                    '<td>' + itemSpecificationNameShow + '<input type="hidden" id="itemSpecificationName' + index + '" name="itemSpecificationName" class="clsitemSpecificationName" value="' + itemSpecificationNameShow + '"/><input type="hidden" id="itemSpecificationNameVD' + index + '" name="itemSpecificationNameVD" class="clsitemSpecificationNameVD" value="' + itemSpecificationName + '"/></td>' +
                    '<td>' + value.specificationCategoryName + '<input type="hidden" name="id"class="clsId" value="' + value.Id + '"><input type="hidden" id="specificationCategoryId' + index + '" name="specificationCategoryId" class="clsspecificationCategoryId" value="' + value.specificationCategoryId + '"/></td>' +
                    '<td>' + value.value + '<input type="hidden" id="CategoryValue' + index + '" name="CategoryValue" class="clsCategoryValue" value="' + value.value + '"/></td>' +
                    '<td><a href="javascript:void(0)"style="background-color:red;border-color:red" data-toggle="tooltip" title="Delete" class="btn btn-danger btn-xs" onclick="Delete(' + index + ')"><i class="fa fa-trash"></i></a>&nbsp;&nbsp;' +
                    '<a onclick="EditTbl(' + index + "," + value.specificationCategoryId + ", '" + value.specificationName + "',  '" + value.value + "','" + itemSpecificationNameShow + "','" + sku + "'," + value.Id + ')" href="javascript:void(0)" title="Edit" class="btn btn-success btn-xs" > <i class="fa fa-edit"></i></a >' +


                    '</tr>';
                if (ifExistIndex == null || ifExistIndex == "null") {
                    tableBody.append(trHtml);
                }
                else {
                    var rowUpdate = $("#tblitemDetails tbody >tr:eq(" + ifExistIndex + ")");
                    rowUpdate.replaceWith(trHtml);
                    window.localStorage.setItem("holdIndex", null);
                    ifExistIndex = null;
                }
            })

            index = index + 1;
        }

        function ShowTree() {
            Id = $("#parentId").val();
            Common.Ajax('GET', '/SCMMasterData/ItemCategory/GetCategoriesJson/?org=' + Id, [], 'json', ajaxHandle);
        }

        function ajaxHandle(response) {
            console.log(response);
            GenerateTree(response.menus);
        }

        function wrap(text, width) {
            text.each(function () {
                var text = d3.select(this),
                    words = d3.select(this).data()[0].name.split("|").reverse(),
                    word,
                    line = [],
                    lineNumber = 0,
                    lineHeight = 1.1,
                    y = text.attr("y"),
                    dy = parseFloat(text.attr("dy")),
                    tspan = text.text(null).append("tspan").attr("x", 10).attr("y", y).attr("dy", dy + "em");
                while (word = words.pop()) {
                    line.push(word);
                    tspan.text(line.join(" "));
                    //if (tspan.node().getComputedTextLength() > width) {
                    line.pop();
                    tspan.text(line.join(" "));
                    line = [word];
                    tspan = text.append("tspan").attr("x", 10).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                    // }
                }
                d3.select(this.parentNode.children[0]).attr("height", 20 * (lineNumber + 1));
            });
        };

        var margin = {
            top: 20,
            right: 120,
            bottom: 20,
            left: 20
        },
            width = 960 - margin.right - margin.left,
            height = 800 - margin.top - margin.bottom;

        var i = 0,
            duration = 750,
            rectW = 105,
            fontSize = 10,
            rectH = 20;
        var root;
        var tree = d3.layout.tree().nodeSize([120, 110]);
        var diagonal = d3.svg.diagonal()
            .projection(function (d) {
                return [d.x + rectW / 2, d.y + rectH / 2];
            });

        var svg = d3.select("#organoDiv").append("svg").attr("width", 1400).attr("height", 1400)
            .call(zm = d3.behavior.zoom().scaleExtent([1, 4]).on("zoom", redraw)).append("g")
            .attr("transform", "translate(" + 350 + "," + 20 + ")");

        //necessary so that zoom knows where to zoom and unzoom from
        zm.translate([350, 20]);
        //

        d3.select("#organoDiv").style("height", "600px");

        function GenerateTree(tempData, tempdepth) {

            root = JSON.parse(tempData);
            console.log(root);

            root.x0 = 0;
            root.y0 = height / 2;
            root.children.forEach(collapse);
            update(root);

        }


        function collapse(d) {
            if (d.children) {
                d._children = d.children;
                d._children.forEach(collapse);
                d.children = null;
            }
        }


        function update(source) {

            // Compute the new tree layout.
            var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) {
                d.y = d.depth * 180;
            });

            // Update the nodes…
            var node = svg.selectAll("g.node")
                .data(nodes, function (d) {
                    return d.id || (d.id = ++i);
                });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) {
                    return "translate(" + source.x0 + "," + source.y0 + ")";
                }).on("click", click);

            nodeEnter.append("rect")
                .attr("width", rectW)
                //.attr("height", rectH)
                //.attr("height", function (d) { if(d.size == 1)  return rectH;  else return 80})
                .attr("stroke", "blue")
                .attr("stroke-width", 1)
                .style("fill", function (d) {
                    return d._children ? "lightsteelblue" : "#fff";
                });

            nodeEnter.append("text")
                .attr("x", 10)
                .attr("y", 10)
                .attr("dy", "0")
                .attr("text-anchor", "start")
                .text(function (d) { return d.name; });

            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                });

            nodeUpdate.select("rect")
                .attr("width", rectW)
                //.attr("height", function (d) { if(d.size == 1)  return rectH;  else return 80})
                .attr("stroke", "black")
                .attr("stroke-width", 1)
                .style("fill", function (d) {
                    return d._children ? "lightsteelblue" : "#fff";
                });

            nodeUpdate.select("text")
                .style("fill-opacity", 1);
            nodeUpdate.select("text").call(wrap, rectW);
            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + source.x + "," + source.y + ")";
                }).remove();

            nodeExit.select("rect")
                .attr("width", rectW)
                //.attr("height", function (d) { if(d.size == 1)  return rectH;  else return 80})
                .attr("stroke", "black")
                .attr("stroke-width", 1);

            nodeExit.select("text");

            // Update the links…
            var link = svg.selectAll("path.link")
                .data(links, function (d) {
                    return d.target.id;
                });

            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("x", rectW / 2)
                .attr("y", rectH / 2)
                .attr("d", function (d) {
                    var o = {
                        x: source.x0,
                        y: source.y0
                    };
                    return diagonal({
                        source: o,
                        target: o
                    });
                });

            // Transition links to their new position.
            link.transition()
                .duration(duration)
                .attr("d", diagonal);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                .duration(duration)
                .attr("d", function (d) {
                    var o = {
                        x: source.x,
                        y: source.y
                    };
                    return diagonal({
                        source: o,
                        target: o
                    });
                }).remove();

            // Stash the old positions for transition.
            nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        }

        // Toggle children on click.
        function click(d) {

            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            $("#selectedInputName,#parentName,#organizationName,#organoOrganizationName").val(d.nameBN);
            $("#organoOrganizationParrentId,#parentId,#organoOrganizationId").val(d.data);

            update(d);
        }

        //Redraw for zoom
        function redraw() {
            //console.log("here", d3.event.translate, d3.event.scale);
            svg.attr("transform",
                "translate(" + d3.event.translate + ")"
                + " scale(" + d3.event.scale + ")");
        }
    </script>
}

