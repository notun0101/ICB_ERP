@model EmployeeArrearInfoViewModel
@{
	ViewData["Title"] = "CustomArrear";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Style{
	<style>
		ul.ui-autocomplete {
			z-index: 99999999;
		}
	</style>
}

<div class="card" style="width: 100%;">
	<div class="card-header row outBox" style="background-color: #EAF6FA;padding: 0; color: black;">
		<div class="col-md-4" style="display: flex; justify-content: flex-start; align-items: center; ">
			<h5 class="card-title" style="color: black; margin: 8px;">Employee's Custom Arrear</h5>
		</div>
		<div class="col-md-8">
			<div style="float: right; margin: 16px;">
				<a class='btn btn-info' style="margin-right:6px;" data-toggle='tooltip' title='Go Back' href='/Home/GridMenuPage?moduleId=10&perentId=1268'><i class="fas fa-angle-double-left"> <span style="">Back</span></i></a>
			</div>
		</div>
	</div>
	<div class="card-body">
		<div class="container">
			<form asp-area="Payroll" asp-controller="Adjustment" asp-action="SaveCustomArrear" id="FormId" method="post" data-parsley-validate="parsley">

				<div asp-validation-summary="All" class="text-danger"></div>
				<div class="row">
					<input type="hidden" id="employeeArrearId" name="employeeArrearId" value="0">
					<input type="hidden" id="employeeInfoId" name="employeeInfoId">
					<input type="hidden" id="empCode" name="empCode">
					<div class="col-sm-6">
						<div class="form-group row">
							<label for="employeeInfoId" class="col-sm-4 col-form-label">Employee's Name <span style="color:red;">*</span></label>
							<div class="col-sm-8">
								<input type="text" class="form-control" id="employeeName" name="employeeName" data-parsley-required="true" data-parsley-trigger="keyup">
							</div>
						</div>

						<div class="form-group row">
							<label for="posting" class="col-sm-4 col-form-label">Posting</label>
							<div class="col-sm-8">
								<input type="text" class="form-control" id="posting" value="" name="posting" readonly>
							</div>
						</div>

						<div class="form-group row">
							<label for="periodId" class="col-sm-4 col-form-label">Salary Period <span style="color:red;">*</span></label>
							<div class="col-sm-8">
								<select name="periodId" id="periodId" class="form-control" data-parsley-required="true">
									@foreach (var data in Model.salaryPeriods.Where(x => x.lockLabel != 6 && x.salaryTypeId == 1).OrderByDescending(x => x.Id))
									{
										<option value="@data.Id">@data.periodName</option>
									}
								</select>
							</div>
						</div>

						<div class="form-group row">
							<label for="Fromdate" class="col-sm-4 col-form-label">From Date </label>
							<div class="col-sm-8">
								<input type="text" class="form-control datePicker" id="Fromdate" name="Fromdate" readonly="readonly">
							</div>
						</div>

						<div class="form-group row">
							<label for="amount" class="col-sm-4 col-form-label">Arrear Amount <span style="color:red;">*</span></label>
							<div class="col-sm-8">
								<input type="number" class="form-control" id="amount" name="amount" data-parsley-required="true" style="text-align:right">
							</div>
						</div>

						<div class="form-group row">
							<label for="currentBasic" class="col-sm-4 col-form-label">Basic + Arrear <span style="color:red;">*</span></label>
							<div class="col-sm-8">
								<input type="text" class="form-control" id="currentBasic" name="currentBasic" data-parsley-required="true" style="text-align:right" readonly>
							</div>
						</div>
					</div>
					<div class="col-sm-6">
						<div class="form-group row">
							<label for="Designation" class="col-sm-4 col-form-label">Designation </label>
							<div class="col-sm-8">
								<input type="text" class="form-control" id="Designation" name="Designation" readonly="readonly">
							</div>
						</div>
						<div class="form-group row">
							<label for="PrevBasic" class="col-sm-4 col-form-label">Previous Basic </label>
							<div class="col-sm-8">
								<input type="text" class="form-control" id="PrevBasic" name="PrevBasic" readonly="readonly">
							</div>
						</div>
						<div class="form-group row">
							<label for="oldBasic" class="col-sm-4 col-form-label">Current Basic </label>
							<div class="col-sm-8">
								<input type="text" class="form-control" id="oldBasic" name="oldBasic" readonly="readonly">
							</div>
						</div>
						<div class="form-group row">
							<label for="ToDate" class="col-sm-4 col-form-label">To Date </label>
							<div class="col-sm-8">
								<input type="text" class="form-control datePicker" id="ToDate" name="ToDate" readonly="readonly">
							</div>
						</div>

						<div class="form-group row">
							<label for="CalculatedArrear" class="col-sm-4 col-form-label">Calculated Arrear <span style="color:red;">*</span></label>
							<div class="col-sm-8">
								<input type="text" class="form-control" id="CalculatedArrear" name="CalculatedArrear" data-parsley-required="true" style="text-align:right" readonly>
							</div>
						</div>

					</div>
				</div>
				<button type="submit" id="submitbtn" value="Submit" class="btn btn-success btn-lg" style="float:right; margin-top:5px;display:none;"><i class="fas fa-save"></i></button>
				<button type="button" id="submit" value="Submit" class="btn btn-success" style="float:right; margin-top:5px;"><i class="fas fa-save"></i> Save</button>
			</form>
		</div>
	</div>
</div>

<hr />
<div class="row clearfix">
	<div class="col-12">
		<div class="card mb-4">
			<!-- Card Header - Dropdown -->
			<div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
				<h6 class="m-0 font-weight-bold">Employee Custom Arrear</h6>
			</div>
			<!-- Card Body -->
			<div class="card-body">
				<table class="table table-striped table-bordered" id="ArrearTbl">
					<thead>
						<tr>
							<th>Employee Id</th>
							<th>Employee Name</th>
							<th>Salary Period</th>
							<th>Amount</th>
							<th>Old Basic</th>
							<th>Current Basic</th>
							<th>Days</th>
							<th>Action</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var item in Model.employeeArrearInfos.Where(x => x.type == 2))
						{
							<tr>
								<td class="text-center">@item.employee?.employeeCode</td>
								<td>@item.employee?.nameEnglish</td>
								<td>@item.period?.periodName</td>
								<td class="text-right">@item.amount</td>
								<td class="text-right">@item.oldBasic</td>
								<td class="text-right">@item.currentBasic</td>
								<td class="text-center">@((Convert.ToDateTime(item.ToDate).Date - Convert.ToDateTime(item.Fromdate).Date).Days + 1)</td>
								<td>
									<a href="javascript:void(0)" class="btn btn-danger btn-sm" onclick="DeleteArrearInfo(@item.Id)"><i class="fas fa-trash-alt"></i></a>
									<a href="javascript:void(0)" class="btn btn-success btn-sm" onclick="EditArrear(@item.Id, @item.amount, @item.employeeId, @item.periodId, @item.currentBasic, '@item.Fromdate', '@item.ToDate', @item.CalculatedArrear, @item.oldBasic, @item.currentBasic)"><i class="fas fa-pen-alt"></i></a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>






@section Scripts{
	<script>
		$(document).ready(function () {
			$('.datePicker').datepicker({ dateFormat: "dd-M-yy", showAnim: "scale", changeMonth: true, changeYear: true, yearRange: "2020:2100" });

			$('#arrearTable').DataTable();
			Common.Ajax('GET', '/global/api/GetActiveEmployeeInfoWithPosting', [], 'json', ajaxGetEmployees);

			$("#txtArrear").keyup(function () {
				GetTotalAmount();
			});

			$("#submit").click(function () {
				swal({
					title: 'Are you sure?', text: 'Do you want to submit this record!', type: 'warning', showCancelButton: true, confirmButtonColor: '#3085d6', cancelButtonColor: '#d33', confirmButtonText: 'Yes, submit it!'
				}).then(function () {
					$("#submitbtn").click();
				});
			});

			$('#amount').on('keyup', function () {
				calculateArrear();
			})

			$('#Fromdate').on('change', function () {
				calculateArrear();
			})

			$('#ToDate').on('change', function () {
				calculateArrear();
			})

			$('#ArrearTbl').DataTable().destroy();
			$('#ArrearTbl').DataTable({
				dom: "<'row'<'col-sm-12 col-md-2'l><'col-sm-12 col-md-3'B><'col-sm-12 col-md-7'f>>" +
					"<'row'<'col-sm-12't>>" + "<'row'<'col-sm-12 col-md-6'i><'col-sm-12 col-md-6'pr>>",
				buttons: [
					{

						extend: 'excelHtml5',
						text: '<i class="fa fa-file-excel"></i> Excel',
						titleAttr: 'Excel',
						exportOptions: {
							columns: ':not(:last-child)'
						}
					},
					{
						extend: 'csvHtml5',
						text: '<i class="fa fa-file-excel"></i> CSV',
						titleAttr: 'CSV',
						exportOptions: {
							columns: [0, 1, 2, 3, 4]
						},
						title: 'ERP',
						messageTop: 'Status List'
					},
					{
						extend: 'print',
						text: '<i class="fa fa-print"></i> Print',
						titleAttr: 'Print',
						title: 'ERP',
						messageTop: 'Status List',
						exportOptions: {
							columns: [0, 1, 2, 3, 4]
						},
						customize: function (doc) {
							$(doc.document.body).find('h1').css('font-size', '20pt');
							$(doc.document.body).find('h1').css('font-family', "'Times New Roman', Times, serif");
							$(doc.document.body).find('h1').css('text-align', 'center');
						}
					}
				]
			}
			);

		});

		function calculateArrear() {
			var date2 = new Date($('#Fromdate').val());
			var date1 = new Date($('#ToDate').val());

			var d3 = date2.getMonth();
			var d4 = date1.getMonth();
			var MotalMonth = d4 - d3 + 1
			

			var d2 = getDaysInMonth(date2.getMonth() + 1, date2.getFullYear());
			var d1 = getDaysInMonth(date1.getMonth() + 1, date1.getFullYear());

			const diffTime = Math.abs(date2 - date1);
			const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

			if (diffDays > 0 && $('#amount').val() > 0) {
				var old = $('#oldBasic').val();
			
				var calculatedArrear = 0;
				//var totalMonthDay=0
				//var day=0
				var df2 = (d2 - date2.getDate()) + parseInt(1);
				var df1 = d1 - 0;
				for (var i = 0; i < MotalMonth; i++) {
					//totalMonthDay+=getDaysInMonth((d3 + i+1), date2.getFullYear());
					var amount=parseFloat($('#amount').val());
					var dayInMonth=getDaysInMonth((d3 + i + 1), date2.getFullYear());
					if(i==0){
						//day+=df2;
						calculatedArrear += ((amount/dayInMonth)  * df2)
					}
					else if(i==(MotalMonth-1)){
						//day+=df1;
						calculatedArrear += ((amount / dayInMonth) * df1)
					}
					else{
						//day+=getDaysInMonth((d3 + i), date2.getFullYear());
						calculatedArrear += amount
					}
				}
				//calculatedArrear += ((parseFloat($('#amount').val()) * MotalMonth) / totalMonthDay) * day;
				$('#CalculatedArrear').val(calculatedArrear.toFixed(2));

				$('#currentBasic').val((parseFloat(old) + parseFloat(calculatedArrear.toFixed(2))).toFixed(2));
			}
			else {
				$('#CalculatedArrear').val('');

				$('#currentBasic').val('');
			}
		}

		function getDaysInMonth(m, y) {
			--m;

			if (/8|3|5|10/.test(m)) return 30;

			if (m != 1) return 31;

			if ((y % 4 == 0 && y % 100 != 0) || y % 400 == 0) return 29;

			return 28;
		}

		function DeleteArrearInfo(id) {
			swal({
				title: 'Are you sure?', text: 'Do you want to delete this record!', type: 'warning', showCancelButton: true, confirmButtonColor: '#3085d6', cancelButtonColor: '#d33', confirmButtonText: 'Yes, delete it!'
			}).then(function () {
				Common.Ajax('GET', '/Payroll/Adjustment/DeleteArrear?id=' + id, [], 'json', ajaxDeleteArrear);
			});
		}
		function ajaxDeleteArrear(res) {
			if (res == true) {
				swal('success', 'Deleted Successfully', 'success').then(function () {
					location.reload();
				});
			}
			else {
				swal('warning', 'Delete Failed', 'warning');
			}
		}
		function EditArrear(Id, amount, employeeId, periodId, currentBasic, Fromdate, ToDate, CalculatedArrear, oldBasic, currentBasic) {
			$('#employeeArrearId').val(Id);
			$('#amount').val(amount);
			$('#employeeInfoId').val(employeeId);
			$('#currentBasic').val(currentBasic);
			$('#periodId').val(periodId);
			$('#Fromdate').val(Fromdate);
			$('#ToDate').val(ToDate);
			$('#CalculatedArrear').val(CalculatedArrear);
			$('#oldBasic').val(oldBasic);
			Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeeInfoById?id=' + employeeId, [], 'json', ajaxGetEmployeeInfoById);
		}

		function ajaxGetEmployeeInfoById(res) {
			$('#employeeInfoId').val(res.employeeId);
			$('#employeeName').val(res.empName);
			$('#posting').val(res.posting);
			$('#Designation').val(res.designation);
			$('#oldBasic').val(res.currentBasic);
        }

		function FillArrear(periodId, empCode) {
            $.ajax({
                url: '@Url.Action("GetArrearAmountByEmpCode", "Adjustment")',
                data: { periodId: periodId, empCode: empCode },
                type: 'GET',
            })
            .done(function (res) {
                $('#PrevBasic').val(res.PrevBasic);
                $('#amount').val(res.ArrearAmount);
            })
            .fail(function () {

            });
        }


		function ajaxGetEmployees(response) {
			var GeEmployeesList = [];
			$.each(response, function (id, option) {
				var obj = new Object();
				obj.key = option.employeeId;
				obj.value = option.empName + "(" + option.employeeCode + ")";
				obj.employeeCode = option.employeeCode;
				obj.posting = option.posting;
				obj.currentBasic = option.currentBasic;
				obj.designation = option.designation;
				GeEmployeesList[GeEmployeesList.length] = obj;
			});
			$('#employeeName').autocomplete({
				source: GeEmployeesList,
				select: function (event, ui) {
					$("#employeeName").val(ui.item.value);
                    $("#empCode").val(ui.item.employeeCode);
					$("#Designation").val(ui.item.designation);
					$("#posting").val(ui.item.posting);
					$("#employeeInfoId").val(ui.item.key);
                    $("#oldBasic").val(ui.item.currentBasic);

                    FillArrear($('#periodId').val(), $('#empCode').val());
				}
			});
		}

		//function Edit(Id, employeeInfoId, nameEnglish, employeeCode, designation, salaryPeriodId, arrearAmount) {
		//    $('#employeeArrearId').val(Id);
		//    $('#employeeInfoId').val(employeeInfoId);
		//    $('#employeeName').val(nameEnglish + '(' + (employeeCode) + ')');
		//    $('#Designation').val(designation);
		//    $('#salaryPeriodId').val(salaryPeriodId);
		//    $('#arrearAmount').val(arrearAmount);
		//}

		function GetTotalAmount() {

			var arAmount = parseFloat($("#txtArrear").val());
			var bnAmount = parseFloat($("#txtBonus").val());
			if ($("#txtArrear").val() == '') {
				arAmount = 0
			}
			if ($("#txtBonus").val() == '') {
				bnAmount = 0
			}

			$("#arrearAmount").val((parseFloat(arAmount) + parseFloat(bnAmount)).toFixed(2));
		}

		function LoadData() {

			if ($('#employeeInfoId').val() == "") {
				swal('Warning', 'Please Select Employee', 'warning');
				return false;
			}
			else if ($('#salaryPeriodId').val() == "") {
				swal('Warning', 'Please Select Salary Period', 'warning');
				return false;
			}
			else if ($('#arrearAmount').val() == "") {
				swal('Warning', 'Please Enter Amount', 'warning');
				return false;
			}

			Common.Ajax('GET', '/Payroll/Adjustment/GetEmployeeArrearCalculation/?empId=' + parseInt($('#employeeInfoId').val()) + '&periodId=' + parseInt($('#salaryPeriodId').val()) + '&totalAmount=' + parseFloat($('#arrearAmount').val()) + '&bonusAmount=' + parseFloat($('#txtBonus').val()), [], 'json', ajaxGetEmployeeArrearCalculation);
		}

		function ajaxGetEmployeeArrearCalculation(response) {
			console.log(response)
			$('#leaveTable').DataTable().destroy();
			var dtTable = $("#leaveTable");
			var tableBody = dtTable.find('tbody');
			tableBody.empty();
			var i = 1;
			$.each(response, function (key, value) {
				var trHtml = '<tr><td>' + i + '</td><td>' + value.salaryHeadName + '</td><td>' + value.arrearAmount.toFixed(2) + '</td><td>' + value.ratio.toFixed(2) + '</td></tr>';
				tableBody.append(trHtml);
				i++;
			});
			$('#leaveTable').DataTable();
		}

	</script>
}




















