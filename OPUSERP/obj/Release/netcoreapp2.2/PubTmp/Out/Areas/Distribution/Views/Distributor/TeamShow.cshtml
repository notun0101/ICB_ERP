@model CustomerViewModel
@{
    ViewData["Title"] = "Team Show";
    Layout = "~/Areas/MasterData/Views/Shared/_CustomerDataForm.cshtml";
}

@section StyleMD{
}


<div class="card" style="width: 100%;">
    <div class="card mb-3">
        <div class="card-header">
            <i class="fas fa-table"></i>
            All Distributor vs Team
            @*<div class="btn-group" role="group" style="float:right" aria-label="Basic example">
                    <button id="lanENG" type="button" style="font-size:10px;" class="btn btn-info">ENG</button>
                    <button id="lanBAN" type="button" style="font-size:10px;" class="btn btn-success">বাংলা</button>
                </div>*@
        </div>

        <div class="card-body" style="min-height: 500px;">
            <div id="d3Content">
                <img id="customLoaderMenu" src="~/images/loader-64x/Preloader_3.gif" alt="loader" style="margin-top: 200px; margin-left: 48%;" />
            </div>
        </div>
        <div class="card-footer small text-muted"></div>

    </div>
  
</div>

<br />
<hr />
<div class="card" style="width: 100%;">
    <div class="card mb-3">
        <div class="card-header">
            <i class="fas fa-table"></i>
            All Distributor vs Area
            @*<div class="btn-group" role="group" style="float:right" aria-label="Basic example">
                    <button id="lanENG" type="button" style="font-size:10px;" class="btn btn-info">ENG</button>
                    <button id="lanBAN" type="button" style="font-size:10px;" class="btn btn-success">বাংলা</button>
                </div>*@
        </div>

        <div class="card-body" style="min-height: 500px;">
            <div id="d3ContentArea">
                <img id="customLoaderMenuArea" src="~/images/loader-64x/Preloader_3.gif" alt="loader" style="margin-top: 200px; margin-left: 48%;" />
            </div>
        </div>
        <div class="card-footer small text-muted"></div>

    </div>

</div>


@section ScriptsMD{
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script>

        $(document).ready(function () {
           

            $("#d3Content").empty();
            $("#d3ContentArea").empty();
            //$("#d3Content").append(
            //    '<img id="customLoaderMenu" src="~/images/loader-64x/Preloader_3.gif" alt="loader" style="margin-top: 200px; margin-left: 48%;" />'
            //);
            $.get("/Distribution/Distributor/GetMenusJsonTeam", function (data, status) {

                GenerateTreeENG(data.menus, data.depth);
            }, false);
            $.get("/Distribution/Distributor/GetMenusJsonTeamArea", function (data, status) {

                GenerateTreeAreaENG(data.menus, data.depth);
            });

        });
      

       

        function ClearMenu() {

            $("#masterareaid").val(null);
            //$("#currentMenuId").val(null);
            //$("#currentMenuIdAction").val(null);
            //$("#ParrentMenuName").val(null);
            //$("#CurrentManeuNameAction").val(null);
            //$("#ParrentMenuNameEN").val(null);
            //$("#CurrentManeuNameENAction").val(null);
            //$("#currentMenuName").val(null);
            //$("#currentMenuNameEN").val(null);

            //$("#addMenu").hide();
            //$("#renameMenu").hide();
            //$("#makeLast").hide();
            //$("#makeGeneral").hide();
            //$("#deleteMenu").hide();

        }

        function SelectMenu(id, menuName, menuNameEN, type) {
            $("#masterareaid").val(id);
            $("#areaId").val(null);
            //$("#currentMenuId").val(id);
            //$("#currentMenuIdAction").val(id);
            //$("#ParrentMenuName").val(menuName);
            //$("#CurrentManeuNameAction").val(menuName);
            //$("#ParrentMenuNameEN").val(menuNameEN);
            //$("#CurrentManeuNameENAction").val(menuNameEN);
            //$("#currentMenuName").val(menuName);
            //$("#currentMenuNameEN").val(menuNameEN);


            $("#renameMenu").show();
            $("#deleteMenu").show();
            if (type == "parrent") {
                $("#makeLast").show();
                $("#addMenu").show();
                $("#makeGeneral").hide();
            } else {
                $("#addMenu").hide();
                $("#makeLast").hide();
                $("#makeGeneral").show();
            }
            Common.Ajax('GET', '/api/global/getsaleslevelparentId/' + type, [], 'json', Getsales, false);
            //  table.columns(5).search(menuName).draw(); // Data Seraching Done, By menu selecting.

        }
        function Edit(Id, areaCode, areaName, areaLocation, areaid) {
            $("#areaId").val(Id);
            $("#areaCode").val(areaCode);
            $("#areaName").val(areaName);
            $("#areaLocation").val(areaLocation);
            //$("#salesLevelareaId").val(saleslevelId);
            $("#masterareaid").val(areaid);
            Common.Ajax('GET', '/api/global/getsaleslevelbyId/' + saleslevelId, [], 'json', Getsaleslevel, false);
        }
        function Remove(Id) {
            swal({
                title: 'Are you sure?', text: 'Do you want to delete this record!', type: 'warning', showCancelButton: true, confirmButtonColor: '#3085d6', cancelButtonColor: '#d33', confirmButtonText: 'Yes, delete it!'
            }).then(function () {
                window.location.href = "/Distribution/Area/Delete/?id=" + Id;
                swal({
                    title: '', text: 'Deleted Successfully!', type: 'success', showCancelButton: false, confirmButtonColor: '#3085d6', confirmButtonText: 'Ok!',
                });
            });

        }

        function CheckStatus3() {
            if ($("#ParrentMenuName").val() == "" || $("#ParrentMenuName").val() == null) {
                swal("Opps!!!", "Select A Menu First", "error");
                return false;
            }

            if ($("#actionConfirmation").val() != "yes") {
                swal("Opps!!!", "Type yes for confirmation", "info");
                return false;
            }

            return true;
        }

        var treeData, treeDataDepth;

        // ************** Generate the tree diagram	 *****************
        var margin = { top: 20, right: 60, bottom: 20, left: 60 },
            width = 960 - margin.right - margin.left,
            height = 500 - margin.top - margin.bottom;

        var i = 0,
            duration = 750,
            root;

        var tree = d3.layout.tree()
            .size([height, width]);

        var diagonal = d3.svg.diagonal()
            .projection(function (d) { return [d.y, d.x]; });
        var svg;

        function GenerateTree(tempData, tempdepth) {
            console.log(tempData);
            $("#customLoaderMenu").hide();
            treeData = JSON.parse(tempData);
            treeDataDepth = tempdepth;
            svg = d3.select("#d3Content").append("svg")
                .attr("width", width + margin.right + margin.left)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            root = treeData[0];
            root.x0 = height / 2;
            root.y0 = 0;

            update(root);

            d3.select(self.frameElement).style("height", "500px");
        }
        function GenerateTreeENG(tempData, tempdepth) {
            console.log(tempData);
            $("#customLoaderMenu").hide();
            treeData = JSON.parse(tempData);
            treeDataDepth = tempdepth;
            svg = d3.select("#d3Content").append("svg")
                .attr("width", width + margin.right + margin.left)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            root = treeData[0];
            root.x0 = height / 2;
            root.y0 = 0;

            updateENG(root);

            d3.select(self.frameElement).style("height", "500px");
        }
        function GenerateTreeAreaENG(tempData, tempdepth) {
            console.log(tempData);
            $("#customLoaderMenuArea").hide();
            treeData = JSON.parse(tempData);
            treeDataDepth = tempdepth;
            svg = d3.select("#d3ContentArea").append("svg")
                .attr("width", width + margin.right + margin.left)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            root = treeData[0];
            root.x0 = height / 2;
            root.y0 = 0;

            updateENGArea(root);

            d3.select(self.frameElement).style("height", "500px");
        }
        function updateENGArea(source) {


            // Compute the new tree layout.
            var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) { d.y = d.depth * ((width - 90) / treeDataDepth); });

            // Update the nodes…
            var node = svg.selectAll("g.node")
                .data(nodes, function (d) { return d.id || (d.id = ++i); });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                .on("click", clickENG);

            nodeEnter.append("circle")
                .attr("r", 1e-6)
                .style("fill", function (d) {
                    if (d.type == "parrent") return "lightsteelblue";
                    return "#111";
                });

            nodeEnter.append("text")
                .attr("x", function (d) { return d.children || d._children ? -13 : 13; })
                .attr("dy", ".35em")
                .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                .text(function (d) { return d.nameEN; })
                .style("fill-opacity", 1e-6);

            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + d.y + "," + d.x + ")"; });

            nodeUpdate.select("circle")
                .attr("r", 10)
                .style("fill", function (d) {
                    if (d.type == "parrent") return "lightsteelblue";
                    return "#111";
                });

            nodeUpdate.select("text")
                .style("fill-opacity", 1);

            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + source.y + "," + source.x + ")"; })
                .remove();

            nodeExit.select("circle")
                .attr("r", 1e-6);

            nodeExit.select("text")
                .style("fill-opacity", 1e-6);

            // Update the links…
            var link = svg.selectAll("path.link")
                .data(links, function (d) { return d.target.id; });

            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", function (d) {
                    var o = { x: source.x0, y: source.y0 };
                    return diagonal({ source: o, target: o });
                });

            // Transition links to their new position.
            link.transition()
                .duration(duration)
                .attr("d", diagonal);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                .duration(duration)
                .attr("d", function (d) {
                    var o = { x: source.x, y: source.y };
                    return diagonal({ source: o, target: o });
                })
                .remove();

            // Stash the old positions for transition.
            nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        }
        function updateENG(source) {


            // Compute the new tree layout.
            var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) { d.y = d.depth * ((width - 90) / treeDataDepth); });

            // Update the nodes…
            var node = svg.selectAll("g.node")
                .data(nodes, function (d) { return d.id || (d.id = ++i); });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                .on("click", clickENG);

            nodeEnter.append("circle")
                .attr("r", 1e-6)
                .style("fill", function (d) {
                    if (d.type == "parrent") return "lightsteelblue";
                    return "#111";
                });

            nodeEnter.append("text")
                .attr("x", function (d) { return d.children || d._children ? -13 : 13; })
                .attr("dy", ".35em")
                .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                .text(function (d) { return d.nameEN; })
                .style("fill-opacity", 1e-6);

            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + d.y + "," + d.x + ")"; });

            nodeUpdate.select("circle")
                .attr("r", 10)
                .style("fill", function (d) {
                    if (d.type == "parrent") return "lightsteelblue";
                    return "#111";
                });

            nodeUpdate.select("text")
                .style("fill-opacity", 1);

            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + source.y + "," + source.x + ")"; })
                .remove();

            nodeExit.select("circle")
                .attr("r", 1e-6);

            nodeExit.select("text")
                .style("fill-opacity", 1e-6);

            // Update the links…
            var link = svg.selectAll("path.link")
                .data(links, function (d) { return d.target.id; });

            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", function (d) {
                    var o = { x: source.x0, y: source.y0 };
                    return diagonal({ source: o, target: o });
                });

            // Transition links to their new position.
            link.transition()
                .duration(duration)
                .attr("d", diagonal);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                .duration(duration)
                .attr("d", function (d) {
                    var o = { x: source.x, y: source.y };
                    return diagonal({ source: o, target: o });
                })
                .remove();

            // Stash the old positions for transition.
            nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        }
        function update(source) {

            // Compute the new tree layout.
            var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) { d.y = d.depth * ((width - 90) / treeDataDepth); });

            // Update the nodes…
            var node = svg.selectAll("g.node")
                .data(nodes, function (d) { return d.id || (d.id = ++i); });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                .on("click", click);

            nodeEnter.append("circle")
                .attr("r", 1e-6)
                .style("fill", function (d) {
                    if (d.type == "parrent") return "lightsteelblue";
                    return "#111";
                });

            nodeEnter.append("text")
                .attr("x", function (d) { return d.children || d._children ? -13 : 13; })
                .attr("dy", ".35em")
                .attr("text-anchor", function (d) { return d.children || d._children ? "end" : "start"; })
                .text(function (d) { return d.name; })
                .style("fill-opacity", 1e-6);

            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + d.y + "," + d.x + ")"; });

            nodeUpdate.select("circle")
                .attr("r", 10)
                .style("fill", function (d) {
                    if (d.type == "parrent") return "lightsteelblue";
                    return "#111";
                });

            nodeUpdate.select("text")
                .style("fill-opacity", 1);

            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) { return "translate(" + source.y + "," + source.x + ")"; })
                .remove();

            nodeExit.select("circle")
                .attr("r", 1e-6);

            nodeExit.select("text")
                .style("fill-opacity", 1e-6);

            // Update the links…
            var link = svg.selectAll("path.link")
                .data(links, function (d) { return d.target.id; });

            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
                .attr("class", "link")
                .attr("d", function (d) {
                    var o = { x: source.x0, y: source.y0 };
                    return diagonal({ source: o, target: o });
                });

            // Transition links to their new position.
            link.transition()
                .duration(duration)
                .attr("d", diagonal);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                .duration(duration)
                .attr("d", function (d) {
                    var o = { x: source.x, y: source.y };
                    return diagonal({ source: o, target: o });
                })
                .remove();

            // Stash the old positions for transition.
            nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        }

        // Toggle children on click.
        function click(d) {

            //console.log(d.name);

            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            update(d);
           // SelectMenu(d.data, d.name, d.nameEN, d.type);
            $('html, body').animate({
                scrollTop: $("#modificationSec").offset().top
            }, 2000);

        }
        function clickENG(d) {

            //console.log(d.name);

            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            updateENG(d);
           // SelectMenu(d.data, d.name, d.nameEN, d.type);
            $('html, body').animate({
                scrollTop: $("#modificationSec").offset().top
            }, 2000);

        }


    </script>
}





